#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2012 ForgeRock AS. All Rights Reserved
#
# The contents of this file are subject to the terms
# of the Common Development and Distribution License
# (the License). You may not use this file except in
# compliance with the License.
#
# You can obtain a copy of the License at
# http://forgerock.org/license/CDDLv1.0.html
# See the License for the specific language governing
# permission and limitations under the License.
#
# When distributing Covered Code, include this CDDL
# Header Notice in each file and include the License file
# at http://forgerock.org/license/CDDLv1.0.html
# If applicable, add the following below the CDDL Header,
# with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#

# Properties file which configures the operation of the JDK
# logging facility.

# The system will look for this config file, first using 
# a System property specified at startup: 
# 
# >java -Djava.util.logging.config.file=myLoggingConfigFilePath 
# 
# If this property is not specified, then the config file is 
# retrieved from its default location at: 
# 
# JDK_HOME/jre/lib/logging.properties

############################################################
#      Global properties
############################################################
# ------------------------------------------ 
# The set of handlers to be loaded upon startup. 
# Comma-separated list of class names.
# (? LogManager docs say no comma here, but JDK example has comma.)
# StreamHandler: A simple handler for writing formatted records to an OutputStream.
# ConsoleHandler: A simple handler for writing formatted records to System.err
# FileHandler: A handler that writes formatted log records either to a single file, or to a set of rotating log files.
# SocketHandler: A handler that writes formatted log records to remote TCP ports.
# MemoryHandler: A handler that buffers log records in memory.
# handlers=java.util.logging.ConsoleHandler
handlers=java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
# Loggers and Handlers may override this level 
.level=FINE

# Loggers 
# ------------------------------------------ 
# Loggers are usually attached to packages. 
# Here, the level for each package is specified. 
# The global level is used by default, so levels 
# specified here simply act as an override.
# The levels in descending order are:
#   SEVERE (highest value)
#   WARNING
#   INFO
#   CONFIG
#   FINE
#   FINER
#   FINEST (lowest value)

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################
#org.forgerock.openidm.provisioner.level = FINER
#org.forgerock.openidm.repo.level = FINER
#org.forgerock.openidm.recon.level = FINER

# OpenICF is noisy at INFO level
com.forgerock.openicf.level=WARNING

# Logs the output from OSGi logging
org.forgerock.openidm.Framework.level=FINE

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# --- ConsoleHandler ---
# Default: java.util.logging.ConsoleHandler.level = INFO
# Override of global logging level 
java.util.logging.ConsoleHandler.level = WARNING
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
# specifies the name of the filter class to be associated with this handler,
# defaults to {@code null} if this property is not found or has an invalid value.
java.util.logging.ConsoleHandler.filter=org.forgerock.openidm.logging.util.LogFilter


