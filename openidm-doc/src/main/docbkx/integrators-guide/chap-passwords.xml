<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-passwords'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Managing Passwords</title>
 <indexterm>
  <primary>Passwords</primary>
 </indexterm>

 <para>OpenIDM provides password management features that help you enforce
 password policies, limit the number of passwords users must remember, and
 let users reset and change their passwords.</para>

 <section xml:id="enforce-password-policy">
  <title>Enforcing Password Policy</title>

  <para>A password policy is a set of rules defining what sequence of
  characters constitutes an acceptable password. Acceptable passwords generally
  are too complex for users or automated programs to generate or guess.</para>

  <para>Password policies set requirements for password length, character sets
  that passwords must contain, dictionary words and other values that passwords
  must not contain. Password policies also require that users not reuse old
  passwords, and that users change their passwords on a regular basis.</para>

  <indexterm>
   <primary>Objects</primary>
   <secondary>Managed objects</secondary>
   <tertiary>Passwords</tertiary>
  </indexterm>

  <para>OpenIDM enforces password policy rules as part of the general policy 
  service. For more information about the policy service, see 
  <link xlink:href="integrators-guide#chap-policies" 
  xlink:role="http://docbook.org/xlink/role/olink">
  <citetitle>Using Policies to Validate Data</citetitle></link>. The default 
  password policy applies the following rules to passwords as they are created 
  and updated:</para>
  
  <itemizedlist>
    <listitem><para>A password property is required for any user object.</para>
    </listitem>
    <listitem><para>The value of a password cannot be empty.</para></listitem>
    <listitem><para>The password must include at least one capital letter.
    </para></listitem>
    <listitem><para>The password must include at least one number.</para>
    </listitem>
    <listitem><para>The minimum length of a password is 8 characters.</para>
    </listitem>
    <listitem><para>The password cannot contain the user name, given name, or 
    family name.</para></listitem>
  </itemizedlist>

  <para>You can remove these validation requirements, or include additional 
  requirements, by configuring the policy for passwords. For more information, 
  see <link xlink:href="integrators-guide#configuring-default-policy" 
  xlink:role="http://docbook.org/xlink/role/olink">
  <citetitle>Configuring the Default Policy</citetitle></link>.</para>

  <variablelist>
   <para>The password validation mechanism can apply in many situations.</para>
   <varlistentry>
    <term>Password change and password reset</term>
    <listitem>
     <para>Password change involves changing a user or account password
     in accordance with password policy. Password reset involves setting a
     new user or account password on behalf of a user.</para>
     <para>By default, OpenIDM controls password values as they are
     provisioned.</para>
     <para>To change the default administrative user password,
     <literal>openidm-admin</literal>, see the procedure, <link
     xlink:role="http://docbook.org/xlink/role/olink"
     xlink:href="integrators-guide#security-replace-default-user-password"
     ><citetitle>To Replace the Default User and Password</citetitle></link>,
     for instructions.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Password recovery</term>
    <listitem>
     <para>Password recovery involves recovering a password or setting a new
     password when the password has been forgotten.</para>
     <para>OpenIDM provides a self-service end user interface for password
     changes, password recovery, and password reset. For more information, see 
     <link xlink:role="http://docbook.org/xlink/role/olink" 
     xlink:href="integrators-guide#ui-managing-passwords">
     <citetitle>Managing Passwords With the UI</citetitle></link>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Password comparisons with dictionary words</term>
    <listitem>
     <para>You can add dictionary lookups to prevent use of password values
     that match dictionary words.</para>
     <!-- TODO: Example -->
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Password history</term>
    <listitem>
     <para>
      You can add checks to prevent reuse of previous password values. For more
      information, see <xref linkend="password-history" />.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Password expiration</term>
    <listitem>
     <para>You can configure OpenIDM to call a workflow that ensures users
     are able to change expiring or to reset expired passwords.</para>
     <!-- TODO: Example -->
    </listitem>
   </varlistentry>
  </variablelist>

  <section xml:id="password-history">
   <title>Creating a Password History Policy</title>
    <indexterm>
     <primary>Synchronization</primary>
     <secondary>Passwords</secondary>
    </indexterm>

    <para>
     To minimize password reuse, you can set up a password history policy.
     One way to do so is with a custom javascript file for the
     <literal>onCreate</literal> trigger. You can then add a reference
     to that javascript file in the <filename>conf/managed.json</filename> file.
    </para>

    <para>
     You would then add a scripted policy in a custom javascript file,
     ready to be called out in appropriate JSON configuration files.
    </para>

    <para>
     The following procedure retains a record of the last four passwords for
     each user. Any attempt to reuse one of those passwords is rejected.
    </para>

    <para>
     This procedure takes advantage of the directories configured in
     the <filename>conf/script.json</filename> file. If you started
     OpenIDM with files in some <filename>customconfig</filename>
     subdirectory, you would need to make sure such files exist in
     that directory tree. For more information, see the section on <link
     xlink:show="new"
     xlink:href="integrators-guide#config-default-directories"
     xlink:role="http://http://docbook.org/xlink/role/olink">
     <citetitle>Default and Custom Configuration Directories</citetitle>.
     </link>
    </para>

   <procedure xml:id="create-password-array">
    <title>Configuring Limits on Password History</title>

    <step>
     <para>
      Create a custom <literal>onCreate</literal> javascript file. One
      way to do so is with a copy of the
      <filename>onCreate-user-set-default-files.js</filename> file in the
      <filename>bin/defaults/script/ui</filename> directory.
      You can save the custom file in the
      <filename>script</filename> directory. For example,
      the following commands create an
      <filename>onCreate-user-custom.js</filename> file in the default
      script directory defined in <filename>conf/script.json</filename>:
     </para>
     <screen width="90">$ cd /path/to/openidm/bin/defaults/script/ui
$ cp onCreate-user-set-default-fields.js /path/to/openidm/script/onCreate-user-custom.js</screen>
    </step>

    <step>
     <para>
      In the newly created custom Javascript file, include the cipher for
      password encryption:
     </para>
     <screen width="90">var cipher = "AES/CBC/PKCS5Padding",
     alias = identityServer.getProperty("openidm.config.crypto.alias", "true", true);</screen>
    </step>

    <step>
     <para>
      Next, declare a new
      <literal>lastPass</literal> attribute. For example, to prevent
      reuse of the last four passwords, you would add the following line:
     </para>
     <screen>object.lastPass = new Array(4);</screen>
    </step>

    <step>
     <para>
      After the new array is declared, the following lines would increment
      the previous password:
     </para>
     <screen>if (object.password) {
    object.lastPass.shift();
    object.lastPass.push(object.password);
}</screen>
    </step>

    <step>
     <para>
      Now create a new file with a script that increments passwords in the
      array with each new password. This procedure uses the following file name:
      <filename>onUpdate-user-pwpolicy.js</filename>, written to the same
      directory as the <filename>onCreate-user-custom.js</filename> file,
      in this case, <filename>script</filename>.
     </para>
    </step>

    <step>
     <para>
      Add the following content to the newly created
      <filename>onUpdate-user-pwpolicy.js</filename> file:
     </para>
     <screen>/*global newObject, oldObject */
var cipher = "AES/CBC/PKCS5Padding",
  alias = identityServer.getProperty("openidm.config.crypto.alias", "true", true);

if (openidm.isEncrypted(newObject.lastPass)) {
  newObject.lastPass = openidm.decrypt(newObject.lastPass);
}

if (typeof newObject.lastPass === "undefined") {
  newObject.lastPass = new Array(4);
}

if (newObject.password !== oldObject.password) {
  newObject.lastPass.shift();
  newObject.lastPass.push(newObject.password);
}

newObject.lastPass = openidm.encrypt(newObject.lastPass, cipher, alias);
}</screen>
    </step>

    <step>
     <para>
      In the existing <filename>conf/managed.json</filename> file, add
      appropriate lines that point to the files just created in the
      <filename>script</filename> directory. Given the
      default directories previously described in the <filename>
      conf/script.json</filename> file, you do not need to add a
      directory path to the newly created files. The following is
      an excerpt of the modified <filename>conf/managed.json</filename> file:
     </para>
     <screen>{
      "objects" : [
           "name" : "user"
           "onCreate" : {
                "type" : "text/javascript",
                "file" : "onCreate-user-custom.js"
           },
           "onUpdate" : {
                "type" : "text/javascript",
                "file" : "onUpdate-user-pwpolicy.js"
           },
           "onDelete" : {
                "type" : "text/javascript",
                "file" : "ui/onDelete-user-cleanup.js"
           },</screen>
    </step>

    <step>
     <para>
      Now extend the policy service to all users by adding a scripted
      policy. One way to do so is by adding the following information to
      a custom javascript file. For this procedure, call that file
      <filename>pwpolicy.js</filename>, also in the <filename>script</filename>
      subdirectory.
     </para>
     <para>
      As you can see from the comments to the file, it is designed to ignore new
      users, users without a password history, and users for whom passwords
      have not changed.
     </para>
     <para>
      The last part of the file decrypts encrypted passwords prior to making
      the comparison, and makes sure the password has a non-zero length.
     </para>
     <screen width="90">/*global addPolicy, request, openidm */

addPolicy({
  "policyId" : "is-new",
  "policyExec" : "isNew",
  "policyRequirements" : ["IS_NEW"]
});

function isNew(fullObject, value, params, property) {
  var currentObject, lastPass, i;

  // don't do a read if the resource ends with "/*", which indicates that
  // this is a create with a server-supplied id
  if (!request.resourceName || request.resourceName.match('/\\*$')) {
    return [];
  }

  currentObject = openidm.read(request.resourceName);

  // don't try this policy if the resource being evaluated wasn't found. Happens in the
  // case of a create with a client-supplied id.
  if (currentObject === null) {
    return [];
  }

  // don't try this policy is there is no history object available
  if (currentObject.lastPass === null || currentObject.lastPass === undefined) {
     return [];
  }

  if (currentObject[property] !== null &amp;&amp; currentObject[property] !== undefined &amp;&amp;
     openidm.isEncrypted(currentObject[property])) {
     currentObject[property] = openidm.decrypt(currentObject[property]);
  }

  // if the password hasn't changed, then we aren't interested in checking the history
  if (currentObject[property] === value) {
     return [];
  }

  if (openidm.isEncrypted(currentObject.lastPass)) {
     lastPass = openidm.decrypt(currentObject.lastPass);
  } else {
     lastPass = currentObject.lastPass;
  }

  for(i=0; i &lt; lastPass.length; i++) {
    if (lastPass[i] === value) {
      return [{"policyRequirement": "IS_NEW"}];
    }
  }
  return [];

}</screen>
    </step>

    <step>
     <para>
      Now open the <filename>conf/policy.json</filename> file. Add
      the following lines to call the newly created
      <filename>pwpolicy.js</filename> script, right after
      the existing line that calls the <filename>policy.js</filename>
      script:
     </para>
     <screen>...
      "file" : "policy.js",
      "additionalFiles" :  [
          "script/pwpolicy.js"],
...</screen>
    </step>

    <step>
     <para>
      Later in the same <filename>conf/policy.json</filename> file, in the
      <literal>password</literal> configuration block, add the newly created
      <literal>is-new</literal> <literal>policyId</literal>:
     </para>
     <screen>...
     {
          "name" : "password",
          "policies" : [
              {
                  "policyId" : "not-empty"
              },
              {
                  "policyId" : "is-new"
              },
...</screen>
    </step>

    <step>
     <para>
      Reopen the <filename>conf/managed.json</filename> file. Add the following
      code to the <literal>properties</literal> section to encrypt the
      new <literal>lastPass</literal> attribute, and
      to prevent REST retrievals of such passwords:
     </para>
     <screen>...
      "properties" : [
          {
              "name" : "lastPass",
              "encryption" : {
                  "key" : "openidm-sym-default"
              },
              "scope" : "private"
          }
      ...</screen>
    </step>
   </procedure>
  </section>

 </section>

 <section xml:id="password-sync">
  <title>Password Synchronization</title>
  <indexterm>
   <primary>Synchronization</primary>
   <secondary>Passwords</secondary>
  </indexterm>

  <para>
   Password synchronization intercepts user password changes, and ensures
   uniform password changes across resources that store the password. Following
   password synchronization, the user authenticates using the same password on
   each resource. No centralized directory or authentication server is required
   for performing authentication. Password synchronization reduces the number of
   passwords users need to remember, so they can use fewer, stronger passwords.
  </para>

  <para>
   OpenIDM can propagate passwords to the resources that store a user's
   password, and can intercept and synchronize passwords that are changed
   natively in OpenDJ and Active Directory.
  </para>

  <para>
   When you use password synchronization, set up password policy enforcement on
   OpenDJ or Active Directory rather than on OpenIDM. Alternatively, ensure that
   all password policies that are enforced are identical to prevent password
   updates on one resource from being rejected by OpenIDM or by another
   resource.
  </para>

  <para>
   The password synchronization plugins intercept password changes on the
   resource before the passwords are stored in encrypted form. The plugins then
   send intercepted password values to OpenIDM over an encrypted channel.
  </para>

  <para>
   In the event that the OpenIDM instance is unavailable when a password is
   changed, the plugin intercepts the change, encrypts the password, and stores
   the encrypted password in a JSON file. The plugin then checks whether the
   OpenIDM instance is available, at a predefined interval. When OpenIDM becomes
   available, the plugin performs a PATCH on the user record, to replace the
   password with the encrypted password stored in the JSON file.
  </para>

  <para>
   To be able to synchronize the passwords, the plugin requires that the
   <literal>managed/user</literal> object exist in the OpenIDM repository. Users
   have typically been created by a reconciliation or liveSync process.
  </para>

  <para>
   The OpenDJ password sync plugin is supported for OpenDJ versions 2.4.6, 2.5,
   and 2.6. The Active Directory password sync plugin is supported on Windows
   2008 RC 2, Active Directory version 47.
  </para>

  <para>
   The sample provided in
   <filename>/path/to/openidm/samples/misc/managed.json</filename> shows
   password synchronization between three systems - OpenIDM, OpenDJ, and Active
   Directory. The sample assumes that the following steps have been performed:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     You have set up OpenDJ and Active Directory.
    </para>
   </listitem>
   <listitem>
    <para>
     The password attributes for the three systems are as follows:
    </para>
     <simplelist>
      <member><literal>ldapPassword</literal> for OpenDJ</member>
      <member><literal>adPassword</literal> for Active Directory</member>
      <member><literal>password</literal> for the internal OpenIDM password</member>
     </simplelist>
   </listitem>
   <listitem>
    <para>
     You have installed the password synchronization plugins, as described in
     the following sections.
    </para>
   </listitem>
  </itemizedlist>

  <procedure xml:id="install-opendj-password-sync-plugin">
   <title>To Install the OpenDJ Password Synchronization Plugin</title>
   <indexterm>
    <primary>Synchronization</primary>
    <secondary>Passwords</secondary>
    <tertiary>With OpenDJ</tertiary>
   </indexterm>

   <itemizedlist>
     <para>
      Before you start:
     </para>
     <listitem>
      <para>
       Make sure that OpenDJ is configured to communicate over LDAPS as
       described in the <link xlink:show="new"
       xlink:href='http://opendj.forgerock.org/doc/admin-guide/#chap-listeners'
       >OpenDJ documentation</link>.
      </para>
     </listitem>
     <listitem>
      <para>
       OpenIDM must be running.
      </para>
     </listitem>
   </itemizedlist>

   <para>
    The following steps install the plugin on an OpenDJ directory server that is
    running on the same host as OpenIDM. If you run OpenDJ on a different host,
    use the fully qualified domain name rather than
    <literal>localhost</literal>, and use your certificates rather than the
    generated OpenIDM certificate.
   </para>

   <step>
    <para>
     OpenIDM generates a self-signed certificate the first time it starts up.
     You must import this self-signed certificate into OpenDJ's truststore so
     that the OpenDJ agent can make SSL requests to the OpenIDM endpoints.
    </para>
    <substeps>
     <step>
      <para>
       Export OpenIDM's generated self-signed certificate to a file, as follows:
      </para>
      <screen>$ cd /path/to/openidm/security
$ keytool
 -export
 -alias openidm-localhost
 -file openidm-localhost.crt
 -keystore keystore.jceks
 -storetype jceks
Enter keystore password: &lt;changeit&gt;
Certificate stored in file &lt;openidm-localhost.crt&gt;</screen>
     </step>
     <step>
      <para>
       Import the self-signed certificate into the trust store for OpenDJ.
      </para>
      <screen>$ cd /path/to/OpenDJ/config
$ keytool
 -import
 -alias openidm-localhost
 -keystore truststore
 -storepass `cat keystore.pin`
 -file /path/to/openidm/security/openidm-localhost.crt
Owner: C=None, L=None, O=OpenIDM Self-Signed Certificate, OU=None, CN=localhost
Issuer: C=None, L=None, O=OpenIDM Self-Signed Certificate, OU=None, CN=localhost
Serial number: 1544a7b975ed50a7
Valid from: Sat Oct 19 16:04:41 SAST 2013 until: Thu Nov 16 16:04:41 SAST 2023
Certificate fingerprints:
	 MD5:  0C:BF:08:06:F0:69:E8:E6:6F:39:38:B8:CC:9A:C1:60
	 SHA1: B0:40:17:0A:6E:3A:3B:BB:82:39:A1:97:04:00:BC:7C:94:63:76:E7
	 Signature algorithm name: SHA512withRSA
	 Version: 3
Trust this certificate? [no]:  yes
Certificate was added to keystore
      </screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Download the OpenDJ password synchronization plugin (OpenIDM Agents-OpenDJ)
     from the OpenIDM download page under the ForgeRock <link
     xlink:href="http://forgerock.com/download-stack/"
     xlink:show="new">Open Stack download page</link>.
    </para>
   </step>
   <step>
    <para>
     Unzip the module delivery.
    </para>
    <screen>
$ unzip ~/Downloads/opendj-accountchange-handler-<?eval ${opendjPasswordPluginVersion}?>.zip
   creating: opendj/
   creating: opendj/config/
   creating: opendj/config/schema/
...</screen>
   </step>
   <step>
    <para>
     Copy the files to the directory where OpenDJ is installed.
    </para>
    <screen>$ cd opendj
$ cp -r * /path/to/OpenDJ/</screen>
   </step>

   <!-- TODO: Remove this next step when OPENIDM-1380 is resolved -->
   <step>
    <para>
     Workaround for <literal>OPENIDM-1380</literal>:
    </para>
    <para>
     Edit the file
     <filename>/path/to/OpenDJ/config/schema/90-openidm-pwsync-plugin.ldif</filename>
     to remove the attributes <literal>ds-cfg-sql-user</literal> and
     <literal>ds-cfg-sql-passwd</literal>.
    </para>
   </step>

   <!-- TODO: Remove this next step when OPENIDM-1379 is resolved -->
   <step>
    <para>
     Workaround for <literal>OPENIDM-1379</literal>:
    </para>
    <para>
     Move the following nine jar files from the <literal>opendj/lib</literal>
     folder into the <literal>opendj/lib/extensions</literal> folder:
    </para>
       <screen>
$ cd /path/to/opendj/lib
$ mv json-fluent-1.1.0.jar extensions/
$ mv org.forgerock.util-1.0.0.jar extensions/
$ mv json-crypto-core-1.1.0.jar extensions/
$ mv jackson-core-asl-1.9.3.jar extensions/
$ mv jackson-mapper-asl-1.9.3.jar extensions/
$ mv org.restlet-2.0.10.jar extensions/
$ mv org.restlet.ext.jackson-2.0.10.jar extensions/
$ mv org.restlet.ext.net-2.0.10.jar extensions/
$ mv commons-codec-1.5.jar extensions/
       </screen>
   </step>

   <step>
    <para>
     Restart OpenDJ to load the additional schema from the module.
    </para>
    <screen>$ cd /path/to/OpenDJ/bin
$ ./stop-ds --restart</screen>
   </step>

   <!--TODO: Remove this step when OPENIDM-1523 is resolved -->
   <step>
    <para>
     Workaround for <literal>OPENIDM-1523</literal>:
    </para>
    <para>
     Edit the plugin config with a subjectDN that matches the generated OpenIDM
     certificate.
    </para>
    <screen>$ cd /path/to/OpenDJ/config</screen>
    <para>
     Edit <filename>openidm-pwsync-plugin-config.ldif</filename>, changing the
     value of <literal>ds-certificate-subject-dn</literal> to
     <literal>C=None, L=None, O=OpenIDM Self-Signed Certificate, OU=None,
      CN=localhost</literal>.
    </para>
   </step>

   <step>
    <para>
     Add the plugin configuration to OpenDJ's configuration.
    </para>
    <!-- TODO: Figure out how to do this with dsconfig instead of ldapmodify. -->
    <screen>$ ./ldapmodify
 --port 1389
 --hostname `hostname`
 --bindDN "cn=Directory Manager"
 --bindPassword "password"
 --defaultAdd
 --filename ../config/openidm-pwsync-plugin-config.ldif
Processing ADD request for cn=OpenIDM Notification Handler,
        cn=Account Status Notification Handlers,cn=config
ADD operation successful for DN cn=OpenIDM Notification Handler,
        cn=Account Status Notification Handlers,cn=config
</screen>
   </step>
   <step>
    <para>
     Restart OpenDJ.
    </para>
    <screen>$ ./stop-ds --restart
...
[20/Nov/2013:08:55:47 +0100] category=EXTENSIONS severity=INFORMATION
 msgID=1049147 msg=Loaded extension from file '/path/to/OpenDJ/lib/extensions
 /opendj-accountchange-handler-<?eval ${opendjPasswordPluginVersion}?>.jar' (build &lt;unknown&gt;,
 revision &lt;unknown&gt;)
...
[20/Nov/2013:08:55:51 +0100] category=CORE severity=NOTICE msgID=458891
 msg=The Directory Server has sent an alert notification generated by class
 org.opends.server.core.DirectoryServer (alert type
 org.opends.server.DirectoryServerStarted, alert ID 458887):
 The Directory Server has started successfully</screen>
   </step>
   <step>
    <para>
     Enable the plugin for the appropriate password policy.
    </para>
    <para>
     The following command enables the plugin for the default password policy.
    </para>
    <screen>$ ./dsconfig
 set-password-policy-prop
 --port 4444
 --hostname `hostname`
 --bindDN "cn=Directory Manager"
 --bindPassword password
 --policy-name "Default Password Policy"
 --set account-status-notification-handler:"OpenIDM Notification Handler"
 --trustStorePath ../config/admin-truststore
 --no-prompt</screen>
   </step>
   <step>
    <para>
     <!--TODO Remove this instruction when OPENIDM-1539 has been resolved -->
     If the <literal>password</literal> attribute does not exist in the
     <literal>managed/user</literal> object on OpenIDM, the password sync
     service will return an error when the password is updated in OpenDJ. To
     prevent this, add the following <literal>onCreate</literal> script to the
     OpenDJ &gt; Managed Users mapping in the <filename>sync.json</filename>
     file:
    </para>
    <programlisting language="javascript">
"mappings" : [
 {
  "name" : "systemLdapAccounts_managedUser",
  "source" : "system/ldap/account",
  "target" : "managed/user",
  "properties" : [
   {
    "source" : "uid",
    "target" : "userName"
   }
  ],
  "onCreate" : {
   "type" : "text/javascript",
   "source" : "target.password=''"
  },
...
    </programlisting>
    <para>
     The onCreate script creates an empty password in the
     <literal>managed/user</literal> object, so that the attribute exists and
     can be patched.
    </para>
   </step>
  </procedure>

  <procedure xml:id="install-ad-password-sync-plugin">
   <title>To Install the Active Directory Password Synchronization Plugin</title>
   <indexterm>
    <primary>Synchronization</primary>
    <secondary>Passwords</secondary>
    <tertiary>With Active Directory</tertiary>
   </indexterm>

   <para>
    Use the Active Directory password synchronization plugin to synchronize
    passwords between OpenIDM and Active Directory (on systems running at least
    Microsoft Windows Server 2008 R2).
   </para>
   <para>
    Install the plugin on Active Directory primary domain controllers (PDCs) to
    intercept password changes, and send the password values to OpenIDM over an
    encrypted channel. You must have Administrator privileges to install the
    plugin. In a clustered Active Directory environment, you must install the
    plugin on all PDCs.
   </para>

   <step>
    <para>
     Download the Active Directory password synchronization plugin,
     OpenIDM Agents-AD, from the OpenIDM download page under the ForgeRock
     <link xlink:href="http://forgerock.com/download-stack/"
     xlink:show="new">Open Stack download page</link>.
    </para>
   </step>
   <step>
    <para>
     Double-click the setup file (<filename>idm-setup-1.0.0.exe</filename>) to
     launch the installation wizard.
    </para>
   </step>
   <step>
    <para>
     Provide the following information during the installation. You must accept
     the Common Development and Distribution License (CDDL) license agreement to
     proceed with the installation.
    </para>
    <variablelist>
     <varlistentry>
      <term>OpenIDM Connection information</term>
      <listitem>
       <itemizedlist>
        <listitem>
         <para>
          <emphasis>OpenIDM URL.</emphasis> Enter the URL where OpenIDM is
          deployed, including the query that targets each user account. For
          example:
         </para>
         <screen width="102">
http://localhost:8080/openidm/managed/user?_action=patch&amp;_queryId=for-userName&amp;uid=${samaccountname}
         </screen>
         <para>
          For mutual authentication, the default URL is
         <screen width="103">
https://localhost:8444/openidm/managed/user?_action=patch&amp;_queryId=for-userName&amp;uid=${samaccountname}
         </screen>
         </para>
         <para>
          For this query to work, you must set a mapping from
          <literal>samaccountname</literal> to <literal>username</literal> in
          the <filename>/path/to/openidm/conf/sync.json</filename> file, for
          example:
         </para>
         <programlisting language="javascript">
{
    "mappings" : [
        {
            "name" : "systemADAccounts_managedUser",
            "source" : "system/ad/account",
            "target" : "managed/user",
            "properties" : [
                ...
                {
                    "source" : "samaccountname",
                    "target" : "userName"
                },
                ...
          }
    ]
}
         </programlisting>
        </listitem>
        <listitem>
         <para>
          <emphasis>OpenIDM User Password attribute.</emphasis> The password
          attribute for the <literal>managed/user</literal> object, for example
          <literal>password</literal>.
         </para>
         <!--TODO Remove this instruction when OPENIDM-1539 has been resolved -->
         <para>
          If the <literal>password</literal> attribute does not exist in the
          <literal>managed/user</literal> object, the password sync service will
          return an error when the password is updated in Active Directory. To
          prevent this, add the following script to the Active Directory &gt;
          Managed Users mapping in the <filename>sync.json</filename> file:
         </para>
         <programlisting language="javascript">
"onCreate" : {
                "type" : "text/javascript",
                 "source":"target.password=''; target.adPassword='';"
            },
         </programlisting>
         <para>
          The onCreate script creates an empty password in the
          <literal>managed/user</literal> object, so that the attribute exists
          and can be patched.
         </para>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>OpenIDM Authentication Parameters</term>
      <listitem>
       <para>
        Provide the following information:
       </para>
       <itemizedlist>
        <listitem>
         <para>
          <emphasis>User name.</emphasis> Enter the user name that is used to
          authenticate to OpenIDM, for example, <literal>openidm-admin</literal>.
         </para>
        </listitem>
        <listitem>
         <para>
          <emphasis>Password.</emphasis> Enter the password of the user that
          authenticates to OpenIDM, for example, <literal>openidm-admin</literal>.
         </para>
        </listitem>
       <listitem>
        <para>
         <emphasis>Select authentication type.</emphasis> Select the type of
         authentication that Active Directory will use to authenticate to
         OpenIDM.
        </para>
        <para>
         For plain HTTP authentication, select <literal>OpenIDM Header</literal>.
         For mutual authentication, select <literal>Certificate</literal>.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Certificate authentication settings</term>
     <listitem>
      <para>If you selected <literal>Certificate</literal> as the authentication
       type on the previous screen, specify the details of the certificate that
       will be used for authentication.
      </para>
      <itemizedlist>
       <listitem>
        <para>
         <emphasis>Select Certificate file.</emphasis> Browse to select the
         certificate file that Active Directory will use to authenticate to
         OpenIDM. The certificate file must be in PKCS12 format.
        </para>
        <para>
         For production purposes, you should use a certificate that has been
         issued by a Certificate Authority. For testing purposes, you can
         generate a self-signed certificate. Whichever certificate you use, the
         certificate must be imported into OpenIDM's trust store.
        </para>
        <para>
         To generate a self-signed certificate for Active Directory, follow
         these steps:
        </para>
        <procedure>
         <step>
          <para>
           On the Active Directory host, generate a self-signed certificate with
           the alias <literal>ad-pwd-plugin-localhost</literal>.
          </para>
          <screen>&gt; keytool
 -genkey
 -alias ad-pwd-plugin-localhost
 -keyalg rsa
 -dname "CN=localhost, O=AD-pwd-plugin Self-Signed Certificate"
 -keystore keystore.jceks
 -storetype JCEKS
Enter keystore password: <replaceable>changeit</replaceable>
Re-enter new password: changeit
Enter key password for &lt;ad-pwd-plugin-localhost&gt;
      &lt;RETURN if same as keystore password&gt;
          </screen>
         </step>
         <step>
          <para>
           Self-sign the certificate.
          </para>
          <screen>&gt; keytool
 -selfcert
 -alias ad-pwd-plugin-localhost
 -validity 365
 -keystore keystore.jceks
 -storetype JCEKS
 -storepass changeit
          </screen>
         </step>
         <step>
          <para>
           Export the certificate as a PKCS12 certificate.
          </para>
          <screen>&gt; keytool
 -importkeystore
 -srckeystore keystore.jceks
 -srcstoretype jceks
 -srcstorepass changeit
 -srckeypass changeit
 -srcalias ad-pwd-plugin-localhost
 -destkeystore ad-pwd-plugin-localhost.p12
 -deststoretype PKCS12
 -deststorepass changeit
 -destkeypass changeit
 -destalias ad-pwd-plugin-localhost
 -noprompt
          </screen>
          <para>
           This command generates a PKCS12 certificate file, named
           <filename>ad-pwd-plugin-localhost.p12</filename>. Copy this
           certificate file to the machine that hosts OpenIDM, and import the
           certificate into the OpenIDM truststore.
          </para>
          <screen>$ keytool
 -importkeystore
 -srckeystore /path/to/ad-pwd-plugin-localhost.p12
 -srcstoretype PKCS12
 -destkeystore truststore
 -deststoretype JKS
          </screen>
         </step>
        </procedure>
       </listitem>
       <listitem>
        <para>
         <emphasis>Password to open certificate file.</emphasis> Specify the
         keystore password (<literal>changeit</literal>, in the previous
         example).</para>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Password Encryption settings</term>
      <listitem>
       <para>
        Provide the details of the certificate that will be used to encrypt
        password values.
       </para>
       <itemizedlist>
        <listitem>
         <para>
          <emphasis>Certificate file.</emphasis> Browse to select the
          certificate file that will be used for password encryption. The
          certificate file must be in PKCS12 format.
         </para>
         <para>For evaluation purposes, you can use a self-signed certificate,
          as described in the previous step. For production purposes, you should
          use a certificate that has been issued by a Certificate Authority.
         </para>
         <para>
          Whichever certificate you use, the certificate must be imported into
          OpenIDM's keystore, so that OpenIDM can locate the key with which to
          decrypt the data. To import the certificate into OpenIDM's keystore,
          run the following command on the OpenIDM host:
         </para>
         <screen>
$ keytool
 -importkeystore
 -srckeystore /path/to/ad-pwd-plugin-localhost.p12
 -srcstoretype PKCS12
 -destkeystore /path/to/openidm/security/keystore.jceks
 -deststoretype jceks
         </screen>
        </listitem>
        <listitem>
         <para>
          <emphasis>Private key alias.</emphasis> Specify the certificate alias
          for the certificate, such as <literal>ad-pwd-plugin-localhost</literal>,
          from the previous self-signed certificate example.
         </para>
        </listitem>
        <listitem>
         <para>
          <emphasis>Password to open certificate file.</emphasis> Specify the
          password to access the PFX keystore file, such as
          <literal>changeit</literal>, from the previous example.
         </para>
        </listitem>
        <listitem>
         <para>
          <emphasis>Select encryption key type.</emphasis> Specify the
          encryption key type that will be used when encrypting the password
          value (AES-128, AES-192, or AES-256).
         </para>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Data storage</term>
      <listitem>
       <para>
        Provide the details for the storage of encrypted passwords in the event
        that OpenIDM is not available when a password modification is made.
       </para>
       <itemizedlist>
        <listitem>
         <para>
          Select a secure directory in which the JSON files that contain
          encrypted passwords are queued. The server should prevent access to
          this folder, except access by the <literal>Password Sync
          service</literal>. The path name cannot include spaces.
         </para>
        </listitem>
        <listitem>
         <para>
          <emphasis>Directory poll interval (seconds).</emphasis> Enter the
          number of seconds between calls to check whether OpenIDM is available,
          for example, <literal>60</literal>, to poll OpenIDM every minute.
         </para>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Log storage</term>
      <listitem>
       <para>
        Provide the details of the messages that should be logged by the plugin.
       </para>
       <itemizedlist>
        <listitem>
         <para>
          Select the location to which messages should be logged. The path name
          cannot include spaces.
         </para>
        </listitem>
        <listitem>
         <para><emphasis>Select logging level.</emphasis> Select the severity of
          messages that should be logged, either <literal>error</literal>,
          <literal>info</literal>, <literal>warning</literal>,
          <literal>fatal</literal>, or <literal>debug</literal>.
         </para>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Select Destination Location</term>
      <listitem>
       <para>
        Setup installs the plugin in the location you select, by default
        <filename>C:\Program Files\OpenIDM Password Sync</filename>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </step>
   <step>
    <para>
     After running the installation wizard, restart the computer.
    </para>
   </step>
   <step>
    <para>
     If you need to change any settings after installation, access the
     settings using the Registry Editor under HKEY_LOCAL_MACHINE &gt; SOFTWARE
     &gt; ForgeRock &gt; OpenIDM &gt; PasswordSync.</para>
   </step>
   <step>
    <para>
     If you selected to authenticate over plain HTTP in the previous step, your
     setup is now complete.
    </para>
    <para>
     If you selected to authenticate with mutual authentication, complete this
     step.
    </para>
    <substeps>
     <step>
      <para>
       The Password Sync Service uses Windows certificate stores to verify
       OpenIDM's identity. The certificate that OpenIDM uses must therefore
       be added to the list of trusted certificates on the Windows machine.
      </para>
      <para>
       For production purposes, you should use a certificate that has been
       issued by a certificate authority. For test purposes, you can use the
       self-signed certificate that is generated by OpenIDM on first startup.
      </para>
      <para>
       To add the OpenIDM certificate to the list of trusted certificates, use
       the Microsoft Management Console.
      </para>
      <orderedlist>
       <listitem>
        <para>
         Select Start and type <literal>mmc</literal> in the Search field.
        </para>
       </listitem>
       <listitem>
        <para>
         In the Console window, select File &gt; Add/Remove Snap-in.
        </para>
       </listitem>
       <listitem>
        <para>
         From the left hand column, select Certificates and click Add.
        </para>
       </listitem>
       <listitem>
        <para>
         Select My user account, and click Finish.
        </para>
       </listitem>
       <listitem>
        <para>
         Repeat the previous two steps for Service account and Computer account.
        </para>
        <para>
         For Service account, select Local computer, then select OpenIDM
         Password Sync Service.
        </para>
        <mediaobject xml:id="password-sync-service">
         <alt>OpenIDM architecture</alt>
         <imageobject>
          <imagedata fileref="images/service-acct.png" format="PNG" />
         </imageobject>
        </mediaobject>
        <para>
         For Computer account, select Local computer.
        </para>
       </listitem>
       <listitem>
        <para>
         Click Finish when you have added the three certificate snap-ins.
        </para>
       </listitem>
       <listitem>
        <para>
         Still in the mmc Console, expand Certificates - Current User &gt;
         Personal and select Certificates.
        </para>
       </listitem>
       <listitem>
        <para>
         Select Action &gt; All Tasks &gt; Import to open the Certificate Import
         Wizard.
        </para>
       </listitem>
       <listitem>
        <para>
         Browse for the OpenIDM certificate (<literal>openidm-localhost</literal>
         by default, if you use OpenIDM's self-signed certificate).
        </para>
       </listitem>
       <listitem>
        <para>
         Enter the Password for the certificate (<literal>changeit</literal> by
         default, if you use OpenIDM's self-signed certificate).
        </para>
       </listitem>
       <listitem>
        <para>
         Accept the default for the Certificate Store.
        </para>
       </listitem>
       <listitem>
        <para>
         Click Finish to complete the import.
        </para>
       </listitem>
       <listitem>
        <para>
         Repeat the previous five steps to import the certificate for:
        </para>
        <simplelist>
         <member>
          <literal>Current User &gt; Trusted Root Certification
           Authorities</literal>
         </member>
         <member>
          <literal>Service &gt; OpenIDM Password Sync\Personal</literal>
         </member>
         <member>
          <literal>Service &gt; OpenIDM Password Sync\Trusted Root Certification
           Authorities</literal>
         </member>
         <member>
          <literal>Local Computer &gt; Personal</literal>
         </member>
         <member>
          <literal>Local Computer &gt; Trusted Root Certification
           Authorities</literal>
         </member>
        </simplelist>
       </listitem>
      </orderedlist>
     </step>
    </substeps>
   </step>
  </procedure>

  <procedure xml:id="setup-openidm-for-password-sync">
   <title>To Set Up OpenIDM to Handle Password Changes</title>

   <para>
    Follow these steps to configure OpenIDM to access password changes from
    OpenDJ and Active Directory.</para>
   <step>
    <para>
     You must add the OpenDJ/Active Directory server certificates that you have
     used to OpenIDM's trust store so that OpenIDM knows to trust OpenDJ/Active
     Directory during mutual authentication.
    </para>
    <para>
     Use the Java <command>keytool</command> command to import the certificate
     into the OpenIDM trust store.
    </para>
   </step>
   <step>
    <para>
     Add the configuration to managed objects to handle password
     synchronization.
    </para>
    <para>
     An example for synchronization with both OpenDJ and Active Directory is
     provided in the <filename>samples/misc/managed.json</filename> file,
     JavaScript lines folded for readability:</para>
    <programlisting language="javascript">
{
    "objects": [
        {
            "name": "user",
            "properties": [
                {
                    "name": "ldapPassword",
                    "encryption": {
                        "key": "openidm-sym-default"
                    }
                },
                {
                    "name": "adPassword",
                    "encryption": {
                        "key": "openidm-sym-default"
                    }
                },
                {
                    "name": "password",
                    "encryption": {
                        "key": "openidm-sym-default"
                    }
                }
            ],
            "onUpdate": {
                "type": "text/javascript",
                "source":
                 "if (newObject.ldapPassword != oldObject.ldapPassword) {
                     newObject.password = newObject.ldapPassword
                  } else if (newObject.adPassword != oldObject.adPassword) {
                      newObject.password = newObject.adPassword
                  }"
            }
        }
    ]
}</programlisting>
    <para>This sample assumes you define the password as
    <literal>ldapPassword</literal> for OpenDJ, and
    <literal>adPassword</literal> for Active Directory.</para>
   </step>
   <step>
    <para>
     Update the connector configuration files to add the password property to
     the <literal>account</literal> object type.
    </para>
    <para>
     For OpenDJ, update <filename>provisioner.openicf-ldap.json</filename>, as
     follows:
    </para>
    <programlisting language="javascript">
   "objectTypes" :
      {
         "account" :
            {
               "$schema" : "http://json-schema.org/draft-03/schema",
               "id" : "__ACCOUNT__",
               "type" : "object",
               "nativeType" : "__ACCOUNT__",
               "properties" :
                  {
                     "cn" :
                        {
                           "type" : "string",
                           "nativeName" : "cn",
                           "nativeType" : "string"
                        },
                      ...
                     "ldapPassword" :
                        {
                           "type" : "string",
                           "nativeName" : "userpassword",
                           "nativeType" : "string"
                        },
     ...
    </programlisting>
    <para>
     For Active Directory, update
     <filename>provisioner.openicf-ad.json</filename>, as follows:
    </para>
    <programlisting language="javascript">
   "objectTypes" :
      {
         "account" :
            {
               "$schema" : "http://json-schema.org/draft-03/schema",
               "id" : "__ACCOUNT__",
               "type" : "object",
               "nativeType" : "__ACCOUNT__",
               "properties" :
                  {
                     "cn" :
                        {
                           "type" : "string",
                           "nativeName" : "cn",
                           "nativeType" : "string"
                        },
                      ...
                     "adPassword" :
                        {
                           "type" : "string",
                           "nativeName" : "_PASSWORD_",
                           "nativeType" : "JAVA_TYPE_GUARDEDSTRING"
                        },
     ...
    </programlisting>
   </step>
   <step>
   
    <para>When you change a password in OpenDJ, you will notice that the value 
    changes in OpenIDM.</para>
    
    <screen>$ tail -f openidm/audit/activity.csv | grep bjensen
...userName=bjensen, ... password={$crypto={...data=tEsy7ZXo6nZtEqzW/uVE/A==...
...userName=bjensen, ... password={$crypto={...data=BReT79lnQEPcvfQG3ibLpg==...</screen>

    <para>
     Be aware that the plugin is patching the password value of the
    managed user in OpenIDM. The target <literal>password</literal> property 
    must exist for the patch to work.
    </para>
    <para>
     To configure automatic synchronization, that is the password is updated in
     Active Directory automatically when it is changed in OpenIDM, you must
     complete the following three steps:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Define a mapping from <literal>managed/user</literal> to
       <literal>system/ad/account</literal> in your
       <filename>/path/to/openidm/conf/sync.json</filename> file.
      </para>
     </listitem>
     <listitem>
      <para>
       Specify the <literal>{"source" : "password", "target" : "adPassword"}</literal>
       property as part of this mapping.
      </para>
     </listitem>
     <listitem>
      <para>
       Make sure that automatic synchronization is enabled for that mapping. By
       default, all mappings participate in automatic synchronization operations
       so you should not have to enable this operation manually unless you have
       specifically set the <literal>"enableSync"</literal> property of the
       mapping to <literal>false</literal>.
      </para>
     </listitem>
    </itemizedlist>
   </step>
  </procedure>
 </section>
</chapter>
