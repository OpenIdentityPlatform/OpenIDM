<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !
-->
<chapter xml:id='chap-data'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Accessing Data Objects</title>
 <indexterm>
  <primary>Data</primary>
  <secondary>accessing</secondary>
 </indexterm>

 <para>
  OpenIDM supports a variety of objects that can be addressed via a URL or URI.
  You can access data objects by using scripts (through the Resource API) or by
  using direct HTTP calls (through the REST API).
 </para>
 <para>
  The following sections describe these two methods of accessing data objects,
  and provide information on constructing and calling data queries.
 </para>

 <section xml:id="data-scripts">
  <title>Accessing Data Objects by Using Scripts</title>
  <indexterm>
   <primary>Objects</primary>
   <secondary>Script access</secondary>
  </indexterm>

  <para>
   OpenIDM's uniform programming model means that all objects are queried and
   manipulated in the same way, using the Resource API. The URL or URI that is
   used to identify the target object for an operation depends on the object
   type. For an explanation of object types, see the
   <link xlink:href="integrators-guide#appendix-obects"
         xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Data Models and
   Objects Reference</citetitle></link>. For more information about scripts and
   the objects available to scripts, see the
   <link xlink:href="integrators-guide#appendix-scripting"
         xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Scripting
   Reference</citetitle></link>.
  </para>

  <para>
   You can use the Resource API to obtain managed objects, configuration
   objects, and repository objects, as follows:
  </para>
  <programlisting language="javascript">
val = openidm.read("managed/organization/mysampleorg")
val = openidm.read("config/custom/mylookuptable")
val = openidm.read("repo/custom/mylookuptable")
  </programlisting>

  <para>For information about constructing an object ID, see <link
  xlink:href="integrators-guide#rest-uri-scheme"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>URI
   Scheme</citetitle></link> in the <citetitle>REST API Reference</citetitle>.
  </para>

  <para>
   You can update entire objects with the <literal>update()</literal> function,
   as follows.
  </para>

  <programlisting language="javascript">
openidm.update("managed/organization/mysampleorg", mymap)
openidm.update("config/custom/mylookuptable", mymap)
openidm.update("repo/custom/mylookuptable", mymap)
  </programlisting>

  <para>
   For managed objects, you can partially update an object with the
   <literal>patch()</literal> function.
  </para>

  <programlisting language="javascript">
openidm.patch("managed/organization/mysampleorg", rev, value)
  </programlisting>

  <para>
   The <literal>create()</literal>, <literal>delete()</literal>, and
   <literal>query()</literal> functions work the same way.
  </para>
 </section>

 <section xml:id="data-rest">
  <title>Accessing Data Objects by Using the REST API</title>

  <para>
   OpenIDM provides RESTful access to data objects via a REST API. To access
   objects over REST, you can use a browser-based REST client, such as the
   <link xlink:href="https://chrome.google.com/webstore/detail/simple-rest-client/fhjcajmcbmldlhcimfajhfbgofnpcjmb">
   Simple REST Client</link> for Chrome, or <link
  xlink:href="https://addons.mozilla.org/en-US/firefox/addon/restclient/">
   RESTClient</link> for Firefox. Alternatively you can use the <link
  xlink:show="new" xlink:href="http://curl.haxx.se/"><command>curl</command>
   </link> command-line utility.
  </para>

  <para>
   For a comprehensive overview of the REST API, see the <link
  xlink:href="integrators-guide#appendix-rest"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>REST API
   Reference</citetitle></link> appendix.
  </para>

  <para>
   To obtain a managed object through the REST API, depending on your security
   settings and authentication configuration, perform an HTTP GET on the
   corresponding URL, for example
   <literal>https://localhost:8443/openidm/managed/organization/mysampleorg</literal>.
  </para>

  <para>
   By default, the HTTP GET returns a JSON representation of the object.
  </para>
 </section>

 <section xml:id="queries">
  <title>Defining and Calling Queries</title>
  <para>
   OpenIDM supports an advanced query model that enables you to define queries,
   and to call them over the REST or Resource API.
  </para>

  <section xml:id="parameterized-queries">
   <title>Parameterized Queries</title>

   <para>
    Managed objects in the supported OpenIDM repositories can be accessed using
    a parameterized query mechanism. Parameterized queries on repositories are
    defined in the repository configuration (<filename>repo.*.json</filename>)
    and are called by their <literal>_queryId</literal>.
   </para>

   <para>
    Parameterized queries provide security and portability for the query call
    signature, regardless of the back-end implementation. Queries that are
    exposed over the REST interface <emphasis>must</emphasis> be parameterized
    queries to guard against injection attacks and other misuse. Queries on the
    officially supported repositories have been reviewed and hardened against
    injection attacks.
   </para>

   <para>
    For system objects, support for parameterized queries is restricted to
    <literal>_queryId=query-all-ids</literal>. There is currently no support for
    user-defined parameterized queries on system objects. Typically,
    parameterized queries on system objects are not called directly over the
    REST interface, but are issued from internal calls, such as correlation
    queries.
   </para>

   <para>
    A typical query definition is as follows:
   </para>

   <screen>
"query-all-ids" : "select _openidm_id from ${unquoted:_resource}"
   </screen>

   <para>
    To call this query, you would reference its ID, as follows:
   </para>

   <screen>
?_queryId=query-all-ids
   </screen>

   <para>
    The following example calls <literal>query-all-ids</literal> over the REST
    interface:
   </para>

   <screen>$ curl
 --cacert self-signed.crt
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 --header "Conent-Type: application/json"
 "https://localhost:8443/openidm/managed/user?_queryId=query-all-ids"
   </screen>
  </section>

  <section xml:id="native-queries">
   <title>Native Query Expressions</title>

   <para>
    Native query expressions are supported for all managed objects and system
    objects, and can be called directly over the REST interface, rather than
    being defined in the repository configuration.
   </para>

   <para>
    Native queries are intended specifically for internal callers, such as
    custom scripts, in situations where the parameterized query facility is
    insufficient. For example, native queries are useful if the query needs to
    be generated dynamically.
   </para>

   <para>
    The query expression is specific to the target resource. For repositories,
    queries use the native language of the underlying data store. For system
    objects that are backed by OpenICF connectors, queries use the applicable
    query language of the system resource.
   </para>

   <para>
    Native queries on the repository are made using the
    <literal>_queryExpression</literal> keyword. For example:
   </para>

   <para>
    The native query shown here does not work in the default configuration of
    OpenIDM. Unless such queries are enabled, a command like that shown here
    should lead to a 403 access denied error message. Do not enable them
    in production configurations, as native queries are not portable and do not
    guard against injection attacks.
   </para>

   <screen width="92">$ curl
 --cacert self-signed.crt
 --header "Content-Type: application/json"
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 "https://localhost:8443/openidm/managed/user?_queryExpression=select+from+managed_user"
   </screen>

   <para>
    Such query expressions should therefore not be used or made accessible over
    the REST interface or over HTTP, other than for development, and should be
    used only via the internal Resource API. If you want to enable such
    native queries for development, see the section on
    <link xlink:href="integrators-guide#security-urls"
          xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Protecting
    Sensitive REST Interface URLs</citetitle></link>.
   </para>

   <para>
    Alternatively, if you really need to expose native queries over HTTP, in a
    selective manner, you can design a custom endpoint to wrap such access.
   </para>
  </section>

  <section xml:id="constructing-queries">
   <title>Constructing Queries</title>

   <para>
    The <literal>openidm.query</literal> function enables you to query OpenIDM
    resource objects for reconciliation processes and workflows. The query
    syntax is <literal>openidm.query(id, params)</literal>, where
    <literal>id</literal> specifies the object on which the query should be
    performed and <literal>params</literal> provides the parameters that are
    passed to the query. For example:
   </para>

   <programlisting language="javascript">
var params = {
    'query' : {
        'Equals': {
            'field' : 'uid',
            'values' : [
                id
            ]
        }
    }
};
var results = openidm.query("system/ScriptedSQL/account", params)
   </programlisting>

   <para>
    OpenIDM supports nine query filters and a range of keywords that can be
    applied to these filters. Each filter takes a field and a list as a value.
    The following filters are supported:
   </para>

   <bridgehead>Attribute Operations</bridgehead>
    <variablelist>
     <varlistentry>
      <term><literal>Equals</literal> Filter</term>
      <listitem>
       <para>
        Determines whether the resource contains an attribute that matches a
        specific attribute value.
       </para>
       <para>
        Returns <literal>true</literal> if the object satisfies all selection
        criteria of the filter, otherwise returns <literal>false</literal>.
       </para>
       <para>
        For example:
       </para>
       <programlisting language="javascript">
{
    "Equals":{
        "field":"<replaceable>lastname</replaceable>",
            "values":[
                "<replaceable>Doe</replaceable>"
            ]
    }
}
       </programlisting>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ContainsAllValues</literal> Filter</term>
      <listitem>
       <para>
        Determines whether the external resource contains an attribute that has
        the same name as, and contains all of the values of, the attribute
        placed into the filter.
       </para>
       <para>
        Returns <literal>true</literal> if the object satisfies all the
        selection criteria of the filter, otherwise returns
        <literal>false</literal>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

   <bridgehead>Comparable Attribute Operations</bridgehead>
    <para>
     Compares single-value attributes to a given filter.
    </para>
    <variablelist>
     <varlistentry>
      <term><literal>GreaterThan</literal> Filter</term>
      <listitem>
       <para>
        Determines whether the attribute value of the resource object is greater
        than the one provided in the filter.
       </para>
       <para>
        Returns <literal>true</literal> if the attribute value is greater,
        otherwise returns <literal>false</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GreaterThanOrEqual</literal> Filter</term>
      <listitem>
       <para>
        Determines whether the attribute value of the resource object is greater
        than or equal to the one provided in the filter.
       </para>
       <para>
        Returns <literal>true</literal> if the attribute value is greater than
        or equal, otherwise returns <literal>false</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>LessThan</literal> Filter</term>
      <listitem>
       <para>
        Determines whether the attribute value of the resource object is less
        than the one provided in the filter.
       </para>
       <para>
        Returns <literal>true</literal> if the attribute value is less,
        otherwise returns <literal>false</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>LessThanOrEqual</literal> Filter</term>
      <listitem>
       <para>
        Determines whether the attribute value of the resource object is less
        than or equal to the one provided in the filter.
       </para>
       <para>
        Returns <literal>true</literal> if the attribute value is less than or
        equal, otherwise returns <literal>false</literal>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

   <bridgehead>String Attribute Operations</bridgehead>
    <para>
     Compares string values to a given filter.
    </para>
    <variablelist>
     <varlistentry>
      <term><literal>StartsWith</literal> Filter</term>
      <listitem>
       <para>Returns attributes whose value starts with the string specified in
        the filter.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>Contains</literal> Filter</term>
      <listitem>
       <para>
        Returns attributes whose value contains the string specified in the
        filter.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>EndsWith</literal> Filter</term>
      <listitem>
       <para>
        Returns attributes whose value ends with the string specified in the
        filter.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

   <bridgehead>Filter Operations</bridgehead>
    <para>
     Filter operations are used to construct more complex filters by comparing
     two filters from the preceding section or negating filters defined in the
     previous section.
    </para>
    <variablelist>
     <varlistentry>
      <term><literal>AND Filter</literal></term>
      <listitem>
       <para>
        A filter that matches entries using the AND boolean operator on two
        filters.
       </para>
       <para>
        Example:
       </para>
       <programlisting language="javascript">{
 "query":{
   "AND":[
     {
        "Equals":{
            "field":"lastname",
            "values":[
               "Doe"
            ]
        }
     },
     {
         "Equals":{
             "field":"firstname",
             "values":[
                "John"
             ]
         }
     }
   ]
 }
}
       </programlisting>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>NAND Filter</literal></term>
      <listitem>
       <para>
        A filter that filters out matched entries by negating the AND boolean
        operator on two filters.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>OR Filter</literal></term>
      <listitem>
       <para>
        A filter that matches entries using the OR boolean operator on two
        filters.
       </para>
       <para>
        Example:
       </para>
       <programlisting language="javascript">{
  "query":{
    "OR":[
      {
        "StartsWith":{
            "field":"lastname",
            "values":[
              "A"
            ]
        }
      },
      {
        "StartsWith":{
            "field":"lastname",
            "values":[
              "B"
            ]
        }
      }
    ]
  }
}
       </programlisting>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>NOR Filter</literal></term>
      <listitem>
       <para>
        A filter that filters out matched entries by negating the OR boolean
        operator on two filters.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </section>
 </section>

 <section xml:id="managing-roles">
  <title>Managing Roles</title>
  <para>
   The default managed object model includes a managed <literal>role</literal>
   object that can be manipulated in the same way as any other managed object.
   The primary use for roles is the management of user access to system
   resources. User access is controlled by the <emphasis>assignments</emphasis>
   or entitlements provided by the role.
  </para>
  <orderedlist>
   <para>
    Configuring a custom role involves the following steps:
   </para>
   <listitem>
    <para>
     Create the managed role definition.
    </para>
   </listitem>
   <listitem>
    <para>
     Check that the effective roles and effective assignments have been
     generated as you expect.
    </para>
   </listitem>
   <listitem>
    <para>
     Add a default mapping to your synchronization configuration to apply the
     effective assignments to the target resource.
    </para>
   </listitem>
  </orderedlist>
  <para>
   Each of these steps is discussed in the following sections.
  </para>

  <section xml:id="role-definitions">
   <title>Creating Role Definitions</title>
   <para>
    Role definitions are stored in the repository and are accessible at the
    <literal>/openidm/managed/role</literal> context path. Role definitions
    have a structure similar to the following:
   </para>
   <programlisting language="java">
 "_id": "sample-role",
     "assignments": {
         "ad": {
             "attributes": [
                 {
                     "name": "cns",
                     "value": [
                         "CN=fileshare,O=corp",
                         "CN=desktop,O=corp",
                         "CN=terminal,O=corp",
                         "CN=intranet,O=corp"
                     ],
                     "operation": "insert"
                 }
             ]
         },
         "ldap": {
             "attributes": [
                 {
                     "name": "cns",
                     "value": [
                         "CN=employees,O=corp"
                     ],
                     "operation": "insert"
                 },
                 {
                     "name": "employeeType",
                     "value": "employee"
                 }
             ]
         }
     }
   </programlisting>
   <itemizedlist>
    <listitem>
     <para>
      <literal>"_id"</literal> is the name of the role. The role name can be any
      string, as long as it is unique.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>"assignments"</literal> provides the list of assignments (or
      entitlements) that this role will create on the specified system.
     </para>
     <para>
      Each assignment includes the name of the external system
      (<literal>ad</literal> and <literal>ldap</literal> in the previous
      example), the attribute or attributes whose values will be generated, on
      the external system, and the value or values that will be applied to each
      attribute.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>"operation"</literal> specifies the way in which the value will
      be applied, and can be either <literal>"insert"</literal> or
      <literal>"replace"</literal>.
     </para>
     <para>
      The <literal>"insert"</literal> operation takes the source attribute value
      and inserts it as the target (system) attribute. Note that the insert
      operation does not obtain the target value before inserting the new value,
      but regards the source as the authoritative source for the assignment and
      inserts the entire source value.
     </para>
     <para>
      The <literal>"replace"</literal> operation replaces the target attribute
      value with whatever is specified in the role definition. If no operation
      type is specified, the assignment has a <literal>"replace"</literal>
      operation by default.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Any changes to a managed role definition are logged in the audit log.
   </para>
  <para>
   The managed role object has the following structure:
  </para>
  <programlisting language="javascript">
        {
            "name" : "role",
            "postCreate" : {
                "type" : "text/javascript",
                "file" : "roles/update-users-of-role.js"
            },
            "postUpdate" : {
                "type" : "text/javascript",
                "file" : "roles/update-users-of-role.js"
            },
            "postDelete" : {
                "type" : "text/javascript",
                "file" : "roles/update-users-of-role.js"
            }
        }
  </programlisting>
  <para>
   The <literal>"postCreate"</literal>, <literal>"postUpdate"</literal>, and
   <literal>"postDelete"</literal> properties enable you to specify what should
   happen when a role definition is created, updated, or deleted. By default,
   the <filename>update-users-of-role.js</filename> script runs in each of these
   cases.
  </para>
  <para>
   This script iterates over all managed users, locates the users who have been
   assigned this role, and regenerates their effective assignments on the target
   resource. So, for example, if the role <literal>"ldap"</literal> gives a user
   an assignment on the resource "Active Directory", when, that role definition
   is deleted, a reconciliation operation runs to remove the assignment for that
   user on the "Active Directory" resource.
  </para>
  </section>

  <section xml:id="effective-roles-and-assignments">
   <title>Understanding Effective Roles and Effective Assignments</title>
   <para>
    This section refers to two distinct types of roles - direct (static) and
    indirect (dynamic) roles. Direct roles refer to roles that are specifically
    added to the user's <literal>"roles"</literal> attribute by an administrator
    operation. Indirect roles might be added to the user entry as a result of a
    script or rule that assigns the role. For example, a user might acquire a
    <literal>"sales-role"</literal> as a result of being in the
    <literal>"sales"</literal> organization.
   </para>
   <para>
    A managed user's <literal>"roles"</literal> attribute takes an array as a
    value. Currently, only flat strings are supported in this array. A role
    value that includes a <literal>/</literal> character is considered to be a
    URL that points to the role details on the router, for example,
    <literal>managed/role/sample-role</literal>.
   </para>
   <para>
    The <literal>"roles"</literal> attribute of a managed user includes any
    specifically assigned roles, and any roles assigned internally by OpenIDM.
    So, <literal>"roles"</literal> attribute of a particular user entry might
    appear as follows:
   </para>
   <programlisting language="java">
"roles" : [
    "name" : "managed/role/sample-role",
    "name" : "openidm-authorized"
]
   </programlisting>
   <para>
    Based on the set of role definitions that are assigned to a specific user,
    the roles mechanism generates two virtual attributes on the user entry -
    <literal>effectiveRoles</literal> and <literal>effectiveAssignments</literal>.
   </para>
   <para>
    The logic that calculates the <literal>effectiveRoles</literal> and
    <literal>effectiveAssignments</literal> attribute values is located in two
    scripts:
    <filename>/path/to/openidm/bin/defaults/script/roles/effectiveRoles.js</filename>
    and
    <filename>/path/to/openidm/bin/defaults/script/roles/effectiveAssignments.js</filename>.
    You should not alter these scripts. If you need to modify how roles and
    assignments are handled, create your own custom script and reference it in
    the <filename>conf/managed.json</filename> file.
   </para>
   <para>
    The <literal>effectiveRoles</literal> attribute lists the specific role
    definitions that are applied to a user entry. By default, the effective
    roles script supports direct role assignments only. Dynamic role assignment
    is not provided out of the box, but can be added with a custom script that
    overrides the default <filename>effectiveRoles.js</filename> script. For
    more information, see <xref linkend="dynamic-role-assignments" />.
   </para>
   <para>
    Based on the effective roles, the <literal>effectiveAssignments</literal>
    attribute provides the calculated resource assignments, that is the
    amalgamated set of entitlements for a specific user.
   </para>
   <para>The value of the <literal>effectiveAssignments</literal> attribute
    provides the information required for the provisioner to apply the effective
    assignments, and provides a reference to the source of the assignment. In
    reading this attribute, it is therefore possible to find and change the root
    source of an assignment.
   </para>
   <para>
    Effective assignments can merge attribute operations on the same system from
    multiple roles. For example, role A might add group A to a user's group
    membership list, and role B might add group B to the same group membership
    property on the same assigned system.
   </para>
   <para>
    The effective roles and effective assignments attributes are configured in
   <filename>conf/managed.json</filename> as follows:
   </para>
   <programlisting language="java">
 {
     "name" : "effectiveRoles",
     "type" : "virtual",
     "onRetrieve" : {
         "type" : "text/javascript",
         "file" : "roles/effectiveRoles.js",
         "rolesPropName" : "roles"
     }
 },
 {
     "name" : "effectiveAssignments",
     "type" : "virtual",
     "onRetrieve" : {
         "type" : "text/javascript",
         "file" : "roles/effectiveAssignments.js",
         "effectiveRolesPropName" : "effectiveRoles"
     }
 }
   </programlisting>

   <para>
    By default, the <filename>effectiveRoles.js</filename> script uses the
    <literal>"roles"</literal> attribute of a user entry to determine the
    direct roles assigned to the user. The
    <filename>effectiveAssignments.js</filename> script uses the virtual
    <literal>"effectiveRoles"</literal> attribute of the user entry to calculate
    the user's effective assignments. If your deployment uses different
    attributes to store this information, change the
    <literal>"rolesPropName"</literal> and the
    <literal>"effectiveRolesPropName"</literal> properties of the virtual
    attribute definitions accordingly.
   </para>

   <para>
    When a user entry is assigned a role, the <literal>effectiveRoles</literal>
    and <literal>effectiveAssignments</literal> of that entry are calculated
    according to the role definition. A managed user entry, whose roles have
    been generated based on the role definition illustrated previously, might
    appear as follows:
   </para>

   <programlisting language="java">
 {{
    "_id":"i",
    "_rev":"1",
    "roles":[
       "openidm-authorized",
       "managed/role/sample-role"
    ],
    "effectiveRoles":[
       "openidm-authorized",
       "managed/role/sample-role"
    ],
    "effectiveAssignments":{
       "ldap":{
          "attributes":[
             {
                "value":[
                   "CN=employees,O=corp"
                ],
                "operation":"insert",
                "name":"cns",
                "assignedThrough":"managed/role/sample-role"
             },
             {
                "value":"employee",
                "name":"employeeType",
                "assignedThrough":"managed/role/sample-role"
             }
          ]
       },
       "ad":{
          "attributes":[
             {
                "value":[
                   "CN=fileshare,O=corp",
                   "CN=desktop,O=corp",
                   "CN=terminal,O=corp",
                   "CN=intranet,O=corp"
                ],
                "operation":"insert",
                "name":"cns",
                "assignedThrough":"managed/role/sample-role"
             }
          ]
       }
    }
 }
   </programlisting>

   <para>
    Note that the value of the virtual <literal>effectiveAssignments</literal>
    attribute indicates how the assignments have been generated.
   </para>

   <procedure xml:id="dynamic-role-assignments">
    <title>To Add Support for Dynamic Assignments</title>
    <para>
     Although support for dynamic role assignments is not provided by default,
     it can easily be added with a custom script, as follows.
    </para>
    <step>
     <para>
      Copy the default effective roles script to your project's
      <literal>script/roles</literal> directory.
     </para>
     <screen width="92">
$ cp /path/to/openidm/bin/defaults/script/roles/effectiveRoles.js <replaceable>project-dir</replaceable>/script/roles/
     </screen>
     <para>
      The new script will override the default effective roles script.
     </para>
    </step>
    <step>
     <para>Modify the effective roles script to include the dynamic role
      assignment logic.
     </para>
     <para>
      For example, to enable dynamic role assignment for the
      <literal>example</literal> organization, you might add the following
      extract after the section:
     </para>
     <programlisting language="java">
 // This is the location to expand to dynamic roles,
 // project role script return values can then be added via
 // effectiveRoles = effectiveRoles.concat(dynamicRolesArray);
     </programlisting>

     <programlisting language="java">
 if (object.org === 'example') {
     effectiveRoles = effectiveRoles.concat(['dynamic-role1', 'dynamic-role2']);
 }
     </programlisting>
    </step>
    <step performance="optional">
     <para>
      To apply changes to the dynamic assignment rules to existing users, run a
      reconciliation operation on those users.
     </para>
    </step>
   </procedure>
  </section>

  <section xml:id="role-mapping">
   <title>Setting up the Role Mapping</title>

   <para>
    After the role has been defined, and the effective assignments checked, you
    must set up mapping for the role and, optionally, restrict provisioning
    based on the effective assignments.
   </para>
   <para>
    This section describes these two steps.
   </para>

  <section xml:id="roles-default-mapping">
   <title>Creating a Mapping For Effective Assignments</title>
   <para>
    After the effective assignments have been calculated, these assignments must
    be applied to the target resources. A mapping script
    (<filename>/path/to/openidm/bin/defaults/script/roles/defaultMapping.js</filename>)
    applies the effective assignments as part of the mapping. To enable this
    default mapping for a specific assignment, add the following extract to
    your synchronization configuration (<filename>sync.json</filename>) file.
   </para>
   <programlisting language="java">
"defaultMapping" : {
    "type" : "text/javascript",
    "file" : "roles/defaultMapping.js"
    },
    "assignments" : [
        <replaceable>assignmentName</replaceable>
    ],
</programlisting>
   <para>
    For example, to apply the <literal>ldap</literal> and <literal>ad</literal>
    assignments illustrated in the previous section, add the following mapping
    to your <filename>sync.json</filename> file.
   </para>
   <programlisting language="java">
"defaultMapping" : {
    "type" : "text/javascript",
    "file" : "roles/defaultMapping.js"
    },
    "assignments" : [
        "ldap", "ad"
    ],
</programlisting>
  </section>

  <section xml:id="conditional-mapping">
   <title>Using Roles For Conditional Mapping</title>
   <para>
    The roles mechanism provides the ability to restrict provisioning based on
    a user's effective assignments. For example, you might want to prevent users
    from being provisioned to an Active Directory system, if they do not have
    specific access to that system.
   </para>
   <para>
    Based on the <literal>"effectiveAssignments"</literal> virtual attribute,
    described in the previous section, you could configure a conditional mapping
    for this example, as follows:
   </para>
   <orderedlist>
    <listitem>
     <para>
      Create a role definition that gives the user the Active Directory
      assignment, for example:
     </para>
     <programlisting language="javascript">
 "_id": "ad-role",
     "assignments": {
         "ad": {
             "attributes": [
                 {
                     "name": "cns",
                     "value": [
                         "CN=fileshare,O=corp",
                         "CN=desktop,O=corp",
                         "CN=terminal,O=corp",
                         "CN=intranet,O=corp"
                     ],
                     "operation": "insert"
                 }
             ]
         }
     </programlisting>
    </listitem>
    <listitem>
     <para>Add the role directly as a value of the user's
      <literal>"roles"</literal> attribute.</para>
     <programlisting>
"roles" : [
    "name" : "managed/role/ad-role",
    "name" : "openidm-authorized"
]
     </programlisting>
    </listitem>
    <listitem>
     <para>
      Add a condition in the mapping that restricts provisioning to user's who
      have the <literal>"ad-role"</literal> as an effective role. The effective
      roles are calculated from the values in the user's
      <literal>"roles"</literal> attribute.
     </para>
     <programlisting language="java">
{
    "mappings": [
        {
            "name": "managedUser_systemLdapAccounts",
            "source": "managed/user",
            "sourceCondition": {
                "effectiveRoles": "ad-role"
            },
            "target": "system/ad/account"
            ...
        }
    ]
}
     </programlisting>
    </listitem>
   </orderedlist>
  </section>

 </section>

  <section xml:id="managing-roles-over-rest">
   <title>Managing Roles Over REST</title>
   <para>
    As with any other managed object, you can manage role objects over the REST
    interface, as described in the following sections.
   </para>

   <section xml:id="create-role-over-rest">
    <title>To Create a Role Definition</title>
    <para>
     Use a PUT request to create the role definition, because you want to be
     able to specify the role ID. The ID will be used to assign the role
     directly to user entries.
    </para>
    <para>
     The following simple example adds a role definition with the ID
     <literal>ldap</literal>. The JSON payload, and the resultant output, have
     been formatted for legibility.
    </para>

    <screen>
    <userinput>$ curl
 --insecure
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 --header "Content-Type: application/json"
 --header "If-None-Match: *"
 --request PUT
 --data '{
  "assignments": {
    "ldap": {
      "attributes": [
        {
          "name": "cns",
          "value": [
            "cn=printers,ou=Groups,dc=example,dc=com",
            "cn=intranet,ou=Groups,dc=example,dc=com"
          ],
          "operation": "insert"
        }
      ]
    }
  }
}'
 "https://localhost:8443/openidm/managed/role/ldap"
    </userinput>
{
  "assignments": {
    "ldap": {
      "attributes": [
        {
          "name": "cns",
          "operation": "insert",
          "value": [
            "cn=printers,ou=Groups,dc=example,dc=com",
            "cn=intranet,ou=Groups,dc=example,dc=com"
          ]
        }
      ]
    }
  },
  "_id": "ldap",
  "_rev": "0"
}
    </screen>
    <para>
     Remember to add the default mapping with the relevant assignment to your
     <filename>sync.json</filename> file. For this example, the following
     addition is made to <literal>sync.json</literal>.
    </para>
    <programlisting language="javascript">
        {
            "defaultMapping": {
                "type": "text/javascript",
                "file": "roles/defaultMapping.js"
            },
            "assignments": [
                "ldap"
            ]
        }
    </programlisting>
   </section>

   <section xml:id="role-assign-to-user">
    <title>To Assign a Role to a User</title>
    <para>
     To assign a direct role to a user, you can update the user's entry over
     REST, adding the
     <literal>managed/role/<replaceable>role ID</replaceable></literal> to the
     user's <literal>roles</literal> attribute. The following example adds the
     <literal>ldap</literal> role to user
     <literal>bjensen</literal>.
    </para>

    <screen>
    <userinput>$ curl
 --insecure
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 --header "Content-Type: application/json"
 --header "If-Match: *"
 --request PATCH
 --data '[
    {
        "operation": "replace",
        "field": "/roles",
        "value": [
            "openidm-authorized",
            "managed/role/ldap"
        ]
    }
]'
 "http://localhost:8080/openidm/managed/user/bjensen"
     </userinput>

{
  "displayName": "Babara Jensen",
  "stateProvince": "",
  "userName": "bjensen",
  "postalAddress": "",
  "telephoneNumber": "",
  "roles": [
    "openidm-authorized",
    "managed/role/ldap"
  ],
  "city": "",
  "givenName": "Barbara",
  "lastPasswordAttempt": "Wed Mar 05 2014 13:50:19 GMT+0200 (SAST)",
  "address2": "",
  "familyName": "Jensen",
  "passwordAttempts": "0",
  "sn": "",
  "mail": "",
  "country": "",
  "_rev": "1",
  "lastPasswordSet": "",
  "postalCode": "",
  "_id": "bjensen",
  "email": "bjensen@example.com",
  "accountStatus": "active",
  "description": "Barbara Jensen"
}
    </screen>
    <para>
     If you query <literal>bjensen's</literal> user entry again, you will note
     that her effective assignments have been updated to include the assignments
     given by the <literal>ldap</literal> role.
    </para>
    <screen>
     <userinput>$ curl
 --insecure
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 --request GET "https://localhost:8443/openidm/managed/user/bjensen"
     </userinput>
{
  "effectiveAssignments": {
    "ldap": {
      "attributes": [
        {
          "assignedThrough": "managed/role/ldap",
          "name": "cns",
          "operation": "insert",
          "value": [
            "cn=printers,ou=Groups,dc=example,dc=com",
            "cn=intranet,ou=Groups,dc=example,dc=com"
          ]
        }
      ]
    }
  },
  ...
    </screen>
   </section>

   <section xml:id="remove-role-assignment">
    <title>To Remove a Role Assignment</title>

    <para>
     To remove a role assignment from a user, simply replace that user's
     <literal>"roles"</literal> attribute with the array of roles that the user
     should have. The following example removes the <literal>ldap</literal> role
     from user <literal>bjensen</literal>.
    </para>

    <screen>
    <userinput>$ curl
 --insecure
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 --header "Content-Type: application/json"
 --header "If-Match: *"
 --request PATCH
 --data '[
    {
        "operation": "replace",
        "field": "/roles",
        "value": [
            "openidm-authorized"
        ]
    }
]'
 "http://localhost:8080/openidm/managed/user/bjensen"
     </userinput>
    </screen>
    <para>
     In the role definition, you can specify what should happen when an
     assignment of that role is removed.
    </para>
   </section>

   <section xml:id="query-role-definitions">
    <title>To Query the Defined Managed Roles</title>
    <para>
     To list the managed roles that have been defined, run the following query:
    </para>
    <screen>
    <userinput>$ curl
 --insecure
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 --request GET
 "https://localhost:8443/openidm/managed/role?_queryId=query-all-ids"
    </userinput>

     {
  "remainingPagedResults": -1,
  "pagedResultsCookie": null,
  "resultCount": 1,
  "result": [
    {
      "_rev": "0",
      "_id": "ldap"
    }
  ]
}    </screen>

   </section>

   <section xml:id="query-role-membership">
    <title>To Query the Members of a Specific Role</title>
    <para>
     To return a list of all users who have a specific directly assigned role,
     specify the role ID in the query. It is not currently possible to query
     role membership for indirect roles.
    </para>
    <para>
     The following query returns all members of the <literal>"ldap"</literal>
     role created previously. Currently that role has only one member,
     <literal>bjensen</literal>.
    </para>

    <screen width="104">
     <userinput>$ curl
 --insecure
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 --request GET
 "https://localhost:8443/openidm/managed/role?_queryId=get-users-of-direct-role&amp;role=managed/role/ldap"
     </userinput>
{
  "remainingPagedResults": -1,
  "pagedResultsCookie": null,
  "resultCount": 0,
  "result": []
}   <!--TODO this isn't currently working for me - I get zero results -->
    </screen>
   </section>

  </section>

 </section>



</chapter>
