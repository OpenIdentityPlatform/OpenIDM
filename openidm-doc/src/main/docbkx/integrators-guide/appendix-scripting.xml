<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2015 ForgeRock AS
  !    
-->
<appendix xml:id="appendix-scripting"
  version="5.0"
  xml:lang="en"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook
  http://docbook.org/xml/5.0/xsd/docbook.xsd"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Scripting Reference</title>
  <indexterm>
   <primary>Scripting</primary>
  </indexterm>
  <para>
   Scripting enables you to customize various aspects of OpenIDM functionality,
   for example, by providing custom logic between source and target mappings,
   defining correlation rules, filters, and triggers, and so on.
  </para>
  <para>
   OpenIDM ${docTargetVersion} supports scripts written in JavaScript and
   Groovy. Script options, and the locations in which OpenIDM expects to find
   scripts, are configured in the <filename>conf/script.json</filename> file for
   your project. For more information, see <link xlink:show="new"
   xlink:role="http://docbook.org/xlink/role/olink"
   xlink:href="integrators-guide#script-config"><citetitle>Setting the Script
   Configuration</citetitle></link>.
  </para>

 <para>
  OpenIDM includes several default scripts in the following directory
  <filename><replaceable>install-dir</replaceable>/bin/defaults/script/</filename>.
  Do not modify or remove any of the scripts in this directory. OpenIDM needs
  these scripts to run specific services. Scripts in this folder are not
  guaranteed to remain constant between product releases.
 </para>
 <para>
  If you develop custom scripts, copy them to the <literal>script/</literal>
  directory for your project, for example,
  <literal>path/to/openidm/samples/sample2/script/</literal>.
 </para>

   <section xml:id="function-ref">
    <title>Function Reference</title>
    <indexterm>
     <primary>Objects</primary>
     <secondary>Script access</secondary>
    </indexterm>
    <indexterm>
     <primary>Scripting</primary>
     <secondary>Functions</secondary>
    </indexterm>
    <para>
     Functions (access to managed objects, system objects, and configuration
     objects) within OpenIDM are accessible to scripts via the
     <literal>openidm</literal> object, which is included in the top-level scope
     provided to each script.
    </para>
    <para>
     The following sections describe the OpenIDM functions supported by the
     script engine.
    </para>

    <section xml:id="function-create">
     <title>openidm.create(resource, id, value)</title>
     <para>
      This function creates a new resource object.
     </para>
     <variablelist>
      <title>Parameters</title>
      <varlistentry>
       <term>resource</term>
       <listitem>
        <para>string</para>
        <para>
         The container in which the object will be created, for example,
         <literal>managed/user</literal> or <literal>system/ldap/account</literal>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>id</term>
       <listitem>
       <para>string</para>
        <para>
         The identifier of the object to be created, if the client is supplying
         the ID. If the server should generate the ID, pass null here.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>value</term>
       <listitem>
        <para>object</para>
        <para>
         The value of the object to be created.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Returns</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>The created OpenIDM resource object.</para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Throws</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
       An exception is thrown if the object could not be created.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Example</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <programlisting language="javascript">openidm.create("managed/user", bjensen, <replaceable>map</replaceable>);</programlisting>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>

    <section xml:id="function-patch">
     <title>openidm.patch(id, rev, value)</title>
     <para>
      This function performs a partial modification of a managed or system
      object. Unlike the <literal>update</literal> function, only the modified
      attributes are provided, not the entire object.
     </para>
     <variablelist>
      <title>Parameters</title>
      <varlistentry>
       <term>id</term>
       <listitem>
        <para>string</para>
        <para>
         The identifier of the object to be updated.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>rev</term>
       <listitem>
        <para>string</para>
        <para>
         The revision of the object to be updated. Use <literal>null</literal>
         if the object is not subject to revision control, or if you want to
         skip the revision check and update the object, regardless of the
         revision.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>value</term>
       <listitem>
        <para>object</para>
        <para>
         The value of the modifications to be applied to the object. The patch
         set includes the operation type, the field to be changed, and the new
         values. A PATCH request can <literal>add</literal>,
         <literal>remove</literal>, <literal>replace</literal>, or
         <literal>increment</literal> an attribute value. A
         <literal>replace</literal> operation replaces an existing value, or
         adds a value if no value exists.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Returns</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         The modified OpenIDM resource object.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Throws</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         An exception is thrown if the object could not be updated.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Example</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <programlisting language="javascript">openidm.patch("managed/user/" + user._id, null,
         [{"operation" : "replace", "field" : "/password", "value": "Passw0rd"}]);</programlisting>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>

    <section xml:id="function-read">
     <title>openidm.read(id)</title>
     <para>
      This function reads and returns an OpenIDM resource object.
     </para>
     <variablelist>
      <title>Parameters</title>
      <varlistentry>
       <term>id</term>
       <listitem>
        <para>string</para>
        <para>
         The full path to the object to be read, including the ID.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Returns</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         The OpenIDM resource object, or <literal>null</literal> if not found.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Example</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <programlisting language="javascript">openidm.read("managed/user/"+userId)</programlisting>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>

    <section xml:id="function-update">
     <title>openidm.update(id, rev, value)</title>
     <para>
      This function updates an entire resource object.
     </para>
     <variablelist>
      <title>Parameters</title>
      <varlistentry>
       <term>id</term>
       <listitem>
        <para>string</para>
        <para>
         The identifier of the resource object to be updated.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>rev</term>
       <listitem>
        <para>string</para>
        <para>
         The revision of the object to be updated. Use <literal>null</literal>
         if the object is not subject to revision control, or if you want to
         skip the revision check and update the object, regardless of the
         revision.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>value</term>
       <listitem>
        <para>object</para>
        <para>
         The complete replacement object.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Returns</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         The modified OpenIDM resource object.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Throws</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         An exception is thrown if the object could not be updated.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Example</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         In this example, the managed user entry is read (with an
         <literal>openidm.read</literal>, the user entry that has been read is
         updated with a new description, and the entire updated object is replaced
         with the new value.
        </para>
        <programlisting language="javascript">var user_read = openidm.read('managed/user/' + source._id);
user_read['description'] = 'The entry has been updated';
openidm.update('managed/user/' + source._id, null, user_read);</programlisting>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>

    <section xml:id="function-delete">
     <title>openidm.delete(id, rev)</title>
     <para>
      This function deletes a resource object.
     </para>
     <variablelist>
      <title>Parameters</title>
      <varlistentry>
       <term>id</term>
       <listitem>
        <para>string</para>
        <para>
         The identifier of the object to be deleted.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>rev</term>
       <listitem>
        <para>string</para>
        <para>
         The revision of the object to be deleted. Use <literal>null</literal>
         if the object is not subject to revision control, or if you want to
         skip the revision check and delete the object, regardless of the
         revision.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Returns</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         Returns the deleted object if successful.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Throws</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         An exception is thrown if the object could not be deleted.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Example</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <programlisting language="javascript">openidm.delete('managed/user/'+ user._id, user._rev)</programlisting>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>

    <section xml:id="function-query">
     <title>openidm.query(id, params, fields)</title>
     <para>
      This function performs a query on the specified OpenIDM resource object.
      For more information, see <link
      xlink:href="integrators-guide#constructing-queries"
      xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Constructing
      Queries</citetitle></link>.
     </para>
     <variablelist>
      <title>Parameters</title>
      <varlistentry>
       <term>id</term>
       <listitem>
        <para>string</para>
        <para>
         The resource object on which the query should be performed, for
         example, <literal>"managed/user"</literal>, or
         <literal>"system/ldap/account"</literal>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>params</term>
       <listitem>
        <para>object</para>
        <para>
         The parameters that are passed to the query,
         <literal>_queryFilter</literal>, <literal>_queryId</literal>, or
         <literal>_queryExpression</literal>. Additional parameters passed to
         the query will differ, depending on the query.
        </para>
        <para>
         Certain common parameters can be passed to the query to restrict the
         query results. The following sample query passes paging parameters and
         sort keys to the query.
        </para>
        <informalexample>
<programlisting>reconAudit = openidm.query("audit/recon", {
    "_queryFilter": queryFilter,
    "_pageSize": limit,
    "_pagedResultsOffset": offset,
    "_pagedResultsCookie": string,
    "_sortKeys": "-timestamp"
});</programlisting>
        </informalexample>
        <para>
         For more information about <literal>_queryFilter</literal> syntax, see
         <link xlink:show="new" xlink:href="integrators-guide#query-filters"
         xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Common
         Filter Expressions</citetitle></link>. For more information about
         paging, see <link xlink:show="new"
         xlink:href="integrators-guide#paging-query-results"
         xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Paging
         Query Results</citetitle></link>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>fields</term>
       <listitem>
        <para>
         list
        </para>
        <para>
         A list of the fields, or columns, that should be returned in the
         result. The following example returns only the
         <literal>userName</literal> and <literal>_id</literal> fields:
        </para>
        <programlisting language="javascript">
openidm.query("managed/user", { "_queryFilter": "/userName sw \"user.1\""}, ["userName", "_id"])
        </programlisting>
        <para>
         This parameter is particularly useful in enabling you to return the
         response from a query without including intermediary code to massage it
         into the right format.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Returns</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         The result of the query. A query result includes the following
         parameters:
        </para>
        <variablelist>
         <varlistentry>
          <term>"query-time-ms"</term>
          <listitem>
           <para>
            The time, in milliseconds, that OpenIDM took to process the query.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>"conversion-time-ms"</term>
          <listitem>
           <para>
            (For an OrientDB repository only) the time, in milliseconds, taken
            to convert the data to a JSON object.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>"result"</term>
          <listitem>
           <para>
            The list of entries retrieved by the query. The result includes the
            revision (<literal>"_rev"</literal>) of the entry and any other
            properties that were requested in the query.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
        <para>
         The following example shows the result of a custom query that requests
         the ID, user name, and email address of managed users in the
         repository. For an OrientDB repository, the query would be something
         like <literal>select _openidm_id, userName, email from managed_user,</literal>.
        </para>
        <programlisting language="javascript">{
    "conversion-time-ms": 0,
    "result": [
    {
      "email": "bjensen@example.com",
      "userName": "bjensen",
      "_rev": "0",
      "_id": "36bbb745-517f-4695-93d0-998e1e7065cf"
    },
    {
      "email": "scarter@example.com",
      "userName": "scarter",
      "_rev": "0",
      "_id": "cc3bf6f0-949e-4699-9b8e-8c78ce04a287"
    }
    ],
    "query-time-ms": 1
}
      </programlisting>
       </listitem>
      </varlistentry>
  </variablelist>

     <variablelist>
      <title>Throws</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         An exception is thrown if the given query could not be processed.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Examples</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         The following sample query uses a <literal>_queryFilter</literal> to
         query the managed user repository.
        </para>
        <programlisting>openidm.query("managed/user",
         { '_queryFilter' : userIdPropertyName + ' eq "' + security.authenticationId  + '"' });</programlisting>
        <para>
         The following sample query references the <literal>for-userName</literal>
         query, defined in the repository configuration, to query the managed user
         repository.
        </para>
        <programlisting>openidm.query("managed/user",
         {"_queryId": "for-userName", "uid": request.additionalParameters.uid } );</programlisting>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>

    <section xml:id="function-action">
     <title>openidm.action(resource, actionName, content, params)</title>
     <para>
      This function performs an action on the specified OpenIDM resource object.
      The <literal>resource</literal> and <literal>actionName</literal> are
      required. The <literal>content</literal> and <literal>params</literal> are
      optional.
     </para>
     <variablelist>
      <title>Parameters</title>
      <varlistentry>
       <term>resource</term>
       <listitem>
        <para>string</para>
        <para>
         The resource that the function acts upon, for example,
         <literal>managed/user</literal>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>actionName</term>
       <listitem>
        <para>string</para>
        <para>
         The action to execute. Actions are used to represent functionality that
         is not covered by the standard methods for a resource (create, read,
         update, delete, patch, or query). In general, you should not use the
         <literal>openidm.action</literal> function for create, read, update,
         patch, delete or query operations. Instead, use the corresponding
         function specific to the operation (for example,
         <literal>openidm.create</literal>).
        </para>
        <para>
         Using the operation-specific functions enables you to benefit from the
         well-defined REST API, which follows the same pattern as all other
         standard resources in the system. Using the REST API enhances usability
         for your own API enforces the established patterns described in the
         <link xlink:show="new" xlink:href="integrators-guide#appendix-rest"
         xlink:role="http://docbook.org/xlink/role/olink"><citetitle>REST API
         Reference</citetitle></link>.
        </para>
        <para>
         OpenIDM-defined resources support a fixed set of actions. For
         user-defined resources (scriptable endpoints) you can implement
         whatever actions you require.
        </para>
        <variablelist>
         <para>
          The following list outlines the supported actions, for each
          OpenIDM-defined resource. The actions listed here are also supported
          over the REST interface, and are described in detail in the <link
          xlink:href="integrators-guide#appendix-rest"
          xlink:role="http://docbook.org/xlink/role/olink"><citetitle>REST
          Appendix</citetitle></link>.
         </para>
         <varlistentry>
          <term>
           Actions supported on the managed resource
           (<literal>managed/<replaceable>*</replaceable></literal>)
          </term>
          <listitem>
           <para>
            command, patch-by-query
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           Actions supported on system resources
           (<literal>system/<replaceable>*</replaceable></literal>)
          </term>
          <listitem>
           <para>
            availableConnectors, createCoreConfig, createFullConfig, test,
            testConfig, liveSync, authenticate, script
           </para>
           <para>
            For example:
           </para>
           <programlisting language="javascript">openidm.action("system/ldap/account", "authenticate", {},
{"userName" : "bjensen", "password" : "Passw0rd"});</programlisting>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           Actions supported on the repository (<literal>repo</literal>)
          </term>
          <listitem>
           <para>
            command, updateDbCredentials
           </para>
           <para>
            For example:
           </para>
           <programlisting language="javascript">var r, command = {
    "commandId": "purge-by-recon-number-of",
    "numberOf": numOfRecons,
    "includeMapping" : includeMapping,
    "excludeMapping" : excludeMapping
};
r = openidm.action("repo/audit/recon", "command", {}, command);</programlisting>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           Actions supported on the synchronization resource (<literal>sync</literal>)
          </term>
          <listitem>
           <para>
            performAction,
           </para>
           <para>
            For example:
           </para>
           <programlisting language="javascript">openidm.action('sync', 'performAction', content, params)</programlisting>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           Actions supported on the reconciliation resource (<literal>recon</literal>)
          </term>
          <listitem>
           <para>
            recon, cancel
           </para>
           <para>
            For example:
           </para>
           <programlisting language="javascript">openidm.action("recon", "cancel", content, params);</programlisting>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           Actions supported on the script resource (<literal>script</literal>)
          </term>
          <listitem>
           <para>
            eval
           </para>
           <para>
            For example:
           </para>
           <programlisting language="javascript">openidm.action("script", "eval", getConfig(scriptConfig), {});</programlisting>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           Actions supported on the policy resource (<literal>policy</literal>)
          </term>
          <listitem>
           <para>
            validateObject, validateProperty
           </para>
           <para>
            For example:
           </para>
           <informalexample><?dbfo pgwide="1"?>
<programlisting language="javascript">openidm.action("policy/" + fullResourcePath, "validateObject", request.content, { "external" : "true" });</programlisting>
           </informalexample>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           Actions supported on the workflow resource (<literal>workflow/*</literal>)
          </term>
          <listitem>
           <para>
            claim
           </para>
           <para>
            For example:
           </para>
           <informalexample><?dbfo pgwide="1"?>
<programlisting language="javascript">var params = {
"userId":"manager1"
};
openidm.action('workflow/processinstance/15', {"_action" : "claim"}, params);</programlisting>
           </informalexample>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           Actions supported on the task scanner resource
           (<literal>taskscanner</literal>)
          </term>
          <listitem>
           <para>
            execute, cancel
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           Actions supported on the external email resource
           (<literal>external/email</literal>)
          </term>
          <listitem>
           <para>
            sendEmail
           </para>
           <para>
            For example:
           </para>
            <programlisting language="javascript">{
    emailParams = {
        "from" : 'admin@example.com',
        "to" : user.mail,
        "subject" : 'Password expiry notification',
        "type" : 'text/plain',
        "body" : 'Your password will expire soon. Please change it!'
    }
    openidm.action("external/email", 'sendEmail',  emailParams);
}</programlisting>
          </listitem>
         </varlistentry>
        </variablelist>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>content</term>
       <listitem>
        <para>object (optional)</para>
        <para>
         Content given to the action for processing.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>params</term>
       <listitem>
        <para>object (optional)</para>
        <para>
         Additional parameters passed to the script. The
         <literal>params</literal> object must be a set of simple key:value
         pairs, and cannot include complex values. The parameters must map
         directly to URL variables, which take the form
         <literal>name1=val1&amp;name2=val2&amp;...</literal>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Returns</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         The result of the action may be <literal>null</literal>.
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

     <variablelist>
      <title>Throws</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         If the action cannot be executed, an exception is thrown.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>

    <section xml:id="function-encrypt">
     <title>openidm.encrypt(value, cipher, alias)</title>
     <para>
      This function encrypts a value.
     </para>
     <variablelist>
      <title>Parameters</title>
      <varlistentry>
       <term>value</term>
       <listitem>
        <para>any</para>
        <para>
         The value to be encrypted.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>cipher</term>
       <listitem>
        <para>string</para>
        <para>
         The cipher with which to encrypt the value, using the form
         "algorithm/mode/padding" or just "algorithm". Example:
         <literal>AES/ECB/PKCS5Padding</literal>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>alias</term>
       <listitem>
        <para>string</para>
        <para>
         The key alias in the keystore with which to encrypt the node.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Returns</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         The value, encrypted with the specified cipher and key.
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

     <variablelist>
      <title>Throws</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         An exception is thrown if the object could not be encrypted for any
         reason.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     </section>

    <section xml:id="function-decrypt">
     <title>openidm.decrypt(value)</title>
     <para>This function decrypts a value.</para>
     <variablelist>
      <title>Parameters</title>
      <varlistentry>
       <term>value</term>
       <listitem>
        <para>object</para>
        <para>
         The value to be decrypted.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Returns</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         A deep copy of the value, with any encrypted value decrypted.
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

     <variablelist>
      <title>Throws</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         An exception is thrown if the object could not be decrypted for any
         reason. An error is thrown if the value is passed in as a string - it
         must be passed in an object.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>

    <section xml:id="function-isencrypted">
     <title>openidm.isEncrypted(object)</title>
     <para>
      This function determines if a value is encrypted.
     </para>
     <variablelist>
      <title>Parameters</title>
      <varlistentry>
       <term>object to check</term>
       <listitem>
        <para>any</para>
        <para>
         The object whose value should be checked to determine if it is
         encrypted.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <variablelist>
      <title>Returns</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         Boolean, <literal>true</literal> if the value is encrypted, and
         <literal>false</literal> if it is not encrypted.
        </para>
       </listitem>
      </varlistentry>

     </variablelist>

     <variablelist>
      <title>Throws</title>
      <varlistentry>
       <term> </term>
       <listitem>
        <para>
         An exception is thrown if the server is unable to detect whether the
         value is encrypted, for any reason.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>

    <section xml:id="logger-functions">
     <title>Logging Functions</title>
     <para>
      OpenIDM also provides a <literal>logger</literal> object to access the
      Simple Logging Facade for Java (SLF4J) facilities. The following code
      shows an example of the <literal>logger</literal> object.
     </para>
     <programlisting language="javascript">logger.info("Parameters passed in: {} {} {}", param1, param2, param3);</programlisting>
     <para>
      To set the log level for all scripts, add the following property to the
      <filename>openidm/conf/logging.properties</filename> file:
      <literal>org.forgerock.openidm.script.javascript.JavaScript.level</literal>.
      The level can be one of <literal>SEVERE</literal> (highest value),
      <literal>WARNING, INFO, CONFIG, FINE, FINER</literal>, or
      <literal>FINEST</literal> (lowest value). For example:
     </para>
     <programlisting language="javascript">org.forgerock.script.javascript.JavaScript.level=WARNING</programlisting>
     <para>
      In addition, JavaScript has a useful logging function named
      <literal>console.log()</literal>. This function provides an easy way to
      dump data to the OpenIDM standard output (usually the same output as the
      Felix console). The function works well with the JavaScript built-in
      function <literal>JSON.stringify</literal> and provides fine-grained
      details about any given object. For example, the following line will
      print a formatted JSON structure that represents the HTTP request details
      to STDOUT.</para>
     <programlisting language="javascript">console.log(JSON.stringify(context.http, null, 4));</programlisting>
     <note>
      <para>
       These logging functions apply only to JavaScript scripts. To use the
       logging functions in Groovy scripts, the following lines must be added to
       the Groovy scripts:
      </para>
      <programlisting>
import org.slf4j.*;
logger = LoggerFactory.getLogger('logger');
      </programlisting>
     </note>
     <para>
      The following sections describe the logging functions available to the
      script engine.
     </para>

     <section xml:id="function-logger-debug">
      <title>logger.debug(string message, object... params)</title>
      <para>
       Logs a message at DEBUG level.
      </para>
      <variablelist>
       <title>Parameters</title>
       <varlistentry>
        <term>message</term>
        <listitem>
         <para>string</para>
         <para>
          The message format to log. Params replace <literal>{}</literal> in
          your message.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>params</term>
        <listitem>
         <para>object</para>
         <para>
          Arguments to include in the message.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

      <variablelist>
       <title>Returns</title>
       <varlistentry>
        <term> </term>
        <listitem>
         <para>
          A <literal>null</literal> value if successful.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

      <variablelist>
       <title>Throws</title>
       <varlistentry>
        <term> </term>
        <listitem>
         <para>
          An exception is thrown if the message could not be logged.
         </para>
        </listitem>
       </varlistentry>

      </variablelist>
     </section>

     <section xml:id="function-logger-error">
      <title>logger.error(string message, object... params)</title>
      <para>
       Logs a message at ERROR level.
      </para>
      <variablelist>
       <title>Parameters</title>
       <varlistentry>
        <term>message</term>
        <listitem>
         <para>string</para>
         <para>
          The message format to log. Params replace <literal>{}</literal> in
          your message.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>params</term>
        <listitem>
         <para>object</para>
         <para>
          Arguments to include in the message.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

      <variablelist>
       <title>Returns</title>
       <varlistentry>
        <term> </term>
        <listitem>
         <para>
          A <literal>null</literal> value if successful.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

      <variablelist>
       <title>Throws</title>
       <varlistentry>
        <term> </term>
        <listitem>
         <para>
          An exception is thrown if the message could not be logged.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </section>

     <section xml:id="function-logger-info">
      <title>logger.info(string message, object... params)</title>
      <para>
       Logs a message at INFO level.
      </para>
      <variablelist>
       <title>Parameters</title>
       <varlistentry>
        <term>message</term>
        <listitem>
         <para>string</para>
         <para>
          The message format to log. Params replace <literal>{}</literal> in
          your message.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>params</term>
        <listitem>
         <para>object</para>
         <para>
          Arguments to include in the message.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

      <variablelist>
       <title>Returns</title>
       <varlistentry>
        <term> </term>
        <listitem>
         <para>
          A <literal>null</literal> value if successful.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

      <variablelist>
       <title>Throws</title>
       <varlistentry>
        <term> </term>
        <listitem>
         <para>
          An exception is thrown if the message could not be logged.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </section>

     <section xml:id="function-logger-trace">
      <title>logger.trace(string message, object... params)</title>
      <para>
       Logs a message at TRACE level.
      </para>
      <variablelist>
       <title>Parameters</title>
       <varlistentry>
        <term>message</term>
        <listitem>
         <para>string</para>
         <para>
          The message format to log. Params replace <literal>{}</literal> in
          your message.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>params</term>
        <listitem>
         <para>object</para>
         <para>
          Arguments to include in the message.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

      <variablelist>
       <title>Returns</title>
       <varlistentry>
        <term> </term>
        <listitem>
         <para>
          A <literal>null</literal> value if successful.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

      <variablelist>
       <title>Throws</title>
       <varlistentry>
        <term> </term>
        <listitem>
         <para>
          An exception is thrown if the message could not be logged.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </section>

     <section xml:id="function-logger-warn">
      <title>logger.warn(string message, object... params)</title>
      <para>
       Logs a message at WARN level.
      </para>
      <variablelist>
       <title>Parameters</title>
       <varlistentry>
        <term>message</term>
        <listitem>
         <para>string</para>
         <para>
          The message format to log. Params replace <literal>{}</literal> in
          your message.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>params</term>
        <listitem>
         <para>object</para>
         <para>
          Arguments to include in the message.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

      <variablelist>
       <title>Returns</title>
       <varlistentry>
        <term> </term>
        <listitem>
         <para>
          A <literal>null</literal> value if successful.
         </para>
        </listitem>
       </varlistentry>

      </variablelist>

      <variablelist>
       <title>Throws</title>
       <varlistentry>
        <term> </term>
        <listitem>
         <para>
          An exception is thrown if the message could not be logged.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </section>
    </section>
    </section>

    <section xml:id="script-places">
     <title>Places to Trigger Scripts</title>
     <para>
      Scripts can be triggered in different places, and by different events. The
      following list indicates the configuration files in which scripts can be
      referenced, the events upon which the scripts can be triggered and the
      actual scripts that can be triggered on each of these files.
     </para>

     <variablelist>
      <varlistentry>
       <term>
        Scripts called in the mapping (<filename>conf/sync.json</filename>) file
       </term>
       <listitem>
        <variablelist>
         <varlistentry>
          <term>Triggered by situation</term>
          <listitem>
           <para>
            onCreate, onUpdate, onDelete, onLink, onUnlink
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Object filter</term>
          <listitem>
           <para>
            validSource, validTarget
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Triggered when correlating objects</term>
          <listitem>
           <para>
            correlationQuery, correlationScript
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Triggered on any reconciliation</term>
          <listitem>
           <para>result</para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>Scripts inside properties</term>
          <listitem>
           <para>
            condition, transform
           </para>
           <para>
            <filename>sync.json</filename> supports only one script per hook. If
            multiple scripts are defined for the same hook, only the last one is
            kept.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        Scripts called in the managed object configuration
        (<filename>conf/managed.json</filename>) file
       </term>
       <listitem>
        <para>
         onCreate, onRead, onUpdate, onDelete, onValidate, onRetrieve, onStore,
         onSync, postCreate, postUpdate, and postDelete
        </para>
        <para>
         <filename>managed.json</filename> supports only one script per hook. If
         multiple scripts are defined for the same hook, only the last one is
         kept.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        Scripts called in the router configuration
        (<filename>conf/router.json</filename>) file
       </term>
       <listitem>
        <para>
         onRequest, onResponse, onFailure
        </para>
        <para>
         <literal>router.json</literal> supports multiple scripts per hook.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </section>

    <section xml:id="script-variables">
     <title>Variables Available to Scripts</title>
     <para>
      The variables that are available to scripts depend on the triggers that
      launch the script, and on the file in which those triggers are
      defined. The following table lists triggers, with associated variables.
     </para>

     <table pgwide="1" xml:id="table-script-triggers">
      <title>Script Triggers and Associated Variables</title>

      <tgroup cols="3">
       <colspec colnum="1" colwidth="2*" />
       <colspec colnum="2" colwidth="3*" />
       <colspec colnum="3" colwidth="2*"/>

       <thead>
        <row>
         <entry>Configuration File</entry>
         <entry>Trigger</entry>
         <entry>Variable</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry morerows="7">managed.json</entry>
         <entry>onCreate, onDelete</entry>
         <entry>object, source, target, situation, linkQualifier</entry>
        </row>
        <row>
         <entry>onRetrieve, onStore</entry>
         <entry><para>
          object, when called from either an object or a property storage
          trigger
         </para>
          <para>
           property and propertyName, only when called from a property storage
           trigger
          </para></entry>
        </row>
        <row>
         <entry>onSync</entry>
         <entry>syncResults, request, oldObject, newObject</entry>
        </row>
        <row>
         <entry>onUpdate</entry>
         <entry>oldObject, newObject, source, target, situation, linkQualifier</entry>
        </row>
        <row>
         <entry>onValidate</entry>
         <entry>property, only when called from a property storage
         trigger</entry>
        </row>
        <row>
         <entry>postCreate, postDelete, postUpdate</entry>
         <entry>object</entry>
        </row>
        <row>
         <entry>onRead</entry>
         <entry><para>
          object, when called from either an object or a property storage trigger
          </para>
         <para>
          property, only when called from a property storage trigger
         </para></entry>
        </row>
        <row>
         <entry>onStore</entry>
         <entry>object, property</entry>
        </row>
        <row>
         <entry morerows="2">router.json</entry>
         <entry>onFailure</entry>
         <entry>exception</entry>
        </row>
        <row>
         <entry>onRequest</entry>
         <entry>request</entry>
        </row>
        <row>
         <entry>onResponse</entry>
         <entry>response</entry>
        </row>
        <row>
         <entry morerows="8">sync.json</entry>
         <entry>onCreate, onDelete, onUpdate</entry>
         <entry>object, source, target, situation, linkQualifier</entry>
        </row>
        <row>
         <entry>onLink, onUnlink</entry>
         <entry>source, target, linkQualifier</entry>
        </row>
        <row>
         <entry>validSource</entry>
         <entry>source, linkQualifier</entry>
        </row>
        <row>
         <entry>validTarget</entry>
         <entry>target, linkQualifier</entry>
        </row>
        <row>
         <entry>correlationQuery, correlationScript</entry>
         <entry>source, linkQualifier</entry>
        </row>
        <row>
         <entry>condition</entry>
         <entry>object, linkQualifier</entry>
        </row>
        <row>
         <entry>action</entry>
         <entry>
          source, target, linkQualifier, recon (where
          <literal>recon.actionParam</literal> contains information about the
          current reconciliation operation)
         </entry>
        </row>
        <row>
         <entry>transform</entry>
         <entry>source, linkQualifier</entry>
        </row>
        <row>
         <entry>result</entry>
         <entry>source, target, global, with reconciliation results</entry>
        </row>
        <row>
         <entry>*</entry>
         <entry>custom endpoint scripts</entry>
         <entry>request, context</entry>
        </row>
       </tbody>
      </tgroup>
     </table>

     <variablelist>
      <para>
       OpenIDM includes one additional variable used in scripts:
      </para>

      <varlistentry>
        <term>identityServer</term>
        <listitem>
         <itemizedlist>
          <para>
           The <literal>identityServer</literal> variable can be used in
           several ways. The <literal>ScriptRegistryService</literal> described
           in <xref linkend="script-endpoint" /> binds this variable to:
          </para>
          <listitem>
           <para><literal>getProperty</literal></para>
           <para>
            Retrieves property information from configuration files.
            Creates a new identity environment configuration.
           </para>
           <para>
            For example, you can retrieve the value of the
            <literal>openidm.config.crypto.alias</literal> property from that
            file with the following code:
            <literal>alias = identityServer.getProperty("openidm.config.crypto.alias", "true", true);</literal>
           </para>
          </listitem>
          <listitem>
           <para><literal>getInstallLocation</literal></para>
           <para>
            Retrieves the installation path for OpenIDM, such as
            <filename>/path/to/openidm</filename>. May be superseded by an
            absolute path.
           </para>
          </listitem>
          <listitem>
           <para><literal>getProjectLocation</literal></para>
           <para>Retrieves the directory used when you started OpenIDM. That
            directory includes configuration and script files for your
            project.</para>
           <para>
            For more information on the project location, see
            <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
                  xlink:href="integrators-guide#startup-configuration">
             <citetitle>Specifying the OpenIDM Startup
              Configuration</citetitle></link>
           </para>
          </listitem>
          <listitem>
           <para><literal>getWorkingLocation</literal></para>
           <para>Retrieves the directory associated with database cache and
           audit logs. You can find <filename>db/</filename> and
           <filename>audit/</filename> subdirectories there.</para>
           <para>
            For more information on the working location, see
            <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
                  xlink:href="integrators-guide#startup-configuration">
             <citetitle>Specifying the OpenIDM Startup
              Configuration</citetitle></link>
           </para>
          </listitem>
         </itemizedlist>
        </listitem>
      </varlistentry>
     </variablelist>

    </section>
<!--TODO Reintegrate, and possible revise, when debugging is resolved on Mars
 <section xml:id="debugging-scripts">
  <title>Debugging OpenIDM JavaScripts</title>
  <para>
   OpenIDM includes Eclipse JSDT libraries that enable you to use Eclipse to
   debug your OpenIDM JavaScript scripts during development.
  </para>
  <caution>
   <para>
    Debugging with Eclipse is currently supported <emphasis>only</emphasis> for
    Eclipse Luna.
   </para>
  </caution>
  <para>
   To enable debugging
   with Eclipse, follow these steps:
  </para>
  <procedure>
   <step>
    <para>
     Stop OpenIDM, if it is running.
    </para>
   </step>
   <step>
    <para>
     Install a version of Eclipse that supports JavaScript development (from the
     <link xlink:href="http://www.eclipse.org/downloads/"
     xlink:show="new">Eclipse download page</link>), or add the <link xlink:show="new"
     xlink:href="http://wiki.eclipse.org/JSDT">JavaScript Development
     Tools</link> to your existing Eclipse installation.
    </para>
    <para>
     This procedure uses <link xlink:href="http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/lunasr2"
     xlink:show="new">Eclipse IDE for Java EE Developers</link>.
    </para>
   </step>
   <step>
    <para>
     Copy the Rhino Debugger that is provided with Eclipse into the
     <literal>openidm/bundle</literal> directory.
    </para>
    <informalexample><?dbfo pgwide="1"?>
<screen>$ cd /path/to/openidm/bundle
$ cp /path/to/Eclipse/plugins/org.eclipse.wst.jsdt.debug.rhino.debugger_1.0.500.v201503300052.jar .</screen>
    </informalexample>
   </step>
   <step>
    <para>
     Copy the transport JAR file (used to load scripts to be debugged) that is
     provided with Eclipse into the <literal>openidm/bundle</literal> directory.
    </para>
    <informalexample><?dbfo pgwide="1"?>
     <screen>$ cd /path/to/openidm/bundle
$ cp /path/to/Eclipse/plugins/org.eclipse.wst.jsdt.debug.transport_1.0.300.v201502261613.jar .</screen>
    </informalexample>
   </step>
   <step>
    <para>
     If you have previously started this OpenIDM instance, delete the
     <literal>felix-cache</literal> directory.
    </para>
   </step>
   <step>
    <para>
     Enable debugging by editing the script configuration file for your project
     (<filename><replaceable>project-dir</replaceable>/conf/script.json</filename>).
    </para>
    <para>
     Specifically, uncomment the following line:
    </para>
    <screen>"javascript.debug" : "transport=socket,suspend=y,address=9888,trace=true",</screen>
    <para>
     The <literal>suspend=y</literal> parameter prevents OpenIDM from starting
     until the remote JavaScript debugger has connected. You might want to set
     this to <literal>suspend=n</literal>, if you do not want to prevent OpenIDM
     from starting.
    </para>
   </step>
   <step>
    <para>
     Start Eclipse and create an empty JavaScript project named, for example,
     <literal>OpenIDM_Scripts</literal>.
    </para>
    <para>
     Eclipse will create an <filename>OpenIDM_Scripts</filename>
     directory in the default Eclipse workspace location, and will use this
     directory to store the sources that it loads from OpenIDM.
    </para>
   </step>
   <step>
    <para>
     Link the folder, within your OpenIDM project, that contains the script or
     scripts that you want to debug.
    </para>
    <substeps>
     <step>
      <para>
       Select Project > Properties > JavaScript > Include Path.
      </para>
     </step>
     <step>
      <para>
       Click on the Source tab and click Link External Folder.
      </para>
     </step>
     <step>
      <para>
       Browse for the folder or folders that will contain the JavaScript files
       that you want to debug, for example,
       <filename><replaceable>project-dir</replaceable>/script</filename>, and
       click Finish.
      </para>
     </step>
    </substeps>
    <para>
     Each time OpenIDM loads a new script, it creates or overwrites the file in
     the <filename>External JavaScript Source</filename> directory. Before you
     toggle breakpoints, you must refresh the source manually in Eclipse, so
     that you have the latest version of the script.
    </para>
   </step>
   <step>
    <para>
     Start the OpenIDM instance.
    </para>
   </step>
   <step>
    <para>
     Connect the debugger to OpenIDM by creating a new debug configuration:
    </para>
    <substeps>
     <step>
      <para>
       Select Run > Debug Configurations > Remote JavaScript > New
      </para>
     </step>
     <step>
      <para>
       Provide a name for the configuration, for example, OpenIDM_Scripts, and
       set the port to 9888.
      </para>
     </step>
     <step>
      <para>
       Click Apply.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Prepare the Eclipse debugger to allow you to set breakpoints.
    </para>
    <substeps>
     <step>
      <para>
       In the Eclipse Debug perspective, select the Breakpoints tab.
      </para>
     </step>
     <step>
      <para>
       Click the Add Script Load Breakpoint icon to display the list of scripts
       in the external directory that you have specified.
      </para>
     </step>
     <step>
      <para>
       In the Add Script Load Breakpoint window, select the script or scripts
       you want to debug, and click OK.
      </para>
     </step>
    </substeps>
   </step>
  </procedure>
 </section> -->

 <section xml:id="script-endpoint">
  <title>Validating Scripts Over REST</title>
  <para>
   OpenIDM exposes a <literal>script</literal> endpoint over which scripts can
   be validated, by specifying the script parameters as part of the JSON
   payload. This functionality enables you to test how a script will operate in
   your deployment, with complete control over the inputs and outputs. Testing
   scripts in this way can be useful in debugging.
  </para>
  <para>
   In addition, the script registry service supports calls to other scripts
   (even scripts written in a different language, such as from JavaScript to
   Groovy). For example, you might have logic written in JavaScript, but also
   some code available in Groovy. Ordinarily, it would be challenging to
   interoperate between these two environments, but this script service enables
   you to call one from the other on the OpenIDM router.
  </para>
  <para>
   The <literal>script</literal> endpoint supports two actions -
   <literal>eval</literal> and <literal>compile</literal>.
  </para>
  <para>
   The <literal>eval</literal> action evaluates a script, by taking any actions
   referenced in the script, such as router calls to affect the state of an
   object. For JavaScript scripts, the last statement that is executed is the
   value produced by the script, and the expected result of the REST call.
  </para>
  <para>
   The following REST call attempts to evaluate the
   <literal>autoPurgeAuditRecon.js</literal> script (provided in
   <filename>openidm/bin/defaults/script/audit</filename>), but provides an
   incorrect purge type (<literal>"purgeByNumOfRecordsToKeep"</literal> instead
   of <literal>"purgeByNumOfReconsToKeep"</literal>). The error is picked up in
   the evaluation. The example assumes that the script exists in the directory
   reserved for custom scripts (<filename>openidm/script</filename>).
  </para>
  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request POST \
 --data '{
   "type": "text/javascript",
   "file": "script/autoPurgeAuditRecon.js",
   "globals": {
     "input": {
       "mappings": ["%"],
       "purgeType": "purgeByNumOfRecordsToKeep",
       "numOfRecons": 1
     }
   }
 }' \
 "https://localhost:8443/openidm/script?_action=eval"</userinput>
<computeroutput>
"Must choose to either purge by expired or number of recons to keep"</computeroutput></screen>
  <tip>
   <para>
    The variables passed into this scripts are namespaced with the
    <literal>"globals"</literal> map. It is preferable to namespace variables
    passed into scripts in this way, to avoid collisions with the top-level
    reserved words for script maps, such as <literal>file</literal>,
    <literal>source</literal>, and <literal>type</literal>.
   </para>
  </tip>
  <para>
   The <literal>compile</literal> action compiles a script, but does not
   execute it. This action is used primarily by the UI, to validate scripts that
   are entered in the UI. A successful compilation returns
   <literal>true</literal>. An unsuccessful compilation returns the reason for
   the failure.
  </para>
  <para>
   The following REST call tests whether a transformation script will compile.
  </para>
  <screen>$ <userinput>curl \
   --cacert self-signed.crt \
   --header "X-OpenIDM-Username: openidm-admin" \
   --header "X-OpenIDM-Password: openidm-admin" \
   --header "Content-Type: application/json" \
   --request POST \
   --data '{
       "type":"text/javascript",
       "source":"source.mail ? source.mail.toLowerCase() : null"
   }' \
   "https://localhost:8443/openidm/script?_action=compile"</userinput>
<computeroutput>True</computeroutput></screen>
  <para>
   If the script is not valid, the action returns an indication of the error,
   for example:
  </para>
  <screen>$ <userinput>curl \
   --cacert self-signed.crt \
   --header "X-OpenIDM-Username: openidm-admin" \
   --header "X-OpenIDM-Password: openidm-admin" \
   --header "Content-Type: application/json" \
   --request POST \
   --data '{
       "type":"text/javascript",
       "source":"source.mail ? source.mail.toLowerCase()"
   }' \
   "https://localhost:8443/openidm/script?_action=compile"</userinput>
<computeroutput>{
    "code": 400,
    "reason": "Bad Request",
    "message": "missing : in conditional expression
        (3864142CB836831FAB8EAB662F566139CDC22BF2#1)
        in 3864142CB836831FAB8EAB662F566139CDC22BF2
        at line number 1 at column number 39"
}</computeroutput></screen>
 </section>
</appendix>
