<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2012 ForgeRock AS
  !    
-->
<chapter xml:id="chap-configuration"
 xmlns="http://docbook.org/ns/docbook"
 version="5.0" xml:lang="en"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xinclude="http://www.w3.org/2001/XInclude">
 <title>Configuring OpenIDM</title>

 <para>OpenIDM configuration is split between <filename>.properties</filename> and container
 configuration files, and also dynamic configuration objects. The majority
 of OpenIDM configuration files are stored under
 <filename>openidm/conf/</filename>, as described in the appendix listing the
 <link xlink:href="integrators-guide#appendix-file-layout"
 xlink:role="http://docbook.org/xlink/role/olink"><citetitle>File
 Layout</citetitle></link>.</para>

 <para>OpenIDM stores configuration objects in its internal repository.
 You can manage the configuration by using either the REST access to the
 configuration objects, or by using the JSON file based views.</para>

 <section xml:id="configuration-objects">
  <title>OpenIDM Configuration Objects</title>
  <indexterm>
   <primary>Objects</primary>
   <secondary>Configuration objects</secondary>
  </indexterm>
  <indexterm>
   <primary>Configuration</primary>
   <secondary>Objects</secondary>
  </indexterm>

  <para>OpenIDM exposes internal configuration objects in JSON format.
      Configuration elements can be either single instance or multiple
      instance for an OpenIDM installation.</para>

  <itemizedlist xml:id="single-instance-configuration-objects">
   <title>Single Instance Configuration Objects</title>
   <para>Single instance configuration objects correspond to services that have
   at most one instance per installation.</para>
   <para>JSON file views of these configuration objects are named
   <filename><replaceable>object-name</replaceable>.json</filename>.</para>
   <listitem>
    <para>The <literal>audit</literal> configuration specifies how audit
    events are logged.</para>
   </listitem>
   <listitem>
    <para>The <literal>authentication</literal> configuration controls
    REST access.</para>
   </listitem>
   <listitem>
    <para>The <literal>endpoint</literal> configuration controls any custom
    REST endpoints.</para>
   </listitem>
   <listitem>
      <para>The <literal>managed</literal> configuration defines managed
          objects and their schemas.</para>
   </listitem>
   <listitem>
      <para>The <literal>policy</literal> configuration defines the policy
      validation service.</para>
   </listitem>
   <listitem>
      <para>The <literal>process access</literal> configuration defines access
      to any configured workflows.</para>
   </listitem>
   <listitem>
    <para>The <literal>repo.<replaceable>repo-type</replaceable></literal>
    configuration such as <literal>repo.orientdb</literal> or
    <literal>repo.jdbc</literal> configures the internal repository.</para>
   </listitem>
   <listitem>
    <para>The <literal>router</literal> configuration specifies filters to
    apply for specific operations.</para>
   </listitem>
   <listitem>
    <para>The <literal>sync</literal> configuration defines the mappings that
    OpenIDM uses when synchronizing and reconciling managed objects.</para>
   </listitem>
   <listitem>
       <para>The <literal>ui</literal> configuration defines the configurable
       aspects of the default user interface.</para>
   </listitem>
   <listitem>
       <para>The <literal>workflow</literal> configuration defines the
       configuration of the workflow engine.</para>
   </listitem>
  </itemizedlist>

  <itemizedlist xml:id="multiple-instance-configuration-objects">
   <title>Multiple Instance Configuration Objects</title>
   <para>Multiple instance configuration objects correspond to services that
   can have many instances per installation. Configuration objects are named
   <literal><replaceable>objectname</replaceable>/<replaceable>instancename
   </replaceable></literal>. For example, <filename>provisioner.openicf/xml</filename>.</para>
   <para><emphasis>JSON file</emphasis> views of these configuration objects 
   are named <filename><replaceable>objectname</replaceable>-<replaceable
   >instancename</replaceable>.json</filename>. For example, 
   <filename>provisioner.openicf-xml.json.</filename></para>
   <listitem>
    <para>Multiple <literal>schedule</literal> configurations can run
    reconciliations and other tasks on different schedules.</para>
   </listitem>
   <listitem>
    <para>Multiple <literal>provisioner.openicf</literal> configurations
    correspond to the resources connected to OpenIDM.</para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="changing-configuration">
     <title>Changing the Default Configuration</title>

     <itemizedlist>
       <para>When you change OpenIDM's configuration objects, take the following
         points into account.</para>
       <listitem>
         <para>OpenIDM's authoritative configuration source is the internal
             repository. JSON files provide a view of the configuration objects,
             but do not represent the authoritative source.</para>
         <para>OpenIDM updates JSON files after making configuration changes,
             whether those changes are made through REST access to configuration
             objects, or through edits to the JSON files.</para>
       </listitem>
       <listitem>
         <para>OpenIDM recognizes changes to JSON files when it is running. OpenIDM
             <emphasis>must</emphasis> be running when you delete configuration
             objects, even if you do so by editing the JSON files.</para>
       </listitem>
       <listitem>
           <para>Avoid editing configuration objects directly in the internal
               repository. Rather edit the configuration over the REST API, or
               in the configuration JSON files to ensure consistent behavior
               and that operations are logged.</para>
       </listitem>
       <listitem>
           <para>OpenIDM stores its configuration in the internal database by
               default. If you remove an OpenIDM instance and do not specifically
               drop the repository, the configuration remains in effect for a
               new OpenIDM instance that uses that repository. For testing or
               evaluation purposes, you can disable this <emphasis>persistent
               configuration</emphasis> in the <filename>conf/system.properties</filename>
               file by uncommenting the following line:</para>
             <programlisting>
# openidm.config.repo.enabled=false
             </programlisting>
             <para>Disabling persistent configuration means that OpenIDM will
                 store its configuration in memory only. You should not disable
                 persistent configuration in a production environment.</para>
         </listitem>
     </itemizedlist>
 </section>

    <section xml:id="configuring-for-production">
        <title>Configuring an OpenIDM System for Production</title>

        <para>Out of the box, OpenIDM is configured to make it easy to install and
            evaluate. Specific configuration changes are required before you deploy
            OpenIDM in a production environment.</para>

        <section xml:id="configuring-production-repo">
            <title>Configuring a Production Repository</title>

            <para>By default, OpenIDM uses OrientDB for its internal repository
                so that you do not have to install a database in order to evaluate
                OpenIDM. Before you use OpenIDM in production, you must replace
                OrientDB with a supported repository.</para>
            <para>For more information, see <link
                    xlink:href="install-guide#chap-repository"
                    xlink:role="http://docbook.org/xlink/role/olink"><citetitle
                    >Installing a Repository for Production</citetitle></link> in
                the <citetitle>Installation Guide</citetitle>.</para>
        </section>

        <section xml:id="disabling-auto-config-updates">
            <title>Disabling Automatic Configuration Updates</title>

            <para>By default, OpenIDM polls the JSON files in the
                <literal>conf</literal> directory periodically for any changes to
                the configuration. In a production system, it is recommended that
                you disable automatic polling for updates to prevent untested
                configuration changes from disrupting your identity service.</para>
            <para>To disable automatic polling for configuration changes, edit the
                <filename>conf/system.properties</filename> file by uncommenting the
                following line:</para>
            <programlisting>
                # openidm.fileinstall.enabled=false
            </programlisting>
            <para>Before you disable automatic polling, you must have started the
                OpenIDM instance at least once to ensure that the configuration has
                been loaded into the database.
            </para>
            <para>Note that scripts are loaded each time the configuration calls the
                script. Modifications to scripts are therefore not applied
                dynamically. If you modify a script, you must either modify the
                configuration that calls the script, or restart the component that
                uses the modified script. You do not need to restart OpenIDM for
                script modifications to take effect.
            </para>
        </section>

        <section xml:id="disabling-file-based-config">
            <title>Disabling the File-Based Configuration View</title>
            <para>To control configuration changes to the OpenIDM system, you
            disable the file-based configuration view and have OpenIDM read its
            configuration only from the repository. To disable the file-based
            configuration view, edit the <filename>conf/system.properties</filename>
            file to uncomment the following line:
            <literal># openidm.fileinstall.enabled=false</literal>. </para>
        </section>
    </section>

 <section xml:id="configuring-over-rest">
  <title>Configuring OpenIDM Over REST</title>
  <indexterm>
   <primary>REST API</primary>
  </indexterm>
  <indexterm>
   <primary>Configuration</primary>
   <secondary>REST API</secondary>
  </indexterm>

  <para>OpenIDM exposes configuration objects under the
  <literal>/openidm/config</literal> context.</para>

  <indexterm>
  <primary>REST API</primary>
  <secondary>Listing configuration objects</secondary>
  </indexterm>
  <para>You can list the configuration on the local host by performing a GET
  <literal>http://localhost:8080/openidm/config</literal>. The following
  example shows the default configuration for an OpenIDM instance started
  with Sample 1.</para>
  <screen>$ curl --request GET 
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 http://localhost:8080/openidm/config

{
    "configurations": [
        {
            "_id": "endpoint/getprocessesforuser",
            "pid": "endpoint.788f364e-d870-4f46-982a-793525fff6f0",
            "factoryPid": "endpoint"
        },
        {
            "_id": "provisioner.openicf/xml",
            "pid": "provisioner.openicf.90b18af9-fe27-45a2-a4ae-1056c04a4d31",
            "factoryPid": "provisioner.openicf"
        },
        {
            "_id": "ui/configuration",
            "pid": "ui.36bb2bf4-8e19-43d2-9df2-a0553ffac590",
            "factoryPid": "ui"
        },
        {
            "_id": "managed",
            "pid": "managed",
            "factoryPid": null
        },
        {
            "_id": "sync",
            "pid": "sync",
            "factoryPid": null
        },
        {
            "_id": "router",
            "pid": "router",
            "factoryPid": null
        },
        {
            "_id": "process/access",
            "pid": "process.44743c97-a01b-4562-85ad-8a2c9b89155a",
            "factoryPid": "process"
        },
        {
            "_id": "endpoint/siteIdentification",
            "pid": "endpoint.ef05a7f3-a420-4fbb-998c-02d283cae4d1",
            "factoryPid": "endpoint"
        },
        {
            "_id": "endpoint/securityQA",
            "pid": "endpoint.e2d87637-c918-4056-99a1-20f25c897066",
            "factoryPid": "endpoint"
        },
        {
            "_id": "scheduler",
            "pid": "scheduler",
            "factoryPid": null
        },
        {
            "_id": "ui/countries",
            "pid": "ui.acde0f4c-808f-45fb-9627-d7d2ca702e7c",
            "factoryPid": "ui"
        },
        {
            "_id": "org.apache.felix.fileinstall/openidm",
            "pid": "org.apache.felix.fileinstall.2dedea63-4592-4074-a709-ffa70f1e841d",
            "factoryPid": "org.apache.felix.fileinstall"
        },
        {
            "_id": "schedule/reconcile_systemXmlAccounts_managedUser",
            "pid": "schedule.f53b235a-862e-4e18-a3cf-10ae3cbabc1e",
            "factoryPid": "schedule"
        },
        {
            "_id": "workflow",
            "pid": "workflow",
            "factoryPid": null
        },
        {
            "_id": "endpoint/getavailableuserstoassign",
            "pid": "endpoint.d19da94f-bae3-4101-922c-fe47ea8616d2",
            "factoryPid": "endpoint"
        },
        {
            "_id": "repo.orientdb",
            "pid": "repo.orientdb",
            "factoryPid": null
        },
        {
            "_id": "audit",
            "pid": "audit",
            "factoryPid": null
        },
        {
            "_id": "endpoint/gettasksview",
            "pid": "endpoint.edcc1ff8-a7ba-4c46-8258-bf5216e85192",
            "factoryPid": "endpoint"
        },
        {
            "_id": "ui/secquestions",
            "pid": "ui.649e2c65-0cc7-4a0d-a6b1-95f4c5168bdc",
            "factoryPid": "ui"
        },
        {
            "_id": "org.apache.felix.fileinstall/activiti",
            "pid": "org.apache.felix.fileinstall.a0ba2f7d-bdb9-43b5-b84e-0e8feee6be72",
            "factoryPid": "org.apache.felix.fileinstall"
        },
        {
            "_id": "policy",
            "pid": "policy",
            "factoryPid": null
        },
        {
            "_id": "endpoint/usernotifications",
            "pid": "endpoint.e96d5319-6260-41db-af76-bd4e692b792d",
            "factoryPid": "endpoint"
        },
        {
            "_id": "org.apache.felix.fileinstall/ui",
            "pid": "org.apache.felix.fileinstall.89f8c6dd-f54e-46a4-bfda-1e76ac044c33",
            "factoryPid": "org.apache.felix.fileinstall"
        },
        {
            "_id": "authentication",
            "pid": "authentication",
            "factoryPid": null
        }
    ]
}</screen>

  <para>Single instance configuration objects are located under
  <literal>openidm/config/<replaceable>object-name</replaceable></literal>.
  The following example shows the default <literal>audit</literal>
  configuration.</para>

  <screen>$ curl
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 http://localhost:8080/openidm/config/audit

{
    "eventTypes": {
        "activity": {
            "filter": {
                "actions": [
                    "create",
                    "update",
                    "delete",
                    "patch",
                    "action"
                ]
            }
        },
        "recon": {}
    },
    "logTo": [
        {
            "logType": "csv",
            "location": "audit",
            "recordDelimiter": ";"
        },
        {
            "logType": "repository"
        }
    ]
}</screen>

  <para>Multiple instance configuration objects are found under
  <literal>openidm/config/<replaceable>object-name</replaceable>/<replaceable
  >instance-name</replaceable></literal>. The following example shows the
  configuration for the XML connector provisioner.</para>

  <screen>$ curl
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 http://localhost:8080/openidm/config/provisioner.openicf/xml

{
    "name": "xmlfile",
    "connectorRef": {
        "bundleName":
            "org.forgerock.openicf.connectors.file.openicf-xml-connector",
        "bundleVersion": "<?eval ${openicfBundleVersion}?>",
        "connectorName": "com.forgerock.openicf.xml.XMLConnector"
    },
    "producerBufferSize": 100,
    "connectorPoolingSupported": true,
    "poolConfigOption": {
        "maxObjects": 10,
        "maxIdle": 10,
        "maxWait": 150000,
        "minEvictableIdleTimeMillis": 120000,
        "minIdle": 1
    },
    "operationTimeout": {
        "CREATE": -1,
        "TEST": -1,
        "AUTHENTICATE": -1,
        "SEARCH": -1,
        "VALIDATE": -1,
        "GET": -1,
        "UPDATE": -1,
        "DELETE": -1,
        "SCRIPT_ON_CONNECTOR": -1,
        "SCRIPT_ON_RESOURCE": -1,
        "SYNC": -1,
        "SCHEMA": -1
    },
    "configurationProperties": {
        "xsdIcfFilePath": "samples/sample1/data/resource-schema-1.xsd",
        "xsdFilePath": "samples/sample1/data/resource-schema-extension.xsd",
        "xmlFilePath": "samples/sample1/data/xmlConnectorData.xml"
    },
    "objectTypes": {
        "account": {
            "$schema": "http://json-schema.org/draft-03/schema",
            "id": "__ACCOUNT__",
            "type": "object",
            "nativeType": "__ACCOUNT__",
            "properties": {
                "description": {
                    "type": "string",
                    "nativeName": "__DESCRIPTION__",
                    "nativeType": "string"
                },
                "firstname": {
                    "type": "string",
                    "nativeName": "firstname",
                    "nativeType": "string"
                },
                "email": {
                    "type": "string",
                    "nativeName": "email",
                    "nativeType": "string"
                },
                "__UID__": {
                    "type": "string",
                    "nativeName": "__UID__"
                },
                "password": {
                    "type": "string",
                    "required": false,
                    "nativeName": "__PASSWORD__",
                    "nativeType": "JAVA_TYPE_GUARDEDSTRING",
                    "flags": [
                        "NOT_READABLE",
                        "NOT_RETURNED_BY_DEFAULT"
                    ]
                },
                "name": {
                    "type": "string",
                    "required": true,
                    "nativeName": "__NAME__",
                    "nativeType": "string"
                },
                "lastname": {
                    "type": "string",
                    "required": true,
                    "nativeName": "lastname",
                    "nativeType": "string"
                }
            }
        }
    },
    "operationOptions": {}
}</screen>

  <para>You can change the configuration over REST by using an HTTP PUT request 
  to modify the required configuration object. The following example modifies 
  the <filename>router.json</filename> file to remove all filters, effectively 
  bypassing any policy validation.</para>
  
  <programlisting language="javascript">$ curl
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 --request PUT
 --data '{
          "filters" : [
             {
                "onRequest" : {
                   "type" : "text/javascript",
                   "file" : "bin/defaults/script/router-authz.js"
                }
              }
           ]
           }'
 "http://localhost:8080/openidm/config/router"
  </programlisting>

  <para>See the <link xlink:href="integrators-guide#appendix-rest"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>REST API
  Reference</citetitle></link> appendix for additional details and
  examples using REST access to update and patch objects.</para>
 </section>
 
  <section xml:id="using-property-substitution">
  <title>Using Property Value Substitution in the Configuration</title>
  <para>In an environment where you have more than one OpenIDM instance, you 
  might require a configuration that is similar, but not identical, across the 
  different OpenIDM hosts. OpenIDM supports variable replacement in its 
  configuration which means that you can modify the effective configuration 
  according to the requirements of a specific environment or OpenIDM instance.</para>
  <itemizedlist><para>Property substitution enables you to achieve the following:</para>
   <listitem><para>Define a configuration that is specific to a single OpenIDM 
   instance, for example, setting the location of the keystore on a particular 
   host.</para></listitem>
   <listitem><para>Define a configuration whose parameters vary between different 
   environments, for example, the URLs and passwords for test, development, 
   and production environments.</para></listitem>
   <listitem><para>Disable certain capabilities on specific nodes. For example, 
   you might want to disable the workflow engine on specific instances.</para>
   </listitem>
  </itemizedlist>
  <para>When OpenIDM starts up, it combines the system configuration, which 
  might contain specific environment variables, with the defined OpenIDM 
  configuration properties. This combination makes up the effective configuration 
  for that OpenIDM instance. By varying the environment properties, you can 
  change specific configuration items that vary between OpenIDM instances or 
  environments.</para>
  
  <para>Property references are contained within the construct 
  <literal>&amp;{ }</literal>. When such references are found, OpenIDM replaces 
  them with the appropriate property value, defined in the 
  <filename>boot.properties</filename> file.</para>
  
  <example>
   <para>The following example defines two separate OpenIDM environments - 
   a development environment and a production environment. You can specify the 
   environment at startup time and, depending on the environment, the database 
   URL is set accordingly.</para>
   
   <para>The environments are defined by adding the following lines to the 
   <filename>conf/boot.properties</filename> file:</para>
   
   <programlisting language="javascript">
   PROD.location=production
   DEV.location=development
   </programlisting>
   
   <para>The database URL is then specified as follows in the 
   <filename>repo.orientdb.json</filename> file:</para>
   
   <programlisting language="javascript">
    {
    "dbUrl" : "local:./db/&amp;{&amp;{environment}.location}-openidm",
    "user" : "admin",
    "poolMinSize" : 5,
    "poolMaxSize" : 20,
    ...
    }
   </programlisting>
   
   <para>The effective database URL is determined by setting the 
   <literal>OPENIDM_OPTS</literal> environment variable when you start OpenIDM. 
   To use the production environment, start OpenIDM as follows:</para>
   
   <screen>
   $ export OPENIDM_OPTS="-Xmx1024m -Denvironment=PROD"
   $ ./startup.sh
   </screen>
   
   <para>To use the development environment, start OpenIDM as follows:</para>
   
   <screen>
   $ export OPENIDM_OPTS="-Xmx1024m -Denvironment=DEV"
   $ ./startup.sh
   </screen>
   
  </example>
  
  <section xml:id="property-substitution-system">
   <title>Using Property Value Substitution With System Properties</title>
  
  <para>You can use property value substitution in conjunction with the system 
  properties, to modify the configuration according to the system on which 
  the OpenIDM instance runs.</para>
  
  <example>
   <para>The following example modifies the <literal>audit.json</literal> file so 
   that the log file is written to the user's directory. The 
   <literal>user.home</literal> property is a default Java System property.</para>
   <programlisting language="javascript">{
    "logTo" : [
        {
            "logType" : "csv",
            "location" : "&amp;{user.home}/audit",
            "recordDelimiter" : ";"
        }
    ]
}
   </programlisting>
  </example>
 
 <para>You can define <emphasis>nested</emphasis> properties (that is a property 
 definition within another property definition) and you can combine system 
 properties and boot properties.</para>
 
 <example>
   <para>The following example uses the <literal>user.country</literal> property, 
   a default Java System property. The example defines specific LDAP ports, 
   depending on the country (identified by the country code) in the 
   <literal>boot.properties</literal> file. The value of the LDAP port (set in 
   the <literal>provisioner.openicf-ldap.json</literal> file) depends on the 
   value of the <literal>user.country</literal> System property.</para>
   <para>The port numbers are defined in the <literal>boot.properties</literal> 
   file as follows:</para>
   <programlisting language="javascript">
   openidm.NO.ldap.port=2389
   openidm.EN.ldap.port=3389
   openidm.US.ldap.port=1389</programlisting>
   <para>The following extract from the 
   <literal>provisioner.openicf-ldap.json</literal> file shows how the value of 
   the LDAP port is eventually determined, based on the System property:</para>
   <programlisting language="javascript">
   "configurationProperties" :
   {
      "credentials" : "Passw0rd",
      "port" : "&amp;{openidm.&amp;{user.country}.ldap.port}",
      "principal" : "cn=Directory Manager",
      "baseContexts" :
         [
            "dc=example,dc=com"
         ],
      "host" : "localhost"
   }
   </programlisting>
 </example>
 
 </section>
 
  <section xml:id="property-substitution-limitations">
   <title>Limitations of Property Value Substitution</title>
   <itemizedlist>
   <para>Note the following limitations when you use property value 
   substitution:</para>
 <listitem><para>You cannot reference complex objects or properties with syntaxes 
 other than String. Property values are resolved from the 
 <literal>boot.properties</literal> file or from the System properties and the 
 value of these properties is always in String format.</para>
 <para>Property substitution of boolean values is currently only supported in 
 stringified format, that is, resulting in <literal>"true"</literal> or 
 <literal>"false"</literal>.
 </para></listitem>
 <listitem><para>Substitution of encrypted property values is currently not 
 supported.</para></listitem>
 <!--  TO DO
 For now, encypted property substitution is not supported. Check and 
 replace with this chunk when it is
 
 <listitem><para>Encryption is performed before the property value substitution. 
 This can be problematic for properties whose values should be encrypted after 
 substitution, for example, passwords.</para>
 <para>To use encrypted values with property substitution break the encrypted 
 object down into separate string properties, as shown in the following 
 example.</para>
 <para>The following extract of the <literal>repo.jdbc.json</literal> file shows 
 the expected encrypted object:</para>
 <programlisting language="javascript">"credentials" : {
    "$crypto" : {
        "value" : {
            "iv" : "6Lk0/4WL8VsobGNCSh7bNQ==",
            "data" : "R0L0E0h8opPFANzb2iYrlg==",
            "cipher" : "AES/CBC/PKCS5Padding",
            "key" : "openidm-sym-default"
        },
        "type" : "x-simple-encryption"
    }
}
 </programlisting>
 <para>To use property substitution for the <literal>iv</literal> and 
 <literal>data</literal> properties, define two string properties in the 
 <literal>boot.properties</literal> file:</para>
 <programlisting language="javascript">
  ldap.credentials.iv=6Lk0/4WL8VsobGNCSh7bNQ==
  ldap.credentials.data=R0L0E0h8opPFANzb2iYrlg==
 </programlisting>
 <para>You can then change the configuration in <literal>repo.jdbc.json</literal>
  as follows:</para>
  <programlisting language="javascript">"credentials" : {
    "$crypto" : {
        "value" : {
            "iv" : "&amp;{ldap.credentials.iv}",
            "data" : "&amp;{ldap.credentials.data}",
            "cipher" : "AES/CBC/PKCS5Padding",
            "key" : "openidm-sym-default"
        },
        "type" : "x-simple-encryption"
    }
}
  </programlisting></listitem>
  -->
 </itemizedlist>
 </section>
 
 </section>
 <!-- Add this section when you have been able to test the example
 </section>
 <section xml:id="optimizing-the-openidm-object-model">
 <title>Optimizing the OpenIDM Object Model</title>
 <para>You can improve performance in specific deployment scenarios by 
 customizing the way in which OpenIDM objects are mapped to the relational 
 database. This section assumes that you are using MySQL as an internal 
 repository (for more information, see 
 <link xlink:href="install-guide#chap-repository"
  xlink:role="http://docbook.org/xlink/role/olink">
  <citetitle>Installing a Repository For Production</citetitle></link>).</para>
  <itemizedlist>
  <para>There are two ways in which OpenIDM objects can be mapped to the 
  relational database tables:</para>
  <listitem><para><emphasis>Using a generic mapping</emphasis>, which allows 
  arbitrary objects to be stored without specific setup or administration.</para>
  <para>The generic mapping facilitates rapid development, and makes system 
  evolution and maintenance simpler by providing a more stable database structure. 
  However, the generic mapping incurs a performance cost because it does not 
  take full advantage of the benefits of a relational database. The object model 
  is not normalized in the traditional sense and there is less flexibility in 
  indexing.</para></listitem>
  <listitem><para><emphasis>Using an explicit mapping</emphasis>, which allows you 
  to optimize storage and queries by explicitly mapping a specific object type to 
  the database.</para>
  <para>The explicit mapping provides a traditional object-relational mapping 
  and can therefore take greater advantage of relational database capabilities. 
  However, an explicit mapping implies that, as an administrator, you must 
  ensure that the mapping and objects remain synchronized at all times, and 
  must manage any migration or upgrade procedures carefully when objects are 
  added or changed. There are currently some limitations to an explicit table 
  mapping, and it has not been extensively tested for managed objects.</para>
  </listitem>
  </itemizedlist>
 <para>Out of the box, OpenIDM uses an explicit mapping for a few specific tables 
 whose structure will remain stable, tables for which easy external queries are 
 required, or tables for which performance is particularly important. Tables for 
 managed objects (such as "managed/user") use a generic mapping by default.</para>
 <para>The generic mapping provided out of the box indexes every property to 
 make it searchable, as shown in the following <literal>repo.jdbc.json</literal> 
 extract:</para>
 <programlisting language="javascript">"credentials" : {
 "genericMapping" : {
            "managed/*" : {
                "mainTable" : "managedobjects", 
                "propertiesTable" : "managedobjectproperties",
                "searchableDefault" : true            
            }
        },
  </programlisting>
 <para>In certain deployments, such a configuration might not 
 meet your performance requirements. You can optimize the performance of the 
 generic mapping by restricting the properties that are indexed (searchable). 
 To do this, change the <literal>searchableDefault</literal> property to 
 <literal>false</literal> and explicitly specify the properties that can be 
 searched by using the <literal>searchable</literal> setting.</para>
 <para>Alternatively, leave the <literal>searchableDefault</literal> property 
 set to <literal>true</literal> and specify which properties should 
 <emphasis>not</emphasis> be indexed by setting the 
 <literal>searchableDefault</literal> property to <literal>false</literal> for 
 those properties.</para>
 <para>The following example creates a separate generic table for managed/user 
 objects and indexes only two properties, <literal>_id</literal> and 
 <literal>username</literal>:</para>
 <programlisting language="javascript">
   "genericMapping" : {
            "managed/user" : {
                "mainTable" : "manageduserobjects", 
                "propertiesTable" : "manageduserobjectproperties",
                "searchableDefault" : false,
                "properties" : {
                    "/_id" : {
                        "searchable" : true
                    },
                    "/username" : {
                        "searchable" : true
                    }
                }            
            }
        },
 </programlisting>
 <para>Another way to optimize performance is to change the mapping 
 configuration to use a different mapping table type. For example, you can 
 change the configuration for a managed object such as "managed/user" to an 
 explicit table mapping, in which you specifically define the columns and 
 indexes. For example:</para>
 <programlisting language="javascript">
  "explicitMapping" : {
            "managed/user" : {
            ...
 </programlisting>
 <orderedlist>
 <para>In general, you should assess the following performance improvement 
 strategies, in order:</para>
 <listitem><para>Optimize the generic mapping by explicitly defining which 
 properties should be searchable.</para></listitem>
 <listitem><para>Place different managed object types in different generic 
 tables (by default, all managed object types are mapped to the 
<literal>managedobjects</literal> and <literal>managedobjectproperties</literal> 
tables).</para></listitem>
<listitem><para>Finally, consider explicit mappings where appropriate.</para></listitem>
</orderedlist>
 </section>
 -->
  
  <section xml:id="adding-custom-endpoints">
    <title>Adding Custom Endpoints</title>
    
    <para>You can customize OpenIDM to meet the specific requirements of your 
    deployment by adding your own RESTful endpoints. Endpoints are configured 
    in files named <filename>conf/endpoint-<replaceable>name</replaceable>.json</filename>,
    where <replaceable>name</replaceable> generally describes the purpose of the 
    endpoint.</para>
    
    <para>A sample custom endpoint configuration is provided at 
    <filename>openidm/samples/customendpoint</filename>. The sample includes 
    two files:</para>
    
    <simplelist>
      <member><filename>conf/endpoint-echo.json</filename>, which provides the 
      configuration for the endpoint.</member>
      <member><filename>script/echo.js</filename>, which is launched when the 
      endpoint is accessed.</member>      
    </simplelist>
    
    <para>The structure of an endpoint configuration file is as follows:</para>
    
    <programlisting language="javascript">
{ 
  "context" : "endpoint/echo", 
  "type" : "text/javascript", 
  "file" : "script/echo.js" 
}    
    </programlisting>
        
    <variablelist>
      <varlistentry>
        <term><literal>"context"</literal></term>
        <listitem>
          <para>The URL context under which the endpoint is registered. 
          Currently this <emphasis>must</emphasis> be under 
          <literal>endpoint/</literal>. An endpoint registered under the 
          context <literal>endpoint/echo</literal> is addressable over REST at 
          <literal>http://localhost:8080/openidm/endpoint/echo</literal> and 
          with the internal resource API, for example 
          <literal>openidm.read("endpoint/echo")</literal>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>"type"</literal></term>
        <listitem>
          <para>The type of implementation. Currently only 
          <literal>"text/javascript"</literal> is supported.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>"source"</literal> or <literal>"file</literal></term>
        <listitem>
          <para>The actual script, inline, or a pointer to the file that 
          contains the script. The sample script, 
          (<filename>samples/customendpoint/script/echo.js</filename>) simply 
          returns the HTTP request when a request is made on that endpoint.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    
    <para>The endpoint script has a <literal>request</literal> variable 
    available in its scope. The request structure carries all the information 
    about the request, and includes the following properties:</para>
    
    <variablelist>
      <varlistentry>
      <term><literal>id</literal></term>
      <listitem>
        <para>The local ID, without the <literal>endpoint/</literal> prefix, 
        for example, <literal>echo</literal>.</para>
      </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>method</literal></term>
        <listitem>
          <para>The requested operation, that is, <literal>create</literal>, 
          <literal>read</literal>, <literal>update</literal>, 
          <literal>delete</literal>, <literal>patch</literal>, 
          <literal>query</literal> or <literal>action</literal>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>params</literal></term>
        <listitem>
         <para>The parameters that are passed in. For example, for an HTTP GET 
         with <literal>?param=x</literal>, the request contains 
         <literal>"params":{"param":"x"}</literal>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>parent</literal></term>
        <listitem>
          <para>Provides the context for the invocation, including headers and 
          security.</para>
          <para>Note that the interface for this context is still evolving and 
          may change in a future release.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    
    <para>A script implementation should check and reject requests for methods 
    that it does not support. For example, the following implementation 
    supports only the <literal>read</literal> method:</para>
    
    <programlisting language="javascript">
if (request.method == "read") {
    ...
} else {
    throw "Unsupported operation: " + request.method;
}
    </programlisting>
    
    <para>The final statement in the script is the return value. Unlike for 
    functions, at this global scope there is no <literal>return</literal> 
    keyword. In the following example, the value of the last statement 
    (<literal>x</literal>) is returned.</para>
    
    <programlisting language="javascript">
var x = "Sample return"
functioncall();
x
    </programlisting>
    
    <para>The following example uses the sample provided in 
    <literal>openidm/samples/customendpoint</literal> and shows the complete 
    request structure, which is returned by the query.</para>
    
    <screen>$ curl
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 --request GET
 "http://localhost:8080/openidm/endpoint/echo?param=x"
{
  "type": "resource",
  "uuid": "21c5ddc6-a66e-464e-9fa4-9b777505799e",
  "params": {
    "param": "x"
  },
  "method": "query",
  "parent": {
    "path": "/openidm/endpoint/echo",
    "headers": {
      "Accept": "*/*",
      "User-Agent": "curl/7.21.4 ... OpenSSL/0.9.8r zlib/1.2.5",
      "Authorization": "Basic b3BlbmlkbS1hZG1pbjpvcGVuaWRtLWFkbWlu",
      "Host": "localhost:8080"
    },
    "query": {
      "param": "x"
    },
    "method": "GET",
    "parent": {
      "uuid": "bec97cbf-8618-42f8-a841-9f5f112538e9",
      "parent": null,
      "type": "root"
    },
    "type": "http",
    "uuid": "7fb3e0d9-5f56-4b15-b710-28f2147cf4b4",
    "security": {
      "openidm-roles": [
        "openidm-admin",
        "openidm-authorized"
      ],
      "username": "openidm-admin",
      "userid": {
        "component": "internal/user",
        "id": "openidm-admin"
      }
    }
  },
  "id": "echo"
} 
    </screen>    
    
    <para>You must protect access to any custom endpoints by configuring the 
    appropriate authorization for those contexts. For more information, see 
    the <link xlink:href="integrators-guide#openidm-authorization" 
    xlink:role="http://docbook.org/xlink/role/olink">
    <citetitle>Authorization</citetitle></link> section.</para>

  </section>
  
</chapter>
