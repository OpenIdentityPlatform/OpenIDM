<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2012 ForgeRock AS
  !    
-->
<chapter xml:id='chap-scheduler-conf'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Scheduling Synchronization</title>
 <indexterm>
  <primary>Scheduler</primary>
 </indexterm>
 <indexterm>
  <primary>Reconciliation</primary>
  <secondary>Scheduling</secondary>
 </indexterm>
 <indexterm>
  <primary>Synchronization</primary>
  <secondary>Scheduling</secondary>
 </indexterm>
 <indexterm>
  <primary>LiveSync</primary>
  <secondary>Scheduling</secondary>
 </indexterm>

 <para>OpenIDM provides scheduling for synchronization operations such as
 LiveSync and reconciliation. You schedule the operations using
 <command>cron</command>-like syntax.</para>
 
 <para>This chapter describes scheduling for reconciliation and LiveSync, 
 however, you can also use OpenIDM's scheduler service to schedule any other 
 event by supplying a link to a script file, in which that event is defined.  
 For more information on scheduling other events, see the 
 <link xlink:href="integrators-guide#appendix-scheduling"
 xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Scheduler
 Reference</citetitle></link> appendix.</para>
 
 <para>You configure the scheduler through JSON objects. The corresponding
 configuration file names take the form <filename>openidm/conf/scheduler-
 <replaceable>schedule-name</replaceable>.json</filename>, where 
 <replaceable>schedule-name</replaceable> is the logical name for the scheduled 
 operation, such as <literal>reconcile_systemXmlAccounts_managedUser</literal>.
 </para>

 <section xml:id="scheduler-configuration-file">
  <title>Scheduler Configuration</title>
  <indexterm>
   <primary>Scheduler</primary>
   <secondary>Configuration</secondary>
  </indexterm>

  <para>The scheduler configuration file, <filename>openidm/conf/scheduler-
  <replaceable>schedule-name</replaceable>.json</filename> has the following 
  format.</para>

  <programlisting language="javascript">{
  "enabled"       : true,
  "persisted"     : false,
  "type"          : "<replaceable>cron</replaceable>",
  "startTime"     : "<replaceable>(optional) time</replaceable>",
  "endTime"       : "<replaceable>(optional) time</replaceable>",
  "schedule"      : "<replaceable>cron expression</replaceable>",
  "timeZone"      : "<replaceable>(optional) time zone</replaceable>",
  "invokeService" : "<replaceable>service identifier</replaceable>",
  "invokeContext" : "<replaceable>service specific context info</replaceable>"
}</programlisting>

  <itemizedlist>
   <listitem>
    <para>The optional properties <literal>"startTime"</literal>,
    <literal>"endTime"</literal>, and <literal>"timeZone"</literal> 
    can be absent, or empty.</para>
    <para>When specifying times and dates, use ISO 8601 format,
    <literal><replaceable>YYYY</replaceable>-<replaceable>MM</replaceable
    >-<replaceable>DD</replaceable>T<replaceable>hh</replaceable>:<replaceable
    >mm</replaceable>:<replaceable>ss</replaceable></literal>.</para>
   </listitem>
   <listitem>
    <para>OpenIDM relies on the Quartz Scheduler. The <replaceable>cron
    expression</replaceable> to use is described in the <link xlink:show="new"
    xlink:href="http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html"
    ><citetitle>CronTrigger Tutorial</citetitle></link> and in <link
    xlink:href="http://www.quartz-scheduler.org/docs/tutorial/TutorialLesson06.html"
    xlink:show="new"><citetitle>Lesson 6: CronTrigger</citetitle></link>.</para>
   </listitem>
   <listitem>
     <itemizedlist>
      <para>The <literal>"invokeService"</literal> property takes one of the 
      following values:</para>
      <listitem><para><literal>"sync"</literal> for reconciliation</para>
      </listitem>
      <listitem><para><literal>"provisioner"</literal> for LiveSync.</para>
      </listitem>
      <listitem><para><literal>"script"</literal> to call some other scheduled 
       operation defined in a script. This is discussed in more detail in the 
       <link xlink:href="integrators-guide#appendix-scheduling" 
       xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Scheduler 
       Reference</citetitle></link> appendix
       </para></listitem>
     </itemizedlist>
   </listitem>
   <listitem>
    <para>The <literal>"invokeContext"</literal> property depends on the
    setting for <literal>"invokeService"</literal>.</para>

    <para>For LiveSync, <literal>"source"</literal> takes an external resource
    name and object type.</para>
    <programlisting language="javascript">
{
    "invokeService": "provisioner",
    "invokeContext": {
        "action": "liveSync",
        "source": "system/ldap/account"
    }
}</programlisting>

    <para>For reconciliation, <literal>"mapping"</literal> takes the name of
    the mapping configured in <filename>openidm/conf/sync.json</filename>.
    </para>
    <programlisting language="javascript">
{
    "invokeService": "sync",
    "invokeContext": {
        "action": "reconcile",
        "mapping": "systemLdapAccounts_managedUser"
    }
}</programlisting>
   </listitem>
  </itemizedlist>
  
  <para>For reconciliation, you can define the mapping in two ways.</para>
  <itemizedlist>
   <listitem>
    <para>Referencing the mapping by its name in <filename>sync.json</filename>
    as shown in the previous example. The mapping must exist in the
    <filename>sync.json</filename> file.</para></listitem>
   <listitem>
    <para>Configuring the mapping in the scheduler configuration by using the
    <literal>"mapping"</literal> property as shown in the example in
    <link xlink:href="integrators-guide#alternative-mapping"
    xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Alternative
    Mappings Location</citetitle></link>.</para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="persistent-schedules">
  <title>Configuring Persistent Schedules</title>
  <para>By default, scheduling information, such as schedule state and details 
  of the schedule execution, is stored in RAM. This means that such 
  information is lost when OpenIDM is rebooted. The scheduler configuration 
  itself (defined in the <filename>openidm/conf/scheduler-
  <replaceable>schedule-name</replaceable>.json</filename> file) is not lost 
  when OpenIDM is shut down, and normal scheduling continues when the server is 
  restarted. However, there are no details of missed schedule executions that 
  should have occurred during the period the server was unavailable.</para>
  <para>You can configure schedules to be persistent, which means that the 
  scheduling information is stored in the internal repository rather than in 
  RAM. With persistent schedules, scheduling information is retained when OpenIDM 
  is shut down. Any previously scheduled jobs can be rescheduled automatically 
  when OpenIDM is restarted.</para>
  <para>Persistent schedules also enable you to manage scheduling across a 
  cluster (multiple OpenIDM instances). When scheduling is persistent, a 
  particular schedule will be executed only once across the cluster, rather than 
  once on every OpenIDM instance. For example, if your deployment includes a 
  cluster of OpenIDM nodes for high availability, you can use persistent 
  scheduling to start a reconciliation action on only one node in the cluster, 
  instead of starting several competing reconciliation actions on each node.</para>
  <para>You can use persistent schedules with the default OrientDB repository, 
  or with the MySQL repository (see <link xlink:href="install-guide#chap-repository"
    xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Installing a 
    Repository For Production</citetitle></link>).
  </para>
  <para>To configure persistent schedules, set the <literal>"persisted"</literal> 
  property to <literal>true</literal> in the schedule configuration file 
  (<filename>scheduler-<replaceable>schedule-name</replaceable>.json)</filename>.
  </para>
  <para>If OpenIDM is down when a scheduled task was set to occur, one or more 
  executions of that schedule might be missed. To specify what action should be 
  taken if schedules are missed, set the <literal>misfirePolicy</literal> in the 
  schedule configuration file. The <literal>misfirePolicy</literal> determines 
  what OpenIDM should do if scheduled tasks are missed. Possible values are as 
  follows:
    </para>
    <itemizedlist>
     <listitem><para><literal>fireAndProceed</literal>. The first execution of 
     a missed schedule is immediately executed when the server is back online. 
     Subsequent executions are discarded. After this, the normal schedule is 
     resumed.</para></listitem>
     <listitem><para><literal>doNothing</literal>. All missed schedules are 
     discarded and the normal schedule is resumed when the server is back 
     online.</para></listitem>
    </itemizedlist>
  </section>

 <section xml:id="scheduler-examples">
  <title>Scheduler Examples</title>
  <indexterm>
   <primary>Scheduler</primary>
   <secondary>Examples</secondary>
  </indexterm>

  <para>The following example shows a schedule for reconciliation that
  is not enabled. When enabled (<literal>"enabled" : true,</literal>),
  reconciliation runs every 30 minutes, starting on the hour.</para>

  <programlisting language="javascript">
{
    "enabled": false,
    "persisted": false,
    "type": "cron",
    "schedule": "0 0/30 * * * ?",
    "invokeService": "sync",
    "invokeContext": {
        "action": "reconcile",
        "mapping": "systemLdapAccounts_managedUser"
    }
}</programlisting>

  <para>The following example shows a schedule for LiveSync enabled to run 
  every 15 seconds, starting at the beginning of the minute. The schedule is 
  persisted, that is, stored in the internal repository rather than in memory. 
  If one or more LiveSync executions are missed, as a result of OpenIDM being 
  unavailable, the first execution of the LiveSync action is executed when the 
  server is back online. Subsequent executions are discarded. After this, the 
  normal schedule is resumed.</para>

  <programlisting language="javascript">
{
    "enabled": false,
    "persisted": true,
    "misfirePolicy" : "fireAndProceed",
    "type": "cron",
    "schedule": "0/15 * * * * ?",
    "invokeService": "provisioner",
    "invokeContext": {
        "action": "liveSync",
        "source": "system/ldap/account"
    }
}</programlisting>

 </section>
</chapter>
