<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2015 ForgeRock AS
  !    
-->
<chapter xml:id='chap-auditing'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Using Audit Logs</title>
 <indexterm>
  <primary>Audit logs</primary>
 </indexterm>

 <para>
  The OpenIDM auditing service can publish and log all relevant system activity
  to one or more specified targets. Auditing can include data from
  reconciliation operations as a basis for reporting, access details, and
  activity logs that capture operations on internal (managed) objects and
  external (system) objects. Auditing provides the data for all the relevant
  reports, including orphan account reports.
 </para>
 <!--
 For instructions on setting up an external reporting engine with OpenIDM,
 see the chapter on <link xlink:href="integrators-guide#chap-reporting"
 xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Generating
 Reports</citetitle></link>.
  -->

 <para>
  The auditing service enables you to push auditing data to local files,  to
  the OpenIDM repository, and to a remote system.
 </para>
 <para>
  Audit files can also be queried over the REST interface. For information, see
  the section on
  <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
  xlink:href="integrators-guide#querying-recon-logs"><citetitle>Querying the
  Reconciliation Audit Log</citetitle></link>.
 </para>

 <section xml:id="audit-log-types">
  <title>Audit Log Event Types</title>
  <variablelist>
   <para>
    OpenIDM logs the following audit events:
   </para>
   <varlistentry>
    <term>Access Log</term>
    <listitem>
     <para>
      OpenIDM writes messages concerning access to the REST API in this log.
     </para>
     <para>Default file: <filename>openidm/audit/access.csv</filename></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Activity Log</term>
    <listitem>
     <para>
      OpenIDM logs operations on internal (managed) and external (system)
      objects to this log.
     </para>
     <para>
      Entries in the activity log contain identifiers, both for the action that
      triggered the activity, and also for the original caller and the
      relationships between related actions.
     </para>
     <para>Default file: <filename>openidm/audit/activity.csv</filename></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Reconciliation Log</term>
    <listitem>
     <para>
      OpenIDM logs the results of a reconciliation run to this log (including
      situations and the resulting actions taken). The activity log contains
      details about the actions, where log entries display parent activity
      identifiers, <literal>recon/<replaceable>reconID</replaceable></literal>.
     </para>
     <para>Default file: <filename>openidm/audit/recon.csv</filename></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Synchronization Log</term>
    <listitem>
     <para>
      OpenIDM logs the results of automatic synchronization operations (LiveSync
      and implicit synchronization) to this log, including situations and the
      actions taken on each object. The activity log contains additional detail
      about the actions.
     </para>
     <para>Default file: <filename>openidm/audit/sync.csv</filename></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   When an action happens related to a higher level business function, the log
   entry points to the parent activity for that function. The relationships are
   hierarchical. For example, a synchronization operation might result from a
   scheduled reconciliation operation for an object type. OpenIDM also logs the
   top level root activity with each log entry, making it possible to query
   related activities.
  </para>
 </section>

 <section xml:id="audit-log-format">
  <title>Audit Log Formats</title>
  <para>
   This section describes the format of each audit event type, to assist you
   with mapping audit logs to the reports you generate.
  </para>
  <variablelist xml:id="audit-access-fields">
   <title>Access Log Fields</title>
   <para>
    The access log includes the following information:
   </para>
   <varlistentry>
    <term><literal>"_id"</literal></term>
    <listitem>
     <para>
      UUID for the message object, such as
      <literal>"0419d364-1b3d-4e4f-b769-555c3ca098b0"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"action"</literal></term>
    <listitem>
     <para>
      Action requested, such as <literal>"authenticate"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"ip"</literal></term>
    <listitem>
     <para>
      IP address of the client. For access from the local host, this can appear
      for example as <literal>"0:0:0:0:0:0:0:1%0"</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"principal"</literal></term>
    <listitem>
     <para>
      Principal (username) requesting the operation, such as
      <literal>"openidm-admin"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"roles"</literal></term>
    <listitem>
     <para>
      Any roles associated with the principal, such as
      <literal>"[openidm-admin, openidm-authorized]"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"status"</literal></term>
    <listitem>
     <para>
      Result of the operation, such as <literal>"SUCCESS"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"timestamp"</literal></term>
    <listitem>
     <para>
      The time that OpenIDM logged the message, in UTC format, for example
      <literal>"2015-05-18T08:48:00.160Z"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"userid"</literal></term>
    <listitem>
     <para>
      The ID (<literal>_id</literal>) of the user requesting the operation, such
      as <literal>openidm-admin</literal>, <literal>jdoe</literal> or a UUID
      that has been generated by the server, such as
      <literal>"0d7532e2-2b45-420e-b10e-c35684c633fd"</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="audit-activity-fields">
   <title>Activity Log Fields</title>
   <para>
    The activity log includes the following information for each entry:
   </para>
   <varlistentry>
    <term><literal>"_id"</literal></term>
    <listitem>
     <para>
      UUID for the message object, such as
      <literal>"0419d364-1b3d-4e4f-b769-555c3ca098b0"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"action"</literal></term>
    <listitem>
     <para>
      Action performed on that entry, such as <literal>"create"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"activityId"</literal></term>
    <listitem>
     <para>
      UUID of the activity corresponding to the UUID of the resource context
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"after"</literal></term>
    <listitem>
     <para>
      JSON representation of the object that results from the activity
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"before"</literal></term>
    <listitem>
     <para>
      JSON representation of the object prior to the activity
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"changedFields"</literal></term>
    <listitem>
     <para>
      List of the fields that were changed as a result of the activity
     </para>
     <para>
      This list takes into consideration only those fields that have been
      configured as <literal>"watchedFields"</literal> in the
      <filename>conf/audit.json</filename> file.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"message"</literal></term>
    <listitem>
     <para>
      Human readable text about the activity
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"objectId"</literal></term>
    <listitem>
     <para>
      Object identifier, such as <literal>"managed/user/jdoe"</literal> or
      <literal>"managed/user/38e29216-4b0e-4701-8a6f-ed8bf69692c7"</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"parentActionId"</literal></term>
    <listitem>
     <para>
      UUID of the action leading to the activity
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"passwordChanged"</literal></term>
    <listitem>
     <para>
      Boolean (<literal>true</literal> or <literal>false</literal>) indicating
      whether the action resulted in a password change
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"requester"</literal></term>
    <listitem>
     <para>
      Principal requesting the operation
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"rev"</literal></term>
    <listitem>
     <para>Object revision number</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"rootActionId"</literal></term>
    <listitem>
     <para>
      UUID of the root cause for the activity. This matches a corresponding
      <literal>"rootActionId"</literal> in a reconciliation message.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"status"</literal></term>
    <listitem>
     <para>Result of the operation, such as <literal>"SUCCESS"</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"timestamp"</literal></term>
    <listitem>
     <para>
      Time that OpenIDM logged the message, in UTC format, for example
      <literal>"2015-05-18T08:48:00.160Z"</literal>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="audit-recon-fields">
   <title>Reconciliation Log Fields</title>
   <para>Reconciliation log messages include the following information:</para>
   <varlistentry>
    <term><literal>"_id"</literal></term>
    <listitem>
     <para>
      UUID for the message object, such as
      <literal>"0419d364-1b3d-4e4f-b769-555c3ca098b0"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"action"</literal></term>
    <listitem>
     <para>
      Synchronization action, such as <literal>"CREATE"</literal>.
     </para>
     <para>
      For more information, see the section that describes the <link
      xlink:href="integrators-guide#sync-actions"
      xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Synchronization
      Actions</citetitle></link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"actionID"</literal></term>
    <listitem>
     <para>
      The unique ID assigned to the action
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"ambiguousTargetObjectIds"</literal></term>
    <listitem>
     <para>
      When the situation is AMBIGUOUS or UNQUALIFIED and OpenIDM cannot
      distinguish between more than one target object, OpenIDM logs the
      identifiers of the objects in this field, in comma-separated format. This
      makes it possible to figure out what was ambiguous.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"entryType"</literal></term>
    <listitem>
     <para>
      The type of reconciliation log entry, such as <literal>"start"</literal>,
      or <literal>"summary"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"exception"</literal></term>
    <listitem>
     <para>
      The stack trace of the exception, if any
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"mapping"</literal></term>
    <listitem>
     <para>
      The name of the mapping that was used for the reconciliation (defined in
      <filename>conf/sync.json</filename>), for example
      <literal>"systemLdapAccounts_managedUser"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"message"</literal></term>
    <listitem>
     <para>
      Human readable text about the reconciliation action that was taken
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"messageDetail"</literal></term>
    <listitem>
     <para>
      For the <literal>"summary"</literal> entry type, this field contains
      details about that specific stage of the reconciliation run, such as the
      stage name and description, start and end time, and so forth.
     </para>
     <para>
      When script exceptions are encountered during a reconciliation run,
      the error details can also be stored in this property.
     </para>
     <para>
      For script exception details to be pulled in, the script exception must
      take the following format:
     </para>
     <programlisting language="javascript">"throw {
    'openidmCode' : <replaceable>HTTP error code</replaceable>,
    'message' : <replaceable>error message</replaceable>,
    'detail' : {
        <replaceable>details</replaceable>
    }
};"
     </programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"reconId"</literal></term>
    <listitem>
     <para>
      UUID for the reconciliation operation
     </para>
     <para>
      This is the same for all entries that pertain to the reconciliation run.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"reconciling"</literal></term>
    <listitem>
     <para>
      What OpenIDM is reconciling, <literal>"source"</literal> for the first
      phase, <literal>"target"</literal> for the second phase
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"rootActionId"</literal></term>
    <listitem>
     <para>
      The UUID of the root cause for the activity
     </para>
     <para>
      This matches a corresponding <literal>"rootActionId"</literal> in an
      activity message.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"situation"</literal></term>
    <listitem>
     <para>
      The situation encountered.
     </para>
     <para>
      For more information, see the section that describes the
      <link xlink:href="integrators-guide#sync-situations"
      xlink:role="http://docbook.org/xlink/role/olink">synchronization
      situations</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"sourceObjectId"</literal></term>
    <listitem>
     <para>
      The object identifier on the source system, such as
      <literal>"system/xmlfile/account/bjensen"</literal> or
      <literal>"managed/user/bjensen"</literal> (depending on the resource
      that is configured as the source in the mapping).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"status"</literal></term>
    <listitem>
     <para>
      Result of the operation, such as <literal>"SUCCESS"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"targetObjectId"</literal></term>
    <listitem>
     <para>
      The object identifier on the target system, such as
      <literal>"system/xmlfile/account/bjensen"</literal> or
      <literal>"managed/user/bjensen"</literal> (depending on the resource
      that is configured as the target in the mapping).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"timestamp"</literal></term>
    <listitem>
    <para>
     The time that OpenIDM logged the message, in UTC format, for example
     <literal>"2015-05-18T08:48:00.160Z"</literal>
    </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="audit-sync-fields">
   <title>Synchronization Log Fields</title>
   <para>Synchronization log messages include the following information:</para>
   <varlistentry>
    <term><literal>"_id"</literal></term>
    <listitem>
     <para>
      UUID for the message object, such as
      <literal>"9349accd-b3ee-451c-8e87-0412efdac627"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"action"</literal></term>
    <listitem>
     <para>
      Synchronization action, such as <literal>"CREATE"</literal>. For more
      information, see the section that describes <link xlink:show="new"
      xlink:href="integrators-guide#sync-actions"
      xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Synchronization
      Actions</citetitle></link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"actionID"</literal></term>
    <listitem>
     <para>
      The unique ID assigned to the action.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"exception"</literal></term>
    <listitem>
     <para>
      The stack trace of the exception, if any.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"linkQualifier"</literal></term>
    <listitem>
     <para>
      The link qualifier applied to the action. Link qualifiers enable you to
      manage one to many relationships in mappings. For more information about
      link qualifiers, see <link xlink:show="new"
      xlink:href="integrators-guide#mapping-link-qualifiers"
      xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Using
      Link Qualifiers in a Mapping</citetitle></link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"mapping"</literal></term>
    <listitem>
     <para>
      The name of the mapping used for the synchronization operation (defined in
      <filename>conf/sync.json</filename>, for example
      <literal>"systemLdapAccounts_managedUser"</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"message"</literal></term>
    <listitem>
     <para>
      Human readable text about the synchronization action that was taken.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"messageDetail"</literal></term>
    <listitem>
     <para>
      When script exceptions are encountered during a synchronization operation,
      the error details can be stored in this property.
     </para>
     <para>
      For script exception details to be pulled in, the script exception must
      take the following format:
     </para>
     <programlisting>
      "throw {
      'openidmCode' : <replaceable>HTTP error code</replaceable>,
      'message' : <replaceable>error message</replaceable>,
      'detail' : {
      <replaceable>details</replaceable>
      }
      };"
     </programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"rootActionId"</literal></term>
    <listitem>
     <para>
      UUID of the root cause for the activity. This matches a corresponding
      <literal>"rootActionId"</literal> in an activity message.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"situation"</literal></term>
    <listitem>
     <para>
      The situation encountered for each object. For more information, see the
      section that describes the <link
      xlink:href="integrators-guide#sync-situations"
      xlink:role="http://docbook.org/xlink/role/olink">synchronization
      situations</link>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"sourceObjectId"</literal></term>
    <listitem>
     <para>
      The object identifier on the source system, such as
      <literal>"system/ldap/account/uid=bjensen,ou=People,dc=example,dc=com"</literal>
      or <literal>"managed/user/bjensen"</literal> (depending on the resource
      that is configured as the source in the mapping).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"status"</literal></term>
    <listitem>
     <para>
      The result of the synchronization operation, such as
      <literal>"SUCCESS"</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"targetObjectId"</literal></term>
    <listitem>
     <para>
      The object identifier on the target system, such as
      <literal>"uid=bjensen,ou=People,dc=example,dc=com"</literal> or
      <literal>"managed/user/bjensen"</literal> (depending on the resource
      configured as the target in the mapping).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"timestamp"</literal></term>
    <listitem>
     <para>
      The time that OpenIDM logged the message, in UTC format, for example
      <literal>"2015-05-28T13:48:00.160Z"</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="audit-configuration">
  <title>Configuring the Audit Service</title>
  <para>
   OpenIDM exposes the audit logging configuration under
   <literal>https://localhost:8443/openidm/config/audit</literal> for the REST
   API, and in the file
   <filename><replaceable>project-dir</replaceable>/conf/audit.json</filename>.
  </para>
  <para>
   A sample <filename>conf/audit.json</filename> configuration file follows:
  </para>
  <programlisting language="javascript">{
    "eventTypes" : {
        "activity" : {
            "filter" : {
                "actions" : [
                    "create",
                    "update",
                    "delete",
                    "patch",
                    "action"
                ]
            },
            "watchedFields" : [ ],
            "passwordFields" : [ "password" ]
        },
        "recon" : { }
    },
    "logTo" : [
        {
            "logType" : "csv",
            "location" : "audit",
            "ignoreLoggingFailures" : true
        },
        {
            "logType" : "repository",
            "useForQueries" : true,
            "ignoreLoggingFailures" : true
        }
    ],
    "exceptionFormatter" : {
        "type" : "text/javascript",
        "file" : "bin/defaults/script/audit/stacktraceFormatter.js"
    }
}</programlisting>

  <variablelist>
   <para>
    The <filename>audit.json</filename> file includes the following configurable
    parameters:
   </para>
   <varlistentry>
    <term><literal>eventTypes</literal></term>
    <listitem>
     <para>
      By default, OpenIDM writes all event types to the audit log. The
      <literal>eventTypes</literal> parameter enables you to customize the level
      of information that is logged, per event type. For more information, see
      <xref linkend="filtering-audit-events" />.
     </para>
     <para>
      The following event types are logged:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <literal>access</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>activity</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>recon</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>sync</literal>
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>logTo</literal></term>
    <listitem>
     <para>
      The <literal>logTo</literal> parameter enables you to specify the format
      of the log, where it is written, and various parameters for each event
      type.
     </para>
     <para>
      For more information, see <xref linkend="directing-log-output" />.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="audit-exception-formatter">
    <term><literal>exceptionFormatter</literal></term>
    <listitem>
     <para>
      The <literal>exceptionFormatter</literal> parameter enables you to specify
      the name and type of script file that handles the formatting and display
      of exceptions that are thrown by the audit logger.
     </para>
     <para>
      <literal>"type"</literal> specifies the script type. Supported types
      include <literal>"text/javascript"</literal> and
      <literal>"groovy"</literal>.
     </para>
     <para>
      <literal>"file"</literal> provides the path to the script file that
      performs the formatting. The default exception formatter is
      <literal>"bin/defaults/script/audit/stacktraceFormatter.js"</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <section xml:id="filtering-audit-events">
   <title>Filtering Audit Logs Per Event Type</title>
   <para>
    The audit configuration, defined in the <filename>audit.json</filename>
    file, includes a <literal>filter</literal> parameter that enables you to
    specify what should be logged, per event type. The information that is
    logged can be filtered in various ways. The following sections describe the
    filters that can be applied to each event type.
   </para>

   <section xml:id="filtering-by-field">
    <title>Filtering Audit Entries by Field</title>
    <para>
     You can add a <literal>filter</literal> <literal>fields</literal> list
     to the audit configuration, that enables you to filter log entries by
     specific fields. For example, you might want to restrict the reconciliation
     audit log so that only summary information is logged for each
     reconciliation operation. The following addition to the
     <filename>audit.json</filename> file specifies that entries are logged in
     the reconciliation log only if their <literal>entryType</literal> is
     <literal>start</literal> or <literal>summary</literal>.
    </para>
    <programlisting language="javascript">"eventTypes" : {
    "recon" : {
        "filter" : {
            "fields" : [
                {
                    "name" : "entryType",
                    "values" : [ "start", "summary" ]
                }
            ]
        }
    },
...</programlisting>
   </section>

   <section xml:id="filtering-by-action">
    <title>Filtering Audit Entries by Action</title>
    <para>
     The <literal>filter</literal> <literal>actions</literal> list enables you
     to specify the actions that are logged, per event type. This filter is
     essentially a <literal>fields</literal> filter (as described in <xref
     linkend="filtering-by-field" />) that filters log entries by the value of
     their <literal>action</literal> field.
    </para>
    <para>
     The following configuration specifies that only create, update, delete,
     patch, and action operations are logged in the activity log:
    </para>
    <programlisting>"eventTypes" : {
    "activity" : {
        "filter" : {
            "actions" : [
                "create",
                "update",
                "delete",
                "patch",
                "action"
            ]
        },
    ...</programlisting>
    <para>
     If an event type is not included in the list of
     <literal>eventTypes</literal>, or if no <literal>actions</literal> filter
     is specified for an event type (for example
     <literal>"recon" : { }</literal>), all actions for that event type are
     logged.
    </para>
    <para>
     The list of actions that can be filtered into the log depend on the event
     type. The following table lists the actions that can be filtered, per
     event type.
    </para>
    <table>
     <title>Actions that can be Logged Per Event Type</title>
     <tgroup cols="3">
      <colspec colnum="1" colname="col1" colwidth="1*"/>
      <colspec colnum="2" colname="col2" colwidth="1*"/>
      <colspec colnum="3" colname="col3" colwidth="4*"/>
      <thead>
       <row>
        <entry>Event Type</entry>
        <entry>Actions</entry>
        <entry>Description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry morerows="6">Activity</entry>
        <entry><literal>read</literal></entry>
        <entry>
         <para>
         When an object is read by using its identifier. By default, read
         actions are not logged. Add the <literal>"read"</literal> action to the
         list of actions to log all read actions.
         </para>
         <para>
          Note that due to the potential result size in the case of read
          operations on <literal>system/</literal> endpoints, only the read is
          logged, and not the resource detail. If you really need to log the
          complete resource detail, add the following line to your
          <filename>conf/boot/boot.properties</filename> file:
         </para>
         <programlisting>openidm.audit.logFullObjects=true</programlisting>
        </entry>
       </row>
       <row>
        <entry><literal>create</literal></entry>
        <entry>
         <para>
          When an object is created.
         </para>
        </entry>
       </row>
       <row>
        <entry><literal>update</literal></entry>
        <entry>
         <para>
          When an object is updated.
         </para>
        </entry>
       </row>
       <row>
        <entry><literal>delete</literal></entry>
        <entry>
         <para>
          When an object is deleted.
         </para>
        </entry>
       </row>
       <row>
        <entry><literal>patch</literal></entry>
        <entry>
         <para>
          When an object is partially modified.
         </para>
        </entry>
       </row>
       <row>
        <entry><literal>query</literal></entry>
        <entry>
         <para>
          When a query is performed on an object. By default, query actions are
          not logged. Add the <literal>"query"</literal> action to the list of
          actions to log all query actions.
         </para>
         <para>
          Note that, due to the potential result size in the case of query
          operations on <literal>system/</literal> endpoints, only the query is
          logged, and not the resource detail. If you really need to log the
          complete resource detail, add the following line to your
          <filename>conf/boot/boot.properties</filename> file:
         </para>
         <programlisting>openidm.audit.logFullObjects=true</programlisting>
        </entry>
       </row>
       <row>
        <entry><literal>action</literal></entry>
        <entry>
         <para>
          When an action is performed on an object.
         </para>
        </entry>
       </row>
       <row>
        <entry morerows="6">Recon and Sync</entry>
        <entry><literal>create</literal></entry>
        <entry>When a target object is created.</entry>
       </row>
       <row>
        <entry><literal>delete</literal></entry>
        <entry>When a target object is deleted.</entry>
       </row>
       <row>
        <entry><literal>update</literal></entry>
        <entry>When a target object is updated.</entry>
       </row>
       <row>
        <entry><literal>link</literal></entry>
        <entry>When a link is created between a source object and an existing
         target object.</entry>
       </row>
       <row>
        <entry><literal>unlink</literal></entry>
        <entry>When a link is removed between a source object and a target
         object.</entry>
       </row>
       <row>
        <entry><literal>exception</literal></entry>
        <entry>When the synchronization situation results in an exception. For
        more information, see <link xlink:show="new"
        xlink:href="integrators-guide#handling-sync"
        xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Synchronization
        Situations and Actions</citetitle></link>.</entry>
       </row>
       <row>
        <entry><literal>ignore</literal></entry>
        <entry>When the target object is ignored, that is, no action is taken.
        </entry>
       </row>
       <row>
        <entry>Access</entry>
        <entry><literal>-</literal></entry>
        <entry>No actions can be specified for the access log.</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </section>

   <section xml:id="filtering-by-trigger">
    <title>Filtering Audit Entries by Trigger</title>
    <para>
     You can add a <literal>filter</literal> <literal>triggers</literal> list
     to the audit configuration, that specifies the actions that will be logged
     for a specific trigger. For example, the following addition to the
     <filename>audit.json</filename> file specifies that only
     <literal>create</literal> and <literal>update</literal> actions are logged
     for in the activity log, for an activity that was triggered by a
     <literal>recon</literal>.
    </para>
    <programlisting language="javascript">"eventTypes" : {
    "activity" : {
        "filter" : {
            "actions" : [
            ...
            ],
            "triggers" : {
                "recon" : [
                    "create",
                    "update"
                ]
            }
    ...</programlisting>
    <para>
     If a trigger is provided, but no actions are specified, nothing is logged
     for that trigger. If a trigger is omitted, all actions are logged for that
     trigger. In the current OpenIDM release, only the <literal>recon</literal>
     trigger is implemented. For a list of reconciliation actions that can be
     logged, see <link xlink:href="integrators-guide#sync-actions"
     xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Synchronization
     Actions</citetitle></link>.
    </para>
   </section>



   <section xml:id="audit-watched-fields">
    <title>Defining Specific Fields to Monitor</title>
    <para>
     <emphasis>For the activity log only</emphasis>, you can specify fields
     whose values are considered particularly important in terms of logging.
    </para>
    <para>
     The <literal>watchedFields</literal> parameter, configured in the
     <literal>audit.json</literal> file, is not really a filtering mechanism,
     but enables you to define a list of properties that should be monitored for
     changes. When the value of one of the properties in this list changes, the
     change is logged in the activity log, under the column
     <literal>"changedFields"</literal>. This parameter enables you to have
     quick access to important changes in the log.
    </para>
    <para>
     Properties to monitor are listed as values of the
     <literal>watchedFields</literal> parameter, separated by commas, for
     example:
    </para>
    <screen>"watchedFields" : [ "email", "address" ]</screen>
    <para>
     You can monitor changes to any field in this way. In addition, the
     <literal>passwordFields</literal> parameter enables you to specify a list
     of properties that are considered to be passwords. This parameter functions
     much like the <literal>watchedFields</literal> parameter in that changes to
     these property values are logged in the activity log, under the column
     <literal>"changedFields"</literal>. In addition, when a password property
     is changed, the boolean <literal>"passwordChanged"</literal> flag is set to
     <literal>true</literal> in the activity log. Properties that should be
     considered as passwords are listed as values of the
     <literal>passwordFields</literal> parameter, separated by commas. For
     example:
    </para>
    <screen>"passwordFields" : [ "password", "username" ]</screen>
   </section>

   <section xml:id="audit-filter-scripts">
    <title>Using a Script to Filter Audit Data</title>
    <para>
     Apart from the audit filtering options described in the previous sections,
     you can use a Groovy or Javascript script to specify what is logged in your
     audit logs. Audit filter scripts are referenced in the audit configuration
     file (<filename>conf/audit.json</filename>), and can be configured per
     event type. The following sample configuration references a script named
     <filename>auditfilter.js</filename>, which is used to limit what is logged
     in the reconciliation audit log:
    </para>
    <programlisting language="javascript">{
    "eventTypes" : {
        ...
        "recon" : {
            "filter" : {
                "script" : {
                    "type" : "text/javascript",
                    "file" : "auditfilter.js"
                }
            }
        }
    },
...
}</programlisting>
    <para>
     OpenIDM makes the <literal>request</literal> and <literal>context</literal>
     objects available to the script. Before the audit record is written, it can
     be accessed as a <literal>request.content</literal> object. For more
     information, see <link xlink:show="new"
     xlink:href="integrators-guide#scripting-configuration"
     xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Scripting
     Configuration</citetitle></link> in the <citetitle>Scripting
     Appendix</citetitle>.
    </para>
    <para>
     For example, to set up a script to log just the summary records for mapping
     managed users in an LDAP data store, you could include the following in the
     <filename>auditfilter.js</filename> script:
    </para>
    <programlisting language="javascript">(function() {
     return request.content.entryType == 'summary' &amp;&amp;
     request.content.mapping == 'systemLdapAccounts_managedUser'
     }());
    </programlisting>
    <para>
     The script must return <literal>true</literal> to include the log entry;
     <literal>false</literal> to exclude it.
    </para>
   </section>
  </section>

  <section xml:id="directing-log-output">
   <title>Directing Log Output</title>
   <para>
    The <literal>logTo</literal> parameter, defined in the
    <literal>audit.json</literal> file, enables you to specify the format of the
    audit logs, where they are written, and various parameters for each log
    output type.
   </para>
   <para>
    A basic <literal>logTo</literal> configuration follows:
   </para>
   <programlisting language="javascript">"logTo" : [
    {
        "logType" : "csv",
        "location" : "audit",
        "ignoreLoggingFailures" : true
    },
    {
        "logType" : "repository",
        "useForQueries" : true,
        "ignoreLoggingFailures" : true
    }
],</programlisting>
   <variablelist>
    <para>
     You can configure the following elements in the <literal>logTo</literal>
     parameter:
    </para>
    <varlistentry>
     <term><literal>logType</literal></term>
     <listitem>
      <para>
       The format of the audit log. The log type can be one of the following:
      </para>
       <itemizedlist>
        <listitem>
         <para>
          <literal>csv</literal> - write to a comma-separated variable format
          file.
         </para>
         <para>
          The <literal>"location"</literal> property indicates the name of the
          directory in which the file should be written, relative to the
          directory in which you installed OpenIDM.
         </para>
         <para>
          You can use property value substitution to direct logs to another
          location on the file system. The example shown in <link xlink:show="new"
          xlink:role="http://docbook.org/xlink/role/olink"
          xlink:href="integrators-guide#custom-audit-log-location"><citetitle>Custom
          Audit Log Locations</citetitle></link> shows how to direct audit logs
          to a user home directory.
         </para>
         <para>
          Audit file names are fixed, <filename>access.csv</filename>,
          <filename>activity.csv</filename>, <filename>recon.csv</filename>, and
          <filename>sync.csv</filename>.
         </para>
         <para>
          The <literal>"recordDelimiter"</literal> property enables you to
          specify the character that represents a new line for the system that
          hosts the CSV file.
         </para>
         <para>
          If you set <literal>"recordDelimiter"</literal> to <literal>""</literal>,
          the Java line separator property on the local OpenIDM system will be
          used.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>repository</literal> - write to the OpenIDM repository.
         </para>
         <para>
          OpenIDM stores log entries under the
          <literal>/openidm/repo/audit/</literal> context. Such entries appear
          as <literal>audit/access/<replaceable>_id</replaceable></literal>,
          <literal>audit/activity/<replaceable>_id</replaceable></literal>,
          <literal>audit/recon/<replaceable>_id</replaceable></literal>, and
          <literal>audit/sync/<replaceable>_id</replaceable></literal>, where
          the <replaceable>_id</replaceable> is the UUID of the entry, such as
          <literal>0419d364-1b3d-4e4f-b769-555c3ca098b0</literal>.
         </para>
         <para>
          In the OrientDB repository, OpenIDM stores log entries in the
          <literal>audit_access</literal>, <literal>audit_activity</literal>,
          <literal>audit_recon</literal>, and <literal>audit_sync</literal>
          tables.
         </para>
         <para>
          In a JDBC repository, OpenIDM stores log entries in the
          <literal>auditaccess</literal>, <literal>auditactivity</literal>,
          <literal>auditrecon</literal>, and <literal>auditsync</literal>
          tables.
         </para>
         <para>
          The <literal>"useForQueries"</literal> boolean property indicates
          whether the repository logger should be used to service read and
          query requests. The value is <literal>true</literal> by default. If
          <literal>"useForQueries"</literal> is set to <literal>false</literal>,
          the CSV file is used to service read and query requests.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>router</literal> - enables log events to be
          directed to any endpoint in the system, such as
          <literal>system/scriptedsql</literal> or
          <literal>custom-endpoint/myhandler</literal>.
         </para>
         <para>
          For more information, see <xref linkend="audit-remote-logging" />.
         </para>
         <para>
          The <literal>location</literal> specifies the relative directory, and
          <literal>useForQueries</literal> defines whether the logger is used
          to service read and query requests.
         </para>
        </listitem>
       </itemizedlist>
      </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ignoreLoggingFailures</literal></term>
     <listitem>
      <para>
       In certain situations, you might want to tolerate the inability to write
       to an audit log and prevent an exception from being thrown if the logging
       fails. For example, a request for configuration data might succeed, but
       fail to write to the activity log. Reasons for logging failures might
       include full disk (for a CSV logger) or repository unavailable (for a
       repository logger).
      </para>
      <para>
       For each log type, you can specify that failure to write to the log
       should be ignored, and should not prevent the successful execution of the
       underlying request. To ignore logging failures for a specific log type,
       add the <literal>"ignoreLoggingFailures"</literal> property to the log
       type configuration, and set its value to <literal>true</literal>. This
       parameter is not included in the default <literal>audit.json</literal>
       file, and its value is considered to be <literal>false</literal> by
       default for all log types.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <section xml:id="audit-remote-logging">
    <title>Logging to a Remote System</title>
    <para>
     The audit service enables you to log to a variety of locations, including
     an external system. To log to a remote system, set the
     <literal>logType</literal> parameter in the <filename>audit.json</filename>
     file to <literal>"router"</literal> and specify the endpoint, either a
     system endpoint or a custom endpoint, with the <literal>location</literal>
     parameter.
    </para>
    <para>
     A sample configuration for remote logging is provided in the
     <filename>openidm/samples/audit-sample</filename> directory, and described
     in the <citetitle>Installation Guide</citetitle> in the section
     <link xlink:show="new" xlink:href="install-guide#audit-config-files"
     xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Demonstrate
     Extended Audit Capabilities</citetitle></link>. This sample directs log
     output to a JDBC repository. The audit configuration file
     (<filename>conf/audit.json</filename>) for the sample shows the following
     <literal>logTo</literal> configuration:
    </para>
    <programlisting language="javascript">"logTo" : [
    {
        "logType" : "csv",
        "location" : "audit"
    },
    {
        "logType" : "router",
        "location" : "system/auditdb",
        "useForQueries" : true
    }
],  </programlisting>
    <para>
     The <literal>"location"</literal> property, of the
     <literal>"router"</literal> log type indicates that logs should be directed
     to the <literal>auditdb</literal> system endpoint. This endpoint is defined
     in the connector configuration file,
     <filename>conf/provisioner.openicf-scriptedsql.json</filename> with the
     following parameter:
    </para>
    <programlisting language="javascript">{
     "name" : "auditdb",
    ...</programlisting>
    <para>
     The connection to the JDBC repository is configured in the
     <literal>configurationProperties</literal> in that file. The sample
     configuration is as follows:
    </para>
    <programlisting language="javascript">...
 },
     "configurationProperties" : {
     "host" : "localhost",
     "port" : "3306",
     "user" : "root",
     "password" : "password",
     "database" : "audit",
     "autoCommit" : false,
     "reloadScriptOnExecution" : false,
     "jdbcDriver" : "com.mysql.jdbc.Driver",
     "jdbcConnectionUrl" : "jdbc:mysql://localhost:3306/audit",
     "jdbcUrlTemplate" : "jdbc:mysql://%h:%p/%d",
     "createScriptFileName" : "&amp;{launcher.project.location}/tools/CreateScript.groovy",
     "testScriptFileName" : "&amp;{launcher.project.location}/tools/TestScript.groovy",
     "searchScriptFileName" : "&amp;{launcher.project.location}/tools/SearchScript.groovy"
 },
     ...</programlisting>
    <para>
     Substitute the correct URL or IP address of your remote JDBC repository,
     and the corresponding connection details (such as <literal>port</literal>,
     <literal>user</literal> and <literal>password</literal>.
    </para>
   </section>
  </section>

  <section xml:id="audit-write-adjustments">
   <title>Adjusting Audit Write Behavior</title>
   <para>
    You can change the way information is written to audit logs with the
    <literal>bufferSize</literal>. The default is 1024 bytes.
   </para>
   <para>
    To make use of an audit buffer, set the <literal>maxFlushDelay</literal>
    to a value greater than the default of 0. If you leave the
    <literal>maxFlushDelay</literal> at 0, audit entries are
    written to disk immediately, regardless of buffer size.
   </para>
   <para>
    When you set a non-zero <literal>maxFlushDelay</literal>, you are setting
    the maximum amount of time audit entries remain in the cache without being
    written to disk, unless the buffer fills up first.
   </para>
   <para>
    If you have configured OpenIDM logging with higher throughput, you may want
    to try a higher <literal>bufferSize</literal>. In that case, you may also
    want to experiment with different non-zero values for
    <literal>maxFlushDelay</literal> to make sure logs are actually written
    before they are flushed from memory.
   </para>
   <note>
    <para>
     If you set a non-zero value for <literal>maxFlushDelay</literal>, you risk
     the loss of audit data. If the OpenIDM process is killed uncleanly, audit
     data will be lost. However, a clean shutdown of OpenIDM will flush audit
     data in buffers to disk.
    </para>
   </note>
   <para>
    The following sample code reflects the defaults, and illustrate where you
    would configure these properties in the <filename>audit.json</filename>
    file.
   </para>
   <programlisting language="javascript">...
    "logTo" : [
    ...
        {
            "logType" : "csv",
            "location" : "audit",
            "bufferSize" : 1024,
            "maxFlushDelay" : 0
        }
    ...
   </programlisting>
  </section>
 </section>

 <section xml:id="audit-reports">
  <title>Generating Reports</title>

  <para>When generating reports from audit logs, you can correlate information
  from activity and reconciliation logs by matching the
  <literal>"rootActionId"</literal> on entries in both logs.</para>
  
  <para>The following MySQL query shows a join of the audit activity and
  audit reconciliation tables using root action ID values.</para>

  <screen width="95"><?dbfo pgwide="1"?>
mysql&gt; select distinct auditrecon.activity,auditrecon.sourceobjectid,
 auditrecon.targetobjectid,auditactivity.activitydate,auditrecon.status
 from auditactivity inner join auditrecon
 <emphasis role="strong">auditactivity.rootactionid=auditrecon.rootactionid</emphasis>
 where auditrecon.activity is not null group by auditrecon.sourceobjectid;
+----------+--------------------------+----------------------+---------------------+---------+
| activity | sourceobjectid           | targetobjectid       | activitydate        | status  |
+----------+--------------------------+----------------------+---------------------+---------+
| CREATE   | system/xmlfile/account/1 | managed/user/juser   | 2012-01-17T07:59:12 | SUCCESS |
| CREATE   | system/xmlfile/account/2 | managed/user/ajensen | 2012-01-17T07:59:12 | SUCCESS |
| CREATE   | system/xmlfile/account/3 | managed/user/bjensen | 2012-01-17T07:59:12 | SUCCESS |
+----------+--------------------------+----------------------+---------------------+---------+
3 rows in set (0.00 sec)</screen>
 </section>

 <section xml:id="audit-purging">
  <title>Purging Obsolete Audit Information</title>
  <para>
   If audit records grow "excessively" large, any subsequent reconciliations
   and queries to audit tables can become "sluggish". In a deployment with
   limited resources, a lack of disk space can affect system performance.
  </para>
  <para>
   You might already have restricted what is logged in your audit logs by
   setting up filters, as described in <xref linkend="filtering-audit-events" />.
   You can also use specific queries to purge audit logs, or you can purge audit
   records older than a specific date, using timestamps.
  </para>
  <para>
   OpenIDM includes a sample purge script, <filename>autoPurgeRecon.js</filename>
   in the <filename>bin/defaults/script/audit</filename> directory. This script
   purges audit log entries from the repository only, not from the corresponding
   CSV files.
  </para>
  <para>
   To purge audit logs on a regular basis, you must set up a schedule. A sample
   schedule is provided in the <filename>schedule-autoPurgeAuditRecon.json</filename>
   file (in the <filename>openidm/samples/schedules</filename> subdirectory).
   You can change that schedule as required, and copy the file to the
   <filename>conf/</filename> directory of your project, in order for it to take
   effect.
  </para>
  <para>
   The sample purge schedule file is as follows:
  </para>
  <screen>{
   "enabled" : false,
   "type" : "cron",
   "schedule" : "0 0 */12 * * ?",
   "persisted" : true,
   "misfirePolicy" : "doNothing",
   "invokeService" : "script",
   "invokeContext" : {
      "script" : {
         "type" : "text/javascript",
         "file" : "audit/autoPurgeAuditRecon.js",
         "input" : {
            "mappings" : [ "%" ],
            "purgeType" : "purgeByNumOfReconsToKeep",
            "numOfRecons" : 1,
            "intervalUnit" : "minutes",
            "intervalValue" : 1
         }
      }
   }
}</screen>

  <para>
   For information about the schedule-related properties in this file, see
   <link xlink:role="http://docbook.org/xlink/role/olink" xlink:show="new"
   xlink:href="integrators-guide#scheduling-synchronization"><citetitle>Scheduling
    Synchronization</citetitle></link>.
  </para>
  <variablelist>
   <para>
    Beyond scheduling, the following parameters are of interest for purging the
    audit logs:
   </para>
   <varlistentry>
    <term>input</term>
    <listitem>
     <para>Input information; the parameters below specify different kinds of
      input.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>mappings</term>
    <listitem>
     <para>
      An array of mappings to prune. Each element in the array can be either a
      string or an object.
     </para>
     <para>
      Strings must contain the mapping(s) name and can use "%" as a wild card
      value that will be used in a LIKE condition.
     </para>
     <para>
      Objects provide the ability to specify mapping(s) to include/exclude and
      must be of the form:
      <screen>{
      "include" : "mapping1",
      "exclude" : "mapping2"
 </screen>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>purgeType</term>
    <listitem>
     <para>
      The type of purge to perform. Can be set to one of the following values:
     </para>
     <variablelist>
      <varlistentry>
       <term>purgeByNumOfReconsToKeep</term>
       <listitem>
        <para>
         Uses the <literal>deleteFromAuditReconByNumOf</literal> function and
         the <literal>numOfRecons</literal> config variable.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>purgeByExpired</term>
       <listitem>
        <para>
         Uses the <literal>deleteFromAuditReconByExpired</literal> function and
         the config variables <literal>intervalUnit</literal> and
         <literal>intervalValue</literal>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>num-of-recons</term>
    <listitem>
     <para>
      The number of recon summary records to keep for a given mapping, including
      all child records.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>intervalUnit</term>
    <listitem>
     <para>
      The type of time interval when using <literal>purgeByExpired</literal>.
      Acceptable values include: <literal>minutes</literal>,
      <literal>hours</literal>, or <literal>days</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>intervalValue</term>
    <listitem>
     <para>
      The value of the time interval when using
      <literal>purgeByExpired</literal>. Set to an integer value.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   When you have filtered and purged unneeded log information, you can use log
   rotation services to limit the size of individual log files, and archive them
   as needed. Some log rotation services also support archiving to remote log
   servers. Details vary by the service and the operating system.
  </para>
  </section>

</chapter>
