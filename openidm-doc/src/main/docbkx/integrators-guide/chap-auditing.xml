<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2015 ForgeRock AS
  !    
-->
<chapter xml:id='chap-auditing'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Using Audit Logs</title>
 <indexterm>
  <primary>Audit logs</primary>
 </indexterm>

 <para>
  The OpenIDM auditing service can publish and log all relevant system activity
  to one or more specified targets, including local data files, the OpenIDM
  repository, and remote systems.
 </para>
 <para>
  OpenIDM integrates ForgeRock's Commons Audit Service, which ensures a
  consistent auditing interface across ForgeRock's Identity Platform. The
  Commons Audit Service logs access details, system activity, and authentication
  operations, by default. OpenIDM extends the audit service by logging data from
  reconciliation and synchronization operations. Auditing provides the data for
  all the relevant reports, including orphan account reports.
 </para>
 <para>
  Regardless of where audit information is logged, the audit logs can be queried
  over the REST interface. For information, see
  <xref linkend="querying-audit-over-rest" />.
 </para>

 <section xml:id="configure-audit-service">
  <title>Configuring the Audit Service</title>
  <para>
   OpenIDM exposes the audit logging configuration under
   <literal>https://localhost:8443/openidm/config/audit</literal> for the REST
   API, and in the file
   <filename><replaceable>project-dir</replaceable>/conf/audit.json</filename>.
  </para>
  <para>
   You can also configure the audit service in the Admin UI. Select Configure >
   System Preferences and click on the Audit tab. The fields on that form
   correspond to the configuration parameters described in this section.
  </para>
  <para>
   The <filename>audit.json</filename> file includes the following configurable
   parameters:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     The details of the audit event handlers that will be used by the audit
     service (see <xref linkend="configuring-event-handlers" />).
    </para>
    <para>
     The event handler configuration includes the list of event types that
     should be logged by the event handler. For information about the standard
     event types that are logged, see <xref linkend="audit-log-types" />.
    </para>
   </listitem>
   <listitem>
    <para>
     The audit event handler that will be used to service queries on the audit
     logs (see <xref linkend="configuring-audit-query-handler" />).
    </para>
   </listitem>
   <listitem>
    <para>
     Extensions to the default Commons Audit events (see <xref
     linkend="extended-audit-events" />.
    </para>
   </listitem>
   <listitem>
    <para>
     Any events that should be audited in addition to the standard Commons Audit
     events (access, activity and authentication). The default OpenIDM audit
     configuration includes the <literal>"recon"</literal> and
     <literal>"sync"</literal> events as custom events. You can add your own
     project-specific events here, and build the corresponding code or scripts
     to send those events to the audit service. For more information, see
     <xref linkend="custom-audit-events" />.
    </para>
   </listitem>
  </itemizedlist>

  <!--TODO Add this back when the functionality is added in the CAUD integration

      <para>
       In certain situations, you might want to tolerate the inability to write
       to an audit log and prevent an exception from being thrown if the logging
       fails. For example, a request for configuration data might succeed, but
       fail to write to the activity log. Reasons for logging failures might
       include full disk (for a CSV logger) or repository unavailable (for a
       repository logger).
      </para>
      <para>
       For each log type, you can specify that failure to write to the log
       should be ignored, and should not prevent the successful execution of the
       underlying request. To ignore logging failures for a specific log type,
       add the <literal>"ignoreLoggingFailures"</literal> property to the log
       type configuration, and set its value to <literal>true</literal>. This
       parameter is not included in the default <literal>audit.json</literal>
       file, and its value is considered to be <literal>false</literal> by
       default for all log types.
      </para> -->

 </section>

 <section xml:id="configuring-event-handlers">
  <title>Configuring Audit Event Handlers</title>
  <para>
   An <firstterm>audit event handler</firstterm> manages audit events, outputs
   them to a defined location, and controls their format. OpenIDM supports three
   audit event handlers by default:
  </para>
  <variablelist>
   <!-- Changed term names as csv, repo are just defaults -->
   <varlistentry>
    <term>
     CSV
    </term>
    <listitem>
     <para>
      Logs events to a comma-separated value (CSV) file. A sample CSV audit
      event handler configuration follows:
     </para>
     <programlisting language="javascript">"eventHandlers" : [
    {
        "name" : "csv",
        "class" : "org.forgerock.audit.events.handlers.csv.CSVAuditEventHandler",
        "config" : {
            "logDirectory" : "audit"
        },
        "events" : [ "access", "activity", "authentication", "recon", "sync" ]
    }
],   </programlisting>
     <para>
      The <literal>"logDirectory"</literal> property indicates the name of the
      directory in which log files should be written, relative to the
      <emphasis>working location</emphasis>. For more information on the working
      location, see <link xlink:href="integrators-guide#startup-configuration"
      xlink:role="http://docbook.org/xlink/role/olink" xlink:show="new"
      ><citetitle>Specifying the OpenIDM Startup Configuration</citetitle></link>.
     </para>
     <para>
      You can use property value substitution to direct logs to another
      location on the file system. The <link xlink:show="new"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:href="integrators-guide#custom-audit-log-location"><citetitle>Custom
      Audit Log Location</citetitle></link> example shows how to direct audit
      logs to a user home directory.
     </para>
     <para>
      Audit file names are fixed and correspond to the event being audited, that
      is, <filename>access.csv</filename>, <filename>activity.csv</filename>,
      <filename>authentication.csv</filename>, <filename>recon.csv</filename>,
      and <filename>sync.csv</filename>.
     </para>
     <!--TODO Check if this still applies
      mj: depends on OPENIDM-3958. Based on CAUD, I'm guessing no -->
         <para>
          The <literal>"recordDelimiter"</literal> property enables you to
          specify the character that represents a new line for the system that
          hosts the CSV file.
         </para>
         <para>
          If you set <literal>"recordDelimiter"</literal> to <literal>""</literal>,
          the Java line separator property on the local OpenIDM system will be
          used.
         </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     Repository
    </term>
    <listitem>
     <para>
      Logs events to the OpenIDM repository.
     </para>
     <para>
      In the OrientDB repository, OpenIDM stores log entries in the following
      tables:
     </para>
     <orderedlist>
      <listitem>
       <para>
        <literal>audit_access</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>audit_activity</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>audit_authentication</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>audit_recon</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>audit_sync</literal>
       </para>
      </listitem>
     </orderedlist>
     <para>
      In a JDBC repository, OpenIDM stores log entries in the following
      tables:
     </para>
     <orderedlist>
      <listitem>
       <para>
        <literal>auditaccess</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>auditactivity</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>auditauthentication</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>auditrecon</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>auditsync</literal>
       </para>
      </listitem>
     </orderedlist>
     <para>
      A sample audit repository log configuration follows:
     </para>
     <programlisting language="javascript">{
    "name": "repo",
    "class": "org.forgerock.openidm.audit.impl.RepositoryAuditEventHandler",
    "config": {
        "resourcePath" : "repo/auditendpoint"
    },
    "events": [
        "access",
        "activity",
        "recon",
        "sync",
        "authentication"
    ]
}</programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     Router
    </term>
    <listitem>
     <para>
      Logs events to any external or custom endpoint, such as
      <literal>system/scriptedsql</literal> or
      <literal>custom-endpoint/myhandler</literal>.
     </para>
     <para>
      A sample configuration for a <literal>"router"</literal> event handler is
      provided in the <filename>openidm/samples/audit-sample</filename>
      directory, and described in the <citetitle>Installation Guide</citetitle>,
      in the section <link xlink:show="new"
      xlink:href="install-guide#audit-config-files"
      xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Demonstrate
      Extended Audit Capabilities</citetitle></link>. This sample directs log
      output to a JDBC repository. The audit configuration file
      (<filename>conf/audit.json</filename>) for the sample shows the following
      event handler configuration:
    </para>
    <programlisting language="javascript">{
    "name": "router",
    "class": "org.forgerock.openidm.audit.impl.RouterAuditEventHandler",
    "config": {
        "resourcePath" : "system/auditdb"
    },  <!--TODO What additional config params can be applied for a router config?
     I think resourcePath is it, at least based on the UI -->
    "events": [
        "access",
        "activity",
        "authentication",
        "recon",
        "sync",
    ]
}</programlisting>
    <para>
     The <literal>"resourcePath"</literal> property in the configuration
     indicates that logs should be directed to the
     <literal>system/auditdb</literal> endpoint. This endpoint, and the
     JDBC connection properties, are defined in the connector configuration
     file (<filename>conf/provisioner.openicf-scriptedsql.json</filename>), as
     follows:
    </para>
    <programlisting language="javascript">:{
    "name" : "auditdb",
...
    "configurationProperties" : {
        "username" : "root",
        "password" : "password",
        "driverClassName" : "com.mysql.jdbc.Driver",
        "url" : "jdbc:mysql://localhost:3306/audit",
        "autoCommit" : true,
        "reloadScriptOnExecution" : false,
        "jdbcDriver" : "com.mysql.jdbc.Driver",
        "classpath" : ["&amp;{launcher.project.location}/tools"],
        "createScriptFileName" : "CreateScript.groovy",
        "testScriptFileName" : "TestScript.groovy",
        "searchScriptFileName" : "SearchScript.groovy"
    },
... </programlisting>
    <para>
     Substitute the correct URL or IP address of your remote JDBC repository,
     and the corresponding connection details.
    </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="configuring-audit-query-handler">
  <title>Configuring the Audit Event Handler for Queries</title>
  <para>
   You can select one audit event handler to manage queries on the
   audit logs. The audit query handler can be any one of the event handlers
   described in the previous section. The default audit query handler is the
   OpenIDM repository.
  </para>
  <para>
   To specify which audit event handler should be used for queries, set the
   <literal>handlerForQueries</literal> property in the
   <filename>audit.json</filename> file, as follows:
  </para>
  <programlisting language="javascript">{
    "auditServiceConfig" : {
        "handlerForQueries" : "repo",
        "availableAuditEventHandlers" : [
            "org.forgerock.audit.events.handlers.csv.CSVAuditEventHandler",
            "org.forgerock.openidm.audit.impl.RepositoryAuditEventHandler",
            "org.forgerock.openidm.audit.impl.RouterAuditEventHandler"
        ]
    },
...</programlisting>
  <para>
   The <literal>availableAuditEventHandlers</literal> property provides the
   array of audit event handlers available to OpenIDM.
  </para>
 </section>

 <section xml:id="audit-log-types">
  <title>Audit Log Event Types</title>
  <para>
   The Commons Audit Service logs information from three events:
   access, activity, and authentication. As part of the Commons Audit Service,
   you can log information from the same events from other ForgeRock
   identity products.
  </para>
  <para>
   You can go beyond the default audit events by defining an extended schema
   for each event.
  </para>
  <!-- Experiment: I think this is a use case, h/t JV -->
  <para>
   For example, you might specify a custom <literal>"activity"</literal> event
   to record and log changes in specific lights on a city street.
  </para>
  <para>
   You can also go beyond the Commons Audit Service by specifying additional
   <emphasis>custom</emphasis> events that must be logged. As synchronization
   and reconciliation are unique to OpenIDM, these events are included in the
   <filename>audit.json</filename> file as custom events.
  </para>
  <para>
   This section describes the default audit events, and shows how the audit
   configuration can be changed to support extended and custom audit events.
  </para>
  <para>
   In the Admin UI, you can configure default and custom audit events.
   Select Configure > System Preferences. Click on the Audit tab, and review
   the section on Audit Events.
  </para>

  <section xml:id="default-audit-events">
   <title>Default Audit Events</title>
   <variablelist>
    <para>
     The Commons Audit Service logs the following audit events by default:
    </para>
    <varlistentry>
     <term>Access Events</term>
     <listitem>
      <para>
       OpenIDM writes messages at <emphasis>system boundaries</emphasis>, that
       is REST endpoints and the invocation of scheduled tasks in this log.
      </para>
      <para>Default file: <filename>openidm/audit/access.csv</filename></para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Activity Events</term>
     <listitem>
      <para>
       OpenIDM logs operations on internal (managed) and external (system)
       objects to this log.
      </para>
      <para>
       Entries in the activity log contain identifiers, both for the action that
       triggered the activity, and also for the original caller and the
       relationships between related actions.
      </para>
      <para>Default file: <filename>openidm/audit/activity.csv</filename></para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Authentication Events</term>
     <listitem>
      <para>
       OpenIDM logs the results of authentication operations to this log,
       including situations and the actions taken on each object. The activity
       log contains additional detail
       about the actions.
      </para>
      <para>Default file: <filename>openidm/audit/authentication.csv</filename></para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>

  <section xml:id="extended-audit-events">
   <title>Extending the Default Audit Events</title>
   <para>
    An extended audit event enables you to change the behavior of the default
    audit events (access, activity, and authentication). An extended event
    definition includes a pointer to the <literal>"schema"</literal> for that
    event (such as <literal>"http://json-schema.org/draft-04/schema#"</literal>).
   </para>
   <para>
    In the following excerpt, the activity log is extended to include additional
    fields in the log (specified with the <literal>"properties"</literal> field),
    and to apply filtering, based on the actions that should trigger a write to
    the log. For more information about audit log filtering, see
    <xref linkend="filtering-audit-events" />.
   </para>
   <programlisting language="javascript">"extendedEventTypes" : {
   "activity": {
       "schema": {
           "$schema": "http://json-schema.org/draft-04/schema#",
           "id": "/",
           "type": "object",
           "properties": {
               "objectId": {
                   "type": "string"
               },
               "status": {
                   "type": "string"
               },
               "message": {
                   "type": "string"
               },
               "passwordChanged": {
                   "type": "boolean"
               }
           }
       },
       "filter" : {
           "actions" : [
               "create",
               "update",
               "delete",
               "patch",
               "action"
           ]
       }
   }
}, </programlisting>
  </section>

  <section xml:id="custom-audit-events">
   <title>Custom Audit Events</title>
   <para>
    OpenIDM supports two events that go beyond the Commons Audit Serivce:
    <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
          xlink:href="integrators-guide#sync-types">synchronization and
    reconciliation</link>. To that end, you can configure
    <emphasis>custom audit events</emphasis>.
   </para>
   <para>
    You configure OpenIDM to log additional events by defining a custom audit
    event in the audit configuration. Custom events are defined in the
    <literal>"customEventTypes"</literal> property of the
    <filename>audit.json</filename> file for your project.
   </para>
   <variablelist>
    <para>
     OpenIDM logs the following <emphasis>custom</emphasis> events by default:
    </para>
    <varlistentry>
     <term>Reconciliation Events</term>
     <listitem>
      <para>
       OpenIDM logs the results of a reconciliation run to this log (including
       situations and the resulting actions taken). The activity log contains
       details about the actions, where log entries display parent activity
       identifiers, <literal>recon/<replaceable>reconID</replaceable></literal>.
      </para>
      <para>Default file: <filename>openidm/audit/recon.csv</filename></para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Synchronization Events</term>
     <listitem>
      <para>
       OpenIDM logs the results of automatic synchronization operations (LiveSync
       and implicit synchronization) to this log, including situations and the
       actions taken on each object. The activity log contains additional detail
       about the actions.
      </para>
      <para>Default file: <filename>openidm/audit/sync.csv</filename></para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    To define a new custom event, add the event to the
    <literal>"customEventTypes"</literal> property. The event definition must
    include a pointer to the <literal>"schema"</literal> for that event (such as
    <literal>"http://json-schema.org/draft-04/schema#"</literal>). The
    <literal>"properties"</literal> object lists fields that will appear in the
    log for that event type. The following definition of the
    <literal>recon</literal> event type shows the expected format.
   </para>
   <programlisting language="javascript">"customEventTypes" : {
    "recon" : {
        "schema" : {
            "$schema" : "http://json-schema.org/draft-04/schema#",
            "id" : "/",
            "type" : "object",
            "properties" : {
                "transactionId" : {
                    "type" : "string"
                },
                "timestamp" : {
                    "type" : "string"
                },
                "eventName" : {
                    "type" : "string"
                },
                "authentication" : {
                    "type" : "object",
                    "properties" : {
                        "id" : {
                            "type" : "string"
                        }
                    }
                },
                "action" : {
                    "type" : "string"
                },
                "exception" : {
                    "type" : "string"
                },
                ...
                "reconId" : {
                    "type" : "string"
                }
            }
        }
    },
...</programlisting>
   <para>
    The custom event must have corresponding code or scripts that sends the
    event to the audit service.
   </para><!--TODO Add an example of how to do that here
    I think the example is how we can configure different filter fields,
     which I'll add to the next section -->
   <para>
    As with the default audit events, you may configure and apply filtering,
    by action, field, script, trigger, or watch items. Together, these fields
    trigger writes to the audit log files. For more information about audit
    log filtering, see <xref linkend="filtering-audit-events" />.
   </para>
  </section>
 </section>

 <section xml:id="filtering-audit-events">
   <title>Filtering Audit Logs Per Event Type</title>
   <para>
    The audit configuration, defined in the <filename>audit.json</filename>
    file, includes a <literal>filter</literal> parameter that enables you to
    specify what should be logged, per event type. The information that is
    logged can be filtered in various ways. The following sections describe the
    filters that can be applied to each event type.
   </para>

  <section xml:id="filtering-by-action">
   <title>Filtering Audit Entries by Action</title>
   <para>
    The <literal>filter</literal> <literal>actions</literal> list enables you
    to specify the actions that are logged, per event type. This filter is
    essentially a <literal>fields</literal> filter (as described in <xref
    linkend="filtering-by-field" />) that filters log entries by the value of
    their <literal>actions</literal> field.
   </para>
   <para>
    The following configuration specifies certain action operations:
    (create, update, delete, patch, and action). However, it also specifies
    a script, <filename>filterScript.js</filename> which may also specify
    action operations. The Audit Service may check filter actions, scripts, and
    more, when included in the <filename>audit.json</filename> file. The
    Audit service will log only those services that are included in all of
    these sections.
   </para>
   <!-- not comfy with my phrasing here -->
   <programlisting>"extendedEventTypes" : {
    "activity": {
        "schema": {
        ...
        },
        "filter" : {
            "actions" : [
                "create",
                "update",
                "delete",
                "patch",
                "action"
            ]
            "script" : {
                "type" : "text/javascript",
                "file" : "filterScript.js"
            }
        }
        }
    },  </programlisting>
   <!-- For now, the script block includes "globals", which I think
   we'll either extend or remove, so I'm leaving it out of the snippet -->
   <para>
    Conversely, if an event type is not included in the list of
    <literal>eventTypes</literal>, or if no <literal>filter</literal>
    operation is specified for an event type, all actions for that event type
    are logged.
   </para>
   <para>
    The list of actions that can be filtered into the log depend on the event
    type. The following table lists the actions that can be filtered, per
    event type.
   </para>
   <table>
    <title>Actions that can be Logged Per Event Type</title>
    <tgroup cols="3">
     <colspec colnum="1" colname="col1" colwidth="1*"/>
     <colspec colnum="2" colname="col2" colwidth="1*"/>
     <colspec colnum="3" colname="col3" colwidth="4*"/>
     <thead>
      <row>
       <entry>Event Type</entry>
       <entry>Actions</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry morerows="6">Activity</entry>
       <entry><literal>read</literal></entry>
       <entry>
        <para>
         When an object is read by using its identifier. By default, read
         actions are not logged. Add the <literal>"read"</literal> action to the
         list of actions to log all read actions.
        </para>
        <para>
         Note that due to the potential result size in the case of read
         operations on <literal>system/</literal> endpoints, only the read is
         logged, and not the resource detail. If you really need to log the
         complete resource detail, add the following line to your
         <filename>conf/boot/boot.properties</filename> file:
        </para>
        <programlisting>openidm.audit.logFullObjects=true</programlisting>
       </entry>
      </row>
      <row>
       <entry><literal>create</literal></entry>
       <entry>
        <para>
         When an object is created.
        </para>
       </entry>
      </row>
      <row>
       <entry><literal>update</literal></entry>
       <entry>
        <para>
         When an object is updated.
        </para>
       </entry>
      </row>
      <row>
       <entry><literal>delete</literal></entry>
       <entry>
        <para>
         When an object is deleted.
        </para>
       </entry>
      </row>
      <row>
       <entry><literal>patch</literal></entry>
       <entry>
        <para>
         When an object is partially modified.
        </para>
       </entry>
      </row>
      <row>
       <entry><literal>query</literal></entry>
       <entry>
        <para>
         When a query is performed on an object. By default, query actions are
         not logged. Add the <literal>"query"</literal> action to the list of
         actions to log all query actions.
        </para>
        <para>
         Note that, due to the potential result size in the case of query
         operations on <literal>system/</literal> endpoints, only the query is
         logged, and not the resource detail. If you really need to log the
         complete resource detail, add the following line to your
         <filename>conf/boot/boot.properties</filename> file:
        </para>
        <programlisting>openidm.audit.logFullObjects=true</programlisting>
       </entry>
      </row>
      <row>
       <entry><literal>action</literal></entry>
       <entry>
        <para>
         When an action is performed on an object.
        </para>
       </entry>
      </row>
      <row>
       <entry morerows="6">Recon and Sync</entry>
       <entry><literal>create</literal></entry>
       <entry>When a target object is created.</entry>
      </row>
      <row>
       <entry><literal>delete</literal></entry>
       <entry>When a target object is deleted.</entry>
      </row>
      <row>
       <entry><literal>update</literal></entry>
       <entry>When a target object is updated.</entry>
      </row>
      <row>
       <entry><literal>link</literal></entry>
       <entry>When a link is created between a source object and an existing
        target object.</entry>
      </row>
      <row>
       <entry><literal>unlink</literal></entry>
       <entry>When a link is removed between a source object and a target
        object.</entry>
      </row>
      <row>
       <entry><literal>exception</literal></entry>
       <entry>When the synchronization situation results in an exception. For
        more information, see <link xlink:show="new"
                                    xlink:href="integrators-guide#handling-sync"
                                    xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Synchronization
         Situations and Actions</citetitle></link>.</entry>
      </row>
      <row>
       <entry><literal>ignore</literal></entry>
       <entry>When the target object is ignored, that is, no action is taken.
       </entry>
      </row>
      <row>
       <entry>Access</entry>
       <entry><literal>-</literal></entry>
       <entry>No actions can be specified for the access log.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </section>

  <section xml:id="filtering-by-field">
    <title>Filtering Audit Entries by Field</title>
    <para>
     You can add a list of <literal>filter</literal> <literal>fields</literal>
     to the audit configuration, that enables you to filter log entries by
     specific fields. For example, you might want to restrict the reconciliation
     or audit log so that only summary information is logged for each
     reconciliation operation. The following addition to the
     <filename>audit.json</filename> file specifies that entries are logged in
     the reconciliation log only if their <literal>entryType</literal> is
     <literal>start</literal> or <literal>summary</literal>.
    </para>
    <programlisting language="javascript">"customEventTypes" : {
    "recon" : {
        "schema" : {
            ...
        }'   <!--TODO This customEventType for recon and sync is odd. Anyway, this does not seem to work yet ()-->
        "filter" : {
            "fields" : [
                {
                    "name" : "entryType",
                    "values" : [
                        "start",
                        "summary"
                    ]
                }
            ]
        }
    }
},
...</programlisting>
    <para>
     To use nested properties, specify the field name as a JSON pointer. For
     example, to filter entries according to the value of the
     <literal>authentication.id</literal>, you would specify the field name as
     <literal>authentication/id</literal>.
    </para>
   </section>

  <section xml:id="audit-filter-scripts">
   <title>Using a Script to Filter Audit Data</title>
   <para>
    Apart from the audit filtering options described in the previous sections,
    you can use a JavaScript or Groovy script to specify what is logged in your
    audit logs. Audit filter scripts are referenced in the audit configuration
    file (<filename>conf/audit.json</filename>), and can be configured per
    event type. The following sample configuration references a script named
    <filename>auditfilter.js</filename>, which is used to limit what is logged
    in the reconciliation audit log:
   </para>
   <programlisting language="javascript">{
    "eventTypes" : {
        ...
        "recon" : {
            "filter" : {
                "script" : {
                    "type" : "text/javascript",
                    "file" : "auditfilter.js"
                }
            }
        }
    },
    ...
}</programlisting>
   <para>
    OpenIDM makes the <literal>request</literal> and <literal>context</literal>
    objects available to the script. Before the audit record is written, it can
    be accessed as a <literal>request.content</literal> object. For more
    information, see
    <link xlink:show="new" xlink:href="integrators-guide#script-config"
          xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Setting the
    Script Configuration</citetitle></link>.
   </para>
   <para>
    For example, to set up a script to log just the summary records for mapping
    managed users in an LDAP data store, you could include the following in the
    <filename>auditfilter.js</filename> script:
   </para>
   <programlisting language="javascript">(function() {
    return request.content.entryType == 'summary' &amp;&amp;
    request.content.mapping == 'systemLdapAccounts_managedUser'
    }());</programlisting>
   <para>
    The script must return <literal>true</literal> to include the log entry;
    <literal>false</literal> to exclude it.
   </para>
  </section>

  <section xml:id="filtering-by-trigger">
    <title>Filtering Audit Entries by Trigger</title>
    <para>
     You can add a <literal>filter</literal> <literal>triggers</literal> list
     to the audit configuration, that specifies the actions that will be logged
     for a specific trigger. For example, the following addition to the
     <filename>audit.json</filename> file specifies that only
     <literal>create</literal> and <literal>update</literal> actions are logged
     for in the activity log, for an activity that was triggered by a
     <literal>recon</literal>.
    </para>
    <programlisting language="javascript">"eventTypes" : {
    "activity" : {
        "filter" : {
            "actions" : [
            ...
            ],
            "triggers" : {
                "recon" : [
                    "create",
                    "update"
                ]
            }
    ...</programlisting>
    <para>
     If a trigger is provided, but no actions are specified, nothing is logged
     for that trigger. If a trigger is omitted, all actions are logged for that
     trigger. In the current OpenIDM release, only the <literal>recon</literal>
     trigger is implemented. For a list of reconciliation actions that can be
     logged, see <link xlink:href="integrators-guide#sync-actions"
     xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Synchronization
     Actions</citetitle></link>.
    </para>
   </section>

  <section xml:id="audit-watched-fields">
   <title>Defining Specific Watched Fields</title>
   <para>
    <emphasis>For the activity log only</emphasis>, you can specify fields
    whose values are considered particularly important in terms of logging.
   </para>
   <para>
    The <literal>watchedFields</literal> parameter, configured in the
    <literal>audit.json</literal> file, is not really a filtering mechanism,
    but enables you to define a list of properties that should be monitored for
    changes. When the value of one of the properties in this list changes, the
    change is logged in the activity log, under the column
    <literal>"changedFields"</literal>. This parameter enables you to have
    quick access to important changes in the log.
   </para>
   <para>
    Properties to monitor are listed as values of the
    <literal>watchedFields</literal> parameter, separated by commas, for
    example:
   </para>
   <screen>"watchedFields" : [ "email", "address" ]</screen>
   <para>
    You can monitor changes to any field in this way.
   </para>
  </section>

  <section xml:id="audit-password-fields">
   <title>Defining a Password Field</title>

   <para>
    Also in the activity log, you can include a <literal>passwordFields</literal>
    parameter to specify a list of password properties. This parameter functions
    much like the <literal>watchedFields</literal> parameter in that changes to
    these property values are logged in the activity log, under the column
    <literal>"changedFields"</literal>. In addition, when a password property
    is changed, the boolean <literal>"passwordChanged"</literal> flag is set to
    <literal>true</literal> in the activity log. Properties that should be
    considered as passwords are listed as values of the
    <literal>passwordFields</literal> parameter, separated by commas. For
    example:
   </para>
   <screen>"passwordFields" : [ "password", "userPassword" ]</screen>
  </section>

 </section>

 <section xml:id="audit-exception-formatter">
  <title>Configuring an Audit Exception Formatter</title>

  <para>
   The OpenIDM Audit service includes an <emphasis>exception
   formatter</emphasis> It is configured in the
   <filename>audit.json</filename> file, in the following snippet:
  </para>

  <programlisting language="javascript">"exceptionFormatter" : {
   "type" : "text/javascript",
   "file" : "bin/defaults/script/audit/stacktraceFormatter.js"
}, </programlisting>

  <para>
   As shown, you may find the script that defines how the exception formatter
   works in the <filename>stacktraceFormatter.js</filename> file. That file
   handles the formatting and display of exceptions thrown by the audit logger.
  </para>

 </section>

 <section xml:id="audit-log-format">
  <title>Audit Log Formats</title>
  <para>
   This section describes the format of each audit event type, to assist you
   with mapping audit logs to the reports you generate.
  </para>
  <para>
   When multiple actions are triggered by a single request, all those actions
   will have the same <literal>transactionId</literal>. For example, if a
   reconciliation operation triggers a sync, multiple reads, and updates, each
   of those individual log entries will have the same
   <literal>transactionId</literal>. The shared <literal>transactionId</literal>
   makes it possible to query related activities.
  </para>

  <variablelist xml:id="audit-access-fields">
   <title>Access Log Fields</title>
   <para>
    The access log includes the following information:
   </para>
   <varlistentry>
    <term><literal>"_id"</literal></term>
    <listitem>
     <para>
      UUID for the message object, such as
      <literal>"0419d364-1b3d-4e4f-b769-555c3ca098b0"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"action"</literal></term>
    <listitem>
     <para>
      Action requested, such as <literal>"authenticate"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"ip"</literal></term>
    <listitem>
     <para>
      IP address of the client. For access from the local host, this can appear
      for example as <literal>"0:0:0:0:0:0:0:1%0"</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"principal"</literal></term>
    <listitem>
     <para>
      Principal (username) requesting the operation, such as
      <literal>"openidm-admin"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"roles"</literal></term>
    <listitem>
     <para>
      Any roles associated with the principal, such as
      <literal>"[openidm-admin, openidm-authorized]"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"status"</literal></term>
    <listitem>
     <para>
      Result of the operation, such as <literal>"SUCCESS"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"timestamp"</literal></term>
    <listitem>
     <para>
      The time that OpenIDM logged the message, in UTC format, for example
      <literal>"2015-05-18T08:48:00.160Z"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"userid"</literal></term>
    <listitem>
     <para>
      The ID (<literal>_id</literal>) of the user requesting the operation, such
      as <literal>openidm-admin</literal>, <literal>jdoe</literal> or a UUID
      that has been generated by the server, such as
      <literal>"0d7532e2-2b45-420e-b10e-c35684c633fd"</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="audit-activity-fields">
   <title>Activity Log Fields</title>
   <para>
    The activity log includes the following information for each entry:
   </para>
   <varlistentry>
    <term><literal>"_id"</literal></term>
    <listitem>
     <para>
      UUID for the message object, such as
      <literal>"0419d364-1b3d-4e4f-b769-555c3ca098b0"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"action"</literal></term>
    <listitem>
     <para>
      Action performed on that entry, such as <literal>"create"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"activityId"</literal></term>
    <listitem>
     <para>
      UUID of the activity corresponding to the UUID of the resource context
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"after"</literal></term>
    <listitem>
     <para>
      JSON representation of the object that results from the activity
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"before"</literal></term>
    <listitem>
     <para>
      JSON representation of the object prior to the activity
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"changedFields"</literal></term>
    <listitem>
     <para>
      List of the fields that were changed as a result of the activity
     </para>
     <para>
      This list takes into consideration only those fields that have been
      configured as <literal>"watchedFields"</literal> in the
      <filename>conf/audit.json</filename> file.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"message"</literal></term>
    <listitem>
     <para>
      Human readable text about the activity
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"objectId"</literal></term>
    <listitem>
     <para>
      Object identifier, such as <literal>"managed/user/jdoe"</literal> or
      <literal>"managed/user/38e29216-4b0e-4701-8a6f-ed8bf69692c7"</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"parentActionId"</literal></term>
    <listitem>
     <para>
      UUID of the action leading to the activity
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"passwordChanged"</literal></term>
    <listitem>
     <para>
      Boolean (<literal>true</literal> or <literal>false</literal>) indicating
      whether the action resulted in a password change
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"requester"</literal></term>
    <listitem>
     <para>
      Principal requesting the operation
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"rev"</literal></term>
    <listitem>
     <para>Object revision number</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"rootActionId"</literal></term>
    <listitem>
     <para>
      UUID of the root cause for the activity. This matches a corresponding
      <literal>"rootActionId"</literal> in a reconciliation message.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"status"</literal></term>
    <listitem>
     <para>Result of the operation, such as <literal>"SUCCESS"</literal></para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"timestamp"</literal></term>
    <listitem>
     <para>
      Time that OpenIDM logged the message, in UTC format, for example
      <literal>"2015-05-18T08:48:00.160Z"</literal>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="audit-authentication-fields">
   <title>Authentication Log Fields</title>
   <para>Authentication log messages include the following information:</para>
   <varlistentry>
    <term><literal>"authentication.id"</literal></term>
    <listitem>
     <para>
      User ID used in the authentication operation, for example,
      <literal>"openidm-admin"</literal>, or <literal>"anonymous"</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"transactionId"</literal></term>
    <listitem>
     <para>
      The UUID of the transaction, for example
      <literal>5541d044-42c6-494c-b6b7-f20df067be0a</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"eventName"</literal></term>
    <listitem>
     <para>
      The name of the audit event - always <literal>authentication</literal> for
      this log.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"result"</literal></term>
    <listitem>
     <para>
      The result of the transaction, either <literal>"SUCCESSFUL"</literal>, or
      <literal>"FAILED"</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"principal"</literal></term>
    <listitem>
     <para>
      An array of the accounts or roles used to authenticate, for example,
      <literal>[ "openidm-admin" ]</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"context"</literal></term>
    <listitem>
     <para>
      The complete security context of the authentication operation, including
      the authenticating ID, the targeted endpoint, the roles applied, and the
      IP address from which the authentication request was made. For example:
     </para>
     <programlisting language="javascript">{
    ""id"": ""openidm-admin"",
    ""component"": ""repo/internal/user"",
    ""roles"": [ ""openidm-admin"", ""openidm-authorized"" ],
    ""ipAddress"": ""0:0:0:0:0:0:0:1""
}</programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"sessionId"</literal></term>
    <listitem>
     <para>
      The UUID of the authentication session, for example
      <literal>9932e22d-89f3-40be-93a9-d6eeadcc9235</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"entries"</literal></term>
    <listitem>
     <para>
      The complete JSON object, describing the authentication session. The
      object includes the authentication or session module, the result of the
      operation, the reason for any failures, and information about the
      authentication principal for that session.
     </para>
     <programlisting language="javascript">[
    {
        "moduleId": "Session-IDMJaspiModuleWrapper",
        "result": "SUCCESSFUL",
        "info": {
            "org.forgerock.authentication.principal": "openidm-admin"
        }
    }
]</programlisting>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="audit-recon-fields">
   <title>Reconciliation Log Fields</title>
   <para>Reconciliation log messages include the following information:</para>
   <varlistentry>
    <term><literal>"_id"</literal></term>
    <listitem>
     <para>
      UUID for the message object, such as
      <literal>"0419d364-1b3d-4e4f-b769-555c3ca098b0"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"action"</literal></term>
    <listitem>
     <para>
      Synchronization action, such as <literal>"CREATE"</literal>.
     </para>
     <para>
      For more information, see the section that describes the <link
      xlink:href="integrators-guide#sync-actions"
      xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Synchronization
      Actions</citetitle></link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"actionID"</literal></term>
    <listitem>
     <para>
      The unique ID assigned to the action
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"ambiguousTargetObjectIds"</literal></term>
    <listitem>
     <para>
      When the situation is AMBIGUOUS or UNQUALIFIED and OpenIDM cannot
      distinguish between more than one target object, OpenIDM logs the
      identifiers of the objects in this field, in comma-separated format. This
      makes it possible to figure out what was ambiguous.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"entryType"</literal></term>
    <listitem>
     <para>
      The type of reconciliation log entry, such as <literal>"start"</literal>,
      or <literal>"summary"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"exception"</literal></term>
    <listitem>
     <para>
      The stack trace of the exception, if any
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"mapping"</literal></term>
    <listitem>
     <para>
      The name of the mapping that was used for the reconciliation (defined in
      <filename>conf/sync.json</filename>), for example
      <literal>"systemLdapAccounts_managedUser"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"message"</literal></term>
    <listitem>
     <para>
      Human readable text about the reconciliation action that was taken
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"messageDetail"</literal></term>
    <listitem>
     <para>
      For the <literal>"summary"</literal> entry type, this field contains
      details about that specific stage of the reconciliation run, such as the
      stage name and description, start and end time, and so forth.
     </para>
     <para>
      When script exceptions are encountered during a reconciliation run,
      the error details can also be stored in this property.
     </para>
     <para>
      For script exception details to be pulled in, the script exception must
      take the following format:
     </para>
     <programlisting language="javascript">"throw {
    'code' : <replaceable>HTTP error code</replaceable>,
    'message' : <replaceable>error message</replaceable>,
    'detail' : {
        <replaceable>details</replaceable>
    }
};"  </programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"reconId"</literal></term>
    <listitem>
     <para>
      UUID for the reconciliation operation
     </para>
     <para>
      This is the same for all entries that pertain to the reconciliation run.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"reconciling"</literal></term>
    <listitem>
     <para>
      What OpenIDM is reconciling, <literal>"source"</literal> for the first
      phase, <literal>"target"</literal> for the second phase
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"rootActionId"</literal></term>
    <listitem>
     <para>
      The UUID of the root cause for the activity
     </para>
     <para>
      This matches a corresponding <literal>"rootActionId"</literal> in an
      activity message.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"situation"</literal></term>
    <listitem>
     <para>
      The situation encountered.
     </para>
     <para>
      For more information, see the section that describes the
      <link xlink:href="integrators-guide#sync-situations"
            xlink:role="http://docbook.org/xlink/role/olink">synchronization
       situations</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"sourceObjectId"</literal></term>
    <listitem>
     <para>
      The object identifier on the source system, such as
      <literal>"system/xmlfile/account/bjensen"</literal> or
      <literal>"managed/user/bjensen"</literal> (depending on the resource
      that is configured as the source in the mapping).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"status"</literal></term>
    <listitem>
     <para>
      Result of the operation, such as <literal>"SUCCESS"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"targetObjectId"</literal></term>
    <listitem>
     <para>
      The object identifier on the target system, such as
      <literal>"system/xmlfile/account/bjensen"</literal> or
      <literal>"managed/user/bjensen"</literal> (depending on the resource
      that is configured as the target in the mapping).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"timestamp"</literal></term>
    <listitem>
     <para>
      The time that OpenIDM logged the message, in UTC format, for example
      <literal>"2015-05-18T08:48:00.160Z"</literal>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist xml:id="audit-sync-fields">
   <title>Synchronization Log Fields</title>
   <para>Synchronization log messages include the following information:</para>
   <varlistentry>
    <term><literal>"_id"</literal></term>
    <listitem>
     <para>
      UUID for the message object, such as
      <literal>"9349accd-b3ee-451c-8e87-0412efdac627"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"action"</literal></term>
    <listitem>
     <para>
      Synchronization action, such as <literal>"CREATE"</literal>. For more
      information, see the section that describes <link xlink:show="new"
                                                        xlink:href="integrators-guide#sync-actions"
                                                        xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Synchronization
      Actions</citetitle></link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"actionID"</literal></term>
    <listitem>
     <para>
      The unique ID assigned to the action.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"exception"</literal></term>
    <listitem>
     <para>
      The stack trace of the exception, if any.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"linkQualifier"</literal></term>
    <listitem>
     <para>
      The link qualifier applied to the action. Link qualifiers enable you to
      manage one to many relationships in mappings. For more information about
      link qualifiers, see <link xlink:show="new"
                                 xlink:href="integrators-guide#mapping-link-qualifiers"
                                 xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Using
      Link Qualifiers in a Mapping</citetitle></link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"mapping"</literal></term>
    <listitem>
     <para>
      The name of the mapping used for the synchronization operation (defined in
      <filename>conf/sync.json</filename>, for example
      <literal>"systemLdapAccounts_managedUser"</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"message"</literal></term>
    <listitem>
     <para>
      Human readable text about the synchronization action that was taken.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"messageDetail"</literal></term>
    <listitem>
     <para>
      When script exceptions are encountered during a synchronization operation,
      the error details can be stored in this property.
     </para>
     <para>
      For script exception details to be pulled in, the script exception must
      take the following format:
     </para>
     <programlisting>"throw {
    'code' : <replaceable>HTTP error code</replaceable>,
    'message' : <replaceable>error message</replaceable>,
    'detail' : {
        <replaceable>details</replaceable>
    }
};"</programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"rootActionId"</literal></term>
    <listitem>
     <para>
      UUID of the root cause for the activity. This matches a corresponding
      <literal>"rootActionId"</literal> in an activity message.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"situation"</literal></term>
    <listitem>
     <para>
      The situation encountered for each object. For more information, see the
      section that describes the <link
      xlink:href="integrators-guide#sync-situations"
      xlink:role="http://docbook.org/xlink/role/olink">synchronization
      situations</link>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"sourceObjectId"</literal></term>
    <listitem>
     <para>
      The object identifier on the source system, such as
      <literal>"system/ldap/account/uid=bjensen,ou=People,dc=example,dc=com"</literal>
      or <literal>"managed/user/bjensen"</literal> (depending on the resource
      that is configured as the source in the mapping).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"status"</literal></term>
    <listitem>
     <para>
      The result of the synchronization operation, such as
      <literal>"SUCCESS"</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"targetObjectId"</literal></term>
    <listitem>
     <para>
      The object identifier on the target system, such as
      <literal>"uid=bjensen,ou=People,dc=example,dc=com"</literal> or
      <literal>"managed/user/bjensen"</literal> (depending on the resource
      configured as the target in the mapping).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"timestamp"</literal></term>
    <listitem>
     <para>
      The time that OpenIDM logged the message, in UTC format, for example
      <literal>"2015-05-28T13:48:00.160Z"</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

 </section>

 <section xml:id="audit-write-adjustments">
   <title>Adjusting Audit Write Behavior</title>
   <para>
    You can change the way information is written to audit logs with the
    <literal>bufferSize</literal>. The default is 1024 bytes.
   </para>
   <para>
    To make use of an audit buffer, set the <literal>maxFlushDelay</literal>
    to a value greater than the default of 0. If you leave the
    <literal>maxFlushDelay</literal> at 0, audit entries are
    written to disk immediately, regardless of buffer size.
   </para>
   <para>
    When you set a non-zero <literal>maxFlushDelay</literal>, you are setting
    the maximum amount of time audit entries remain in the cache without being
    written to disk, unless the buffer fills up first.
   </para>
   <para>
    If you have configured OpenIDM logging with higher throughput, you may want
    to try a higher <literal>bufferSize</literal>. In that case, you may also
    want to experiment with different non-zero values for
    <literal>maxFlushDelay</literal> to make sure logs are actually written
    before they are flushed from memory.
   </para>
   <note>
    <para>
     If you set a non-zero value for <literal>maxFlushDelay</literal>, you risk
     the loss of audit data. If the OpenIDM process is killed uncleanly, audit
     data will be lost. However, a clean shutdown of OpenIDM will flush audit
     data in buffers to disk.
    </para>
   </note>
   <para>
    The following sample code reflects the defaults, and illustrate where you
    would configure these properties in the <filename>audit.json</filename>
    file.
   </para>
   <programlisting language="javascript">...
    "logTo" : [
    ...
        {
            "logType" : "csv",
            "location" : "audit",
            "bufferSize" : 1024,
            "maxFlushDelay" : 0
        }
    ...
   </programlisting>
  </section>

 <section xml:id="audit-reports">
  <title>Generating Reports</title>

  <para>When generating reports from audit logs, you can correlate information
  from activity and reconciliation logs by matching the
  <literal>"rootActionId"</literal> on entries in both logs.</para>
  
  <para>The following MySQL query shows a join of the audit activity and
  audit reconciliation tables using root action ID values.</para>

  <screen width="95"><?dbfo pgwide="1"?>
mysql&gt; select distinct auditrecon.activity,auditrecon.sourceobjectid,
 auditrecon.targetobjectid,auditactivity.activitydate,auditrecon.status
 from auditactivity inner join auditrecon
 <emphasis role="strong">auditactivity.rootactionid=auditrecon.rootactionid</emphasis>
 where auditrecon.activity is not null group by auditrecon.sourceobjectid;
+----------+--------------------------+----------------------+---------------------+---------+
| activity | sourceobjectid           | targetobjectid       | activitydate        | status  |
+----------+--------------------------+----------------------+---------------------+---------+
| CREATE   | system/xmlfile/account/1 | managed/user/juser   | 2012-01-17T07:59:12 | SUCCESS |
| CREATE   | system/xmlfile/account/2 | managed/user/ajensen | 2012-01-17T07:59:12 | SUCCESS |
| CREATE   | system/xmlfile/account/3 | managed/user/bjensen | 2012-01-17T07:59:12 | SUCCESS |
+----------+--------------------------+----------------------+---------------------+---------+
3 rows in set (0.00 sec)</screen>
 </section>

 <section xml:id="audit-purging">
  <title>Purging Obsolete Audit Information</title>
  <para>
   If reconciliation audit records grow "excessively" large, any subsequent
   reconciliations and queries to audit tables can become "sluggish". In a
   deployment with limited resources, a lack of disk space can affect system
   performance.
  </para>
  <para>
   You might already have restricted what is logged in your audit logs by
   setting up filters, as described in <xref linkend="filtering-audit-events" />.
   You can also use specific queries to purge reconciliation audit logs, or you
   can purge reconciliation audit records older than a specific date, using
   timestamps.
  </para>
  <para>
   OpenIDM includes a sample purge script, <filename>autoPurgeRecon.js</filename>
   in the <filename>bin/defaults/script/audit</filename> directory. This script
   purges reconciliation audit log entries from the repository only, not from
   the corresponding CSV files.
  </para>
  <para>
   To purge reconciliation audit logs on a regular basis, you must set up a
   schedule. A sample schedule is provided in the
   <filename>schedule-autoPurgeAuditRecon.json</filename> file (in the
   <filename>openidm/samples/schedules</filename> subdirectory). You can change
   that schedule as required, and copy the file to the <filename>conf/</filename>
   directory of your project, in order for it to take effect.
  </para>
  <para>
   The sample purge schedule file is as follows:
  </para>
  <screen>{
   "enabled" : false,
   "type" : "cron",
   "schedule" : "0 0 */12 * * ?",
   "persisted" : true,
   "misfirePolicy" : "doNothing",
   "invokeService" : "script",
   "invokeContext" : {
      "script" : {
         "type" : "text/javascript",
         "file" : "audit/autoPurgeAuditRecon.js",
         "input" : {
            "mappings" : [ "%" ],
            "purgeType" : "purgeByNumOfReconsToKeep",
            "numOfRecons" : 1,
            "intervalUnit" : "minutes",
            "intervalValue" : 1
         }
      }
   }
}</screen>

  <para>
   For information about the schedule-related properties in this file, see
   <link xlink:role="http://docbook.org/xlink/role/olink" xlink:show="new"
   xlink:href="integrators-guide#scheduling-synchronization"><citetitle>Scheduling
    Synchronization</citetitle></link>.
  </para>
  <variablelist>
   <para>
    Beyond scheduling, the following parameters are of interest for purging the
    reconciliation audit logs:
   </para>
   <varlistentry>
    <term>input</term>
    <listitem>
     <para>Input information. The parameters below specify different kinds of
      input.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>mappings</term>
    <listitem>
     <para>
      An array of mappings to prune. Each element in the array can be either a
      string or an object.
     </para>
     <para>
      Strings must contain the mapping(s) name and can use "%" as a wild card
      value that will be used in a LIKE condition.
     </para>
     <para>
      Objects provide the ability to specify mapping(s) to include/exclude and
      must be of the form:
      <screen>{
      "include" : "mapping1",
      "exclude" : "mapping2"
 </screen>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>purgeType</term>
    <listitem>
     <para>
      The type of purge to perform. Can be set to one of the following values:
     </para>
     <variablelist>
      <varlistentry>
       <term>purgeByNumOfReconsToKeep</term>
       <listitem>
        <para>
         Uses the <literal>deleteFromAuditReconByNumOf</literal> function and
         the <literal>numOfRecons</literal> config variable.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>purgeByExpired</term>
       <listitem>
        <para>
         Uses the <literal>deleteFromAuditReconByExpired</literal> function and
         the config variables <literal>intervalUnit</literal> and
         <literal>intervalValue</literal>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>num-of-recons</term>
    <listitem>
     <para>
      The number of recon summary records to keep for a given mapping, including
      all child records.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>intervalUnit</term>
    <listitem>
     <para>
      The type of time interval when using <literal>purgeByExpired</literal>.
      Acceptable values include: <literal>minutes</literal>,
      <literal>hours</literal>, or <literal>days</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>intervalValue</term>
    <listitem>
     <para>
      The value of the time interval when using
      <literal>purgeByExpired</literal>. Set to an integer value.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   When you have filtered and purged unneeded log information, you can use log
   rotation services to limit the size of individual log files, and archive them
   as needed. Some log rotation services also support archiving to remote log
   servers. Details vary by the service and the operating system.
  </para>
  </section>

 <section xml:id="querying-audit-over-rest">
  <title>Querying Audit Logs Over REST</title>
  <para>
   Regardless of where audit events are stored, they are accessible over REST
   on the <literal>/audit</literal> endpoint. The following sections describe
   how to query the reconciliation, activity and sync logs over REST. These
   instructions can be applied to all the other log types.
  </para>
  <note>
   <para>
    Queries on the audit endpoint must use <literal>queryFilter</literal>
    syntax. Predefined queries are not supported. For more information, see
    <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
    xlink:href="integrators-guide#constructing-queries"><citetitle>Constructing
    Queries</citetitle></link>.
   </para>
  </note>

 <section xml:id="querying-recon-logs">
  <title>Querying the Reconciliation Audit Log</title>
  <para>
   With the default audit configuration, reconciliation operations are logged in
   the file <filename>/path/to/openidm/audit/recon.csv</filename>, and in the
   repository. You can read and query the reconciliation audit logs over the
   REST interface, as outlined in the following examples.
  </para>
  <para>
   To return all reconciliation operations logged in the audit log, query the
   <literal>audit/recon</literal> endpoint, as follows:
  </para>
  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/audit/recon?_queryFilter=true"</userinput></screen>
  <para>
   The following code extract shows the reconciliation audit log after the first
   reconciliation operation in Sample 1.
  </para>
  <programlisting language="javascript">{
  "result": [
    {
      "_id": "119cfb75-bd67-4767-9dcd-c358fca8e5b5",
      "action": null,
      "ambiguousTargetObjectIds": "null",
      "authentication": {
        "id": "openidm-admin"
      },
      "entryType": "start",
      "eventName": "recon",
      "exception": "null",
      "linkQualifier": "null",
      "mapping": "systemXmlfileAccounts_managedUser",
      "message": "Reconciliation initiated by openidm-admin",
      "messageDetail": null,
      "reconAction": "recon",
      "reconId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8",
      "reconciling": "null",
      "situation": null,
      "sourceObjectId": "null",
      "status": null,
      "targetObjectId": "null",
      "timestamp": "2015-08-11T08:45:23.324Z",
      "transactionId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8"
    },
    {
      "_id": "77515527-b88e-477d-a9aa-0c7d994da95a",
      "action": "CREATE",
      "ambiguousTargetObjectIds": null,
      "authentication": {
        "id": "openidm-admin"
      },
      "entryType": "entry",
      "eventName": "recon",
      "exception": "null",
      "linkQualifier": "default",
      "mapping": "systemXmlfileAccounts_managedUser",
      "message": "null",
      "messageDetail": null,
      "reconAction": null,
      "reconId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8",
      "reconciling": "source",
      "situation": "ABSENT",
      "sourceObjectId": "system/xmlfile/account/bjensen",
      "status": "SUCCESS",
      "targetObjectId": "managed/user/bjensen",
      "timestamp": "2015-08-11T08:45:23.516Z",
      "transactionId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8"
    },
    {
      "_id": "3a51ae9c-a6e5-4388-95c9-da55c7c5f903",
      "action": "CREATE",
      "ambiguousTargetObjectIds": null,
      "authentication": {
        "id": "openidm-admin"
      },
      "entryType": "entry",
      "eventName": "recon",
      "exception": "null",
      "linkQualifier": "default",
      "mapping": "systemXmlfileAccounts_managedUser",
      "message": "null",
      "messageDetail": null,
      "reconAction": null,
      "reconId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8",
      "reconciling": "source",
      "situation": "ABSENT",
      "sourceObjectId": "system/xmlfile/account/scarter",
      "status": "SUCCESS",
      "targetObjectId": "managed/user/scarter",
      "timestamp": "2015-08-11T08:45:23.516Z",
      "transactionId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8"
    },
    {
      "_id": "d9113086-4df1-42a9-a6ae-d56e0f76e5b3",
      "action": null,
      "ambiguousTargetObjectIds": "null",
      "authentication": {
        "id": "openidm-admin"
      },
      "entryType": "summary",
      "eventName": "recon",
      "exception": "null",
      "linkQualifier": "null",
      "mapping": "systemXmlfileAccounts_managedUser",
      "message": "SOURCE_IGNORED: 0 MISSING: 0 FOUND: 0 AMBIGUOUS: 0 UNQUALIFIED: 0 CONFIRMED: 0
             SOURCE_MISSING: 0 ABSENT: 2 TARGET_IGNORED: 0 UNASSIGNED: 0 FOUND_ALREADY_LINKED: 0 ",
      "messageDetail": {
        "_id": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8",
        "mapping": "systemXmlfileAccounts_managedUser",
        "state": "SUCCESS",
        "stage": "COMPLETED_SUCCESS",
        "stageDescription": "reconciliation completed.",
        "progress": {
          "source": {
            "existing": {
              "processed": 2,
              "total": "2"
            }
          },
          "target": {
            "existing": {
              "processed": 0,
              "total": "0"
            },
            "created": 2
          },
          "links": {
            "existing": {
              "processed": 0,
              "total": "0"
            },
            "created": 2
          }
        },
        "situationSummary": {
          "SOURCE_IGNORED": 0,
          "MISSING": 0,
          "FOUND": 0,
          "AMBIGUOUS": 0,
          "UNQUALIFIED": 0,
          "CONFIRMED": 0,
          "SOURCE_MISSING": 0,
          "ABSENT": 2,
          "TARGET_IGNORED": 0,
          "UNASSIGNED": 0,
          "FOUND_ALREADY_LINKED": 0
        },
        "statusSummary": {
          "FAILURE": 0,
          "SUCCESS": 2
        },
        "parameters": {
          "sourceQuery": {
            "resourceName": "system/xmlfile/account",
            "_queryId": "query-all-ids"
          },
          "targetQuery": {
            "resourceName": "managed/user",
            "_queryId": "query-all-ids"
          }
        },
        "started": "2015-08-11T08:45:23.323Z",
        "ended": "2015-08-11T08:45:23.525Z",
        "duration": 202
      },
      "reconAction": "recon",
      "reconId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8",
      "reconciling": "null",
      "situation": null,
      "sourceObjectId": "null",
      "status": "SUCCESS",
      "targetObjectId": "null",
      "timestamp": "2015-08-11T08:45:23.527Z",
      "transactionId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8"
    }
  ],
  "resultCount": 4,
  "pagedResultsCookie": null,
  "remainingPagedResults": -1
} </programlisting>

  <para>
   Most of the fields in the reconciliation audit log are self-explanatory. Each
   distinct reconciliation operation is identified by its
   <literal>reconId</literal>. Each entry in the log is identified by a unique
   <literal>_id</literal>. The first log entry indicates the status for the
   complete reconciliation operation. Successive entries indicate the status for
   each record affected by the reconciliation.
  </para>
  <para>
   To obtain information about a specific log entry, include its entry
   <literal>_id</literal> in the URL. For example:
  </para>
  <screen>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/audit/recon/77515527-b88e-477d-a9aa-0c7d994da95a"</screen>
  <para>
   The following sample output shows the results of a read operation on a
   specific reconciliation audit entry. The entry shows the creation of
   bjensen's account in the managed user repository, as the result of a
   reconciliation operation.
  </para>
  <programlisting language="javascript">{
  "_id": "77515527-b88e-477d-a9aa-0c7d994da95a",
  "action": "CREATE",
  "ambiguousTargetObjectIds": null,
  "authentication": {
    "id": "openidm-admin"
  },
  "entryType": "entry",
  "eventName": "recon",
  "exception": "null",
  "linkQualifier": "default",
  "mapping": "systemXmlfileAccounts_managedUser",
  "message": "null",
  "messageDetail": null,
  "reconAction": null,
  "reconId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8",
  "reconciling": "source",
  "situation": "ABSENT",
  "sourceObjectId": "system/xmlfile/account/bjensen",
  "status": "SUCCESS",
  "targetObjectId": "managed/user/bjensen",
  "timestamp": "2015-08-11T08:45:23.516Z",
  "transactionId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8"
} </programlisting>
  <para>
   To obtain information for a specific reconciliation operation, include the
   <literal>reconId</literal> in the query. You can filter the log so that the
   query returns only the fields you want to see, by adding the
   <literal>_fields</literal> parameter.
  </para>
  <para>
   The following query returns the <literal>"mapping"</literal>,
   <literal>"timestamp"</literal>, and  <literal>"entryType"</literal> fields
   for a specific reconciliation operation.
  </para>
  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/audit/recon?_queryFilter=/reconId+eq+"4261227f-1d44-4042-ba7e-1dcbc6ac96b8"&amp;_fields=mapping,timestamp,entryType'</userinput>
<computeroutput>{
  "result": [
    {
      "mapping": "systemXmlfileAccounts_managedUser",
      "timestamp": "2015-08-11T08:45:23.527Z",
      "entryType": "summary"
    },
    {
      "mapping": "systemXmlfileAccounts_managedUser",
      "timestamp": "2015-08-11T08:45:23.516Z",
      "entryType": "entry"
    },
    {
      "mapping": "systemXmlfileAccounts_managedUser",
      "timestamp": "2015-08-11T08:45:23.324Z",
      "entryType": "start"
    },
    {
      "mapping": "systemXmlfileAccounts_managedUser",
      "timestamp": "2015-08-11T08:45:23.516Z",
      "entryType": "entry"
    }
  ],
  "resultCount": 4,
  "pagedResultsCookie": null,
  "remainingPagedResults": -1
}</computeroutput>  </screen>
  <para>
   To query the reconciliation audit log for a particular reconciliation
   situation, include the <literal>reconId</literal> and the
   <literal>situation</literal> in the query. For example, the following query
   returns all ABSENT records that were found during the specified
   reconciliation operation:
  </para>
  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/audit/recon?_queryFilter=/reconId+eq+"4261227f-1d44-4042-ba7e-1dcbc6ac96b8"+and+situation+eq+"ABSENT"'</userinput>
<computeroutput>{
  "result": [
    {
      "_id": "77515527-b88e-477d-a9aa-0c7d994da95a",
      "action": "CREATE",
      "ambiguousTargetObjectIds": null,
      "authentication": {
        "id": "openidm-admin"
      },
      "entryType": "entry",
      "eventName": "recon",
      "exception": "null",
      "linkQualifier": "default",
      "mapping": "systemXmlfileAccounts_managedUser",
      "message": "null",
      "messageDetail": null,
      "reconAction": null,
      "reconId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8",
      "reconciling": "source",
      "situation": "ABSENT",
      "sourceObjectId": "system/xmlfile/account/bjensen",
      "status": "SUCCESS",
      "targetObjectId": "managed/user/bjensen",
      "timestamp": "2015-08-11T08:45:23.516Z",
      "transactionId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8"
    },
    {
      "_id": "3a51ae9c-a6e5-4388-95c9-da55c7c5f903",
      "action": "CREATE",
      "ambiguousTargetObjectIds": null,
      "authentication": {
        "id": "openidm-admin"
      },
      "entryType": "entry",
      "eventName": "recon",
      "exception": "null",
      "linkQualifier": "default",
      "mapping": "systemXmlfileAccounts_managedUser",
      "message": "null",
      "messageDetail": null,
      "reconAction": null,
      "reconId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8",
      "reconciling": "source",
      "situation": "ABSENT",
      "sourceObjectId": "system/xmlfile/account/scarter",
      "status": "SUCCESS",
      "targetObjectId": "managed/user/scarter",
      "timestamp": "2015-08-11T08:45:23.516Z",
      "transactionId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8"
    }
  ],
  "resultCount": 2,
  "pagedResultsCookie": null,
  "remainingPagedResults": -1
} </computeroutput></screen>
 </section>

 <section xml:id="querying-activity-logs">
  <title>Querying the Activity Audit Log</title>
  <para>
   The activity logs track all operations on internal (managed) and external
   (system) objects. Entries in the activity log contain identifiers for the
   reconciliation or synchronization action that triggered an activity, and
   for the original caller and the relationships between related actions.
  </para>
  <para>
   You can access the activity logs over REST with the following call:
  </para>
  <screen>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/audit/activity?_queryFilter=true"</screen>
  <para>
   The following extract of the activity log shows one log entry that was a
   change of the <literal>telephoneNumber</literal> for user bjensen.
  </para>
  <informalexample><?dbfo pgwide="1"?>
  <programlisting language="javascript">{
      "_id": "6d8563ca-709c-4fa6-b143-9ac93b77659e",
      "after": "{ \"mail\": \"bjensen@example.com\", \"givenName\": \"Barbara\", \"sn\": \"Jensen\",
         \"description\": \"Created By XML1\", \"_id\": \"bjensen\", \"_rev\": \"2\",
         \"userName\": \"bjensen@example.com\", \"password\": { \"$crypto\": { \"value\":
         { \"iv\": \"htWJ8PP/puFWXBk6nIkKyw==\", \"data\": \"uZD8TuMEA3pAoj8tnVBEUQ==\",
         \"cipher\": \"AES/CBC/PKCS5Padding\", \"key\": \"openidm-sym-default\" },
         \"type\": \"x-simple-encryption\" } }, \"roles\": [ \"openidm-authorized\" ], \"accountStatus\": \"active\",
         \"lastPasswordSet\": \"\", \"postalCode\": \"\", \"stateProvince\": \"\", \"passwordAttempts\": \"0\",
         \"lastPasswordAttempt\": \"Tue Aug 11 2015 10:45:23 GMT+0200 (SAST)\", \"postalAddress\": \"\",
         \"address2\": \"\", \"country\": \"\", \"city\": \"\", \"effectiveRoles\": [ \"openidm-authorized\" ],
         \"effectiveAssignments\": [  ], \"telephoneNumber\": \"+44987584736\" }",
      "authentication": {
        "id": "openidm-admin"
      },
      "before": "{ \"mail\": \"bjensen@example.com\", \"givenName\": \"Barbara\", \"sn\": \"Jensen\",
         \"description\": \"Created By XML1\", \"_id\": \"bjensen\", \"_rev\": \"1\",
         \"userName\": \"bjensen@example.com\", \"password\": { \"$crypto\": { \"value\":
         { \"iv\": \"iKzufAq4XvT/y7jKNzoVBQ==\", \"data\": \"jkNUa49Nmi1cG+JRyLsT1w==\",
         \"cipher\": \"AES/CBC/PKCS5Padding\", \"key\": \"openidm-sym-default\" },
         \"type\": \"x-simple-encryption\" } }, \"telephoneNumber\": \"1234567\", \"roles\": [ \"openidm-authorized\" ],
         \"accountStatus\": \"active\", \"lastPasswordSet\": \"\", \"postalCode\": \"\", \"stateProvince\": \"\",
         \"passwordAttempts\": \"0\", \"lastPasswordAttempt\": \"Tue Aug 11 2015 10:45:23 GMT+0200 (SAST)\",
         \"postalAddress\": \"\", \"address2\": \"\", \"country\": \"\", \"city\": \"\", \"effectiveRoles\":
         [ \"openidm-authorized\" ], \"effectiveAssignments\": [  ] }",
      "changedFields": [],
      "eventName": "activity",
      "message": null,
      "objectId": "managed/user/bjensen",
      "passwordChanged": "false",
      "resourceOperation": {
        "operation": {
          "detail": null,
          "method": "PATCH"
        },
        "protocol": "CREST",
        "uri": null
      },
      "revision": "2",
      "runAs": "openidm-admin",
      "status": "SUCCESS",
      "timestamp": "2015-08-11T09:50:46.237Z",
      "transactionId": "af9c961c-a7c5-49a2-8bb7-a43b5b177a7c"
    },
   ...</programlisting>
  </informalexample>
  <para>
   To return the activity information for a specific action, include the
   <literal>_id</literal> of the action in the URL, for example:
  </para>
  <informalexample><?dbfo pgwide="1"?>
   <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/audit/activity/594dee73-d6a5-41cd-a332-1e9127c9b704'</userinput>
<computeroutput>{
  "result": [
    {
      "_id": "594dee73-d6a5-41cd-a332-1e9127c9b704",
      "after": "{ \"mail\": \"bjensen@example.com\", \"givenName\": \"Barbara\", \"sn\": \"Jensen\",
        \"description\": \"Created By XML1\", \"_id\": \"bjensen\", \"userName\": \"bjensen@example.com\",
        \"password\": { \"$crypto\": { \"value\": { \"iv\": \"iKzufAq4XvT/y7jKNzoVBQ==\", \"data\":
        \"jkNUa49Nmi1cG+JRyLsT1w==\", \"cipher\": \"AES/CBC/PKCS5Padding\", \"key\": \"openidm-sym-default\" },
        \"type\": \"x-simple-encryption\" } }, \"telephoneNumber\": \"1234567\", \"roles\": [ \"openidm-authorized\" ],
        \"accountStatus\": \"active\", \"lastPasswordSet\": \"\", \"postalCode\": \"\", \"stateProvince\": \"\",
        \"passwordAttempts\": \"0\", \"lastPasswordAttempt\": \"Tue Aug 11 2015 10:45:23 GMT+0200 (SAST)\",
        \"postalAddress\": \"\", \"address2\": \"\", \"country\": \"\", \"city\": \"\", \"effectiveRoles\":
        [ \"openidm-authorized\" ], \"effectiveAssignments\": [  ], \"_rev\": \"1\" }",
      "authentication": {
        "id": "openidm-admin"
      },
      "before": "null",
      "changedFields": [],
      "eventName": "activity",
      "message": "create",
      "objectId": "managed/user/bjensen",
      "passwordChanged": "false",
      "resourceOperation": {
        "operation": {
          "detail": null,
          "method": "CREATE"
        },
        "protocol": "CREST",
        "uri": null
      },
      "revision": "1",
      "runAs": "openidm-admin",
      "status": "SUCCESS",
      "timestamp": "2015-08-11T08:45:23.506Z",
      "transactionId": "4261227f-1d44-4042-ba7e-1dcbc6ac96b8"
    }
  ],
  "resultCount": 1,
  "pagedResultsCookie": null,
  "remainingPagedResults": -1
}}</computeroutput></screen></informalexample>
  <para>
   Each action in the activity log has a <literal>transactionId</literal> that
   is the same as the <literal>transactionId</literal> that was assigned to the
   incoming or initiating request. So, for example, if an HTTP request invokes a
   script that changes a user's password, the HTTP request is assigned a
   <literal>transactionId</literal>. The action taken by the script is assigned
   the same <literal>transactionId</literal>, which enables you to track the
   complete set of changes resulting from a single action. You can query the
   activity log for all actions that resulted from a specific transaction, by
   including the <literal>transactionId</literal> in the query.
  </para>
  <para>
   The following command returns all actions in the activity log that happened
   as a result of a reconciliation, with a specific <literal>transactionId</literal>.
   The results of the query are restricted to only the <literal>objectId</literal>
   and the <literal>resourceOperation</literal>. You can see from the output
   that the reconciliation with this <literal>transactionId</literal> resulted
   in two CREATEs and two UPDATEs in the managed repository.
  </para>
  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/audit/activity?_queryFilter=/transactionId+eq+"f4bd1af8-999d-48e6-ae89-6e9f2f601bb3"&amp;_fields=objectId,resourceOperation'</userinput></screen>
  <para>
   The following sample output shows the result of a query that requests details
   of the password change for bjensen.
  </para>
  <programlisting language="javascript">{
  "result": [
    {
      "objectId": "managed/user/bjensen",
      "resourceOperation": {
        "operation": {
          "detail": null,
          "method": "UPDATE"
        },
        "protocol": "CREST",
        "uri": null
      }
    },
    {
      "objectId": "managed/user/scarter",
      "resourceOperation": {
        "operation": {
          "detail": null,
          "method": "UPDATE"
        },
        "protocol": "CREST",
        "uri": null
      }
    },
    {
      "objectId": "managed/user/tmorris",
      "resourceOperation": {
        "operation": {
          "detail": null,
          "method": "CREATE"
        },
        "protocol": "CREST",
        "uri": null
      }
    },
    {
      "objectId": "managed/user/lvosloo",
      "resourceOperation": {
        "operation": {
          "detail": null,
          "method": "CREATE"
        },
        "protocol": "CREST",
        "uri": null
      }
    }
  ],
  "resultCount": 4,
  "pagedResultsCookie": null,
  "remainingPagedResults": -1
} </programlisting>
 </section>

 <section xml:id="querying-sync-logs">
  <title>Querying the Synchronization Audit Log</title>
  <para>
   LiveSync and implicit sync operations are logged in the file
   <filename>/path/to/openidm/audit/sync.csv</filename> and in the repository.
   You can read the synchronization audit logs over the REST interface, as
   outlined in the following examples.
  </para>
  <para>
   To return all operations logged in the synchronization audit log, query the
   <literal>audit/sync</literal> endpoint, as follows:
  </para>
  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/audit/sync?_queryFilter=true"</userinput>
<computeroutput>{
  "result": [
    {
      "_id": "87373c88-ce43-4cfa-a66e-c4ba469c41de",
      "action": "UPDATE",
      "authentication": {
        "id": "openidm-admin"
      },
      "eventName": "sync",
      "exception": "null",
      "linkQualifier": "default",
      "mapping": "managedUser_systemLdapAccounts",
      "message": "null",
      "messageDetail": null,
      "situation": "CONFIRMED",
      "sourceObjectId": "managed/user/4dc5975c-2084-47a5-9441-d255c45b9991",
      "status": "SUCCESS",
      "targetObjectId": "uid=superadmin,ou=People,dc=example,dc=com",
      "timestamp": "2015-08-11T13:04:55.715Z",
      "transactionId": "cb6ef219-e6ee-457f-a8d5-00281013f3f2"
    },
    {
      "_id": "c5e8af01-7d55-4b01-a327-7a019732d0ed",
      "action": "UPDATE",
      "authentication": {
        "id": "openidm-admin"
      },
      "eventName": "sync",
      "exception": "null",
      "linkQualifier": "default",
      "mapping": "managedUser_systemLdapAccounts",
      "message": "null",
      "messageDetail": null,
      "situation": "CONFIRMED",
      "sourceObjectId": "managed/user/1625fe94-0d6d-4f1a-bb74-863ef5c40df8",
      "status": "SUCCESS",
      "targetObjectId": "uid=user.8,ou=People,dc=example,dc=com",
      "timestamp": "2015-08-11T13:04:55.413Z",
      "transactionId": "cb6ef219-e6ee-457f-a8d5-00281013f3f2"
    },
...</computeroutput></screen>
  <para>
   Most of the fields in the synchronization audit log are self-explanatory.
   Each entry in the log synchronization operation is identified by a unique
   <literal>_id</literal>. Each <emphasis>synchronization operation</emphasis>
   is identified with a <literal>transactionId</literal>. The same
   <literal>transactionId</literal> is assigned to the incoming or initiating
   request - so if a modification to a user entry triggers an implicit
   synchronization operation, both the sync operation and the original change
   operation have the same <literal>transactionId</literal>. You can query the
   sync log for all actions that resulted from a specific transaction, by
   including the <literal>transactionId</literal> in the query.
  </para>
  <para>
   To obtain information on a specific sync audit log entry, include its entry
   <literal>_id</literal> in the URL. For example:
  </para>
  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/audit/sync/c5e8af01-7d55-4b01-a327-7a019732d0ed"</userinput>
<computeroutput>{
  "_id": "c5e8af01-7d55-4b01-a327-7a019732d0ed",
  "action": "UPDATE",
  "authentication": {
    "id": "openidm-admin"
  },
  "eventName": "sync",
  "exception": "null",
  "linkQualifier": "default",
  "mapping": "managedUser_systemLdapAccounts",
  "message": "null",
  "messageDetail": null,
  "situation": "CONFIRMED",
  "sourceObjectId": "managed/user/1625fe94-0d6d-4f1a-bb74-863ef5c40df8",
  "status": "SUCCESS",
  "targetObjectId": "uid=user.8,ou=People,dc=example,dc=com",
  "timestamp": "2015-08-11T13:04:55.413Z",
  "transactionId": "cb6ef219-e6ee-457f-a8d5-00281013f3f2"
}</computeroutput>  </screen>
 </section>
  <section xml:id="querying-auth-log">
   <title>Querying the Authentication Audit Log</title>
   <para>
    The authentication log includes details of all successful and failed
    authentication attempts. To obtain the complete audit log over REST, use
    the following query:
   </para>
   <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/audit/authentication?_queryFilter=true"</userinput>
<computeroutput>{
  "result": [
    {
      "_id": "9b4fa228-b35e-45a0-bab1-ffacdbfc7ebe",
      "authentication": {
        "id": "openidm-admin"
      },
      "context": {
        "id": "openidm-admin",
        "component": "repo/internal/user",
        "roles": [
          "openidm-admin",
          "openidm-authorized"
        ],
        "ipAddress": "0:0:0:0:0:0:0:1"
      },
      "entries": [
        {
          "moduleId": "Session-IDMJaspiModuleWrapper",
          "result": "SUCCESSFUL",
          "info": {
            "org.forgerock.authentication.principal": "openidm-admin"
          }
        }
      ],
      "eventName": "authentication",
      "principal": [
        "openidm-admin"
      ],
      "result": "SUCCESSFUL",
      "sessionId": "bf663ed1-9ba1-4882-8622-71d9745ee11e",
      "transactionId": "956e1e48-ef64-409d-8d48-adb03a8ff30e"
    },
...
  ],
  "resultCount": 131,
  "pagedResultsCookie": null,
  "remainingPagedResults": -1
}</computeroutput></screen>
   <para>
    You can filter the results to return only those records that you are
    interested in. For example, the following query returns all authentication
    attempts made by a specific user (<literal>user.0</literal>) but displays
    only the security context and the result of the authentication attempt.
   </para>
   <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/audit/authentication?_queryFilter=/principal+eq+"user.0"&amp;_fields=context,result'</userinput>
<computeroutput>{
  "result": [
    {
      "context": {
        "id": "e98fdfbe-d436-4e09-b44e-f6727b1e293d",
        "component": "managed/user",
        "roles": [
          "openidm-authorized"
        ],
        "ipAddress": "0:0:0:0:0:0:0:1"
      },
      "result": "SUCCESSFUL"
    },
    {
      "context": {
        "ipAddress": "0:0:0:0:0:0:0:1"
      },
      "result": "FAILED"
    },
    {
      "context": {
        "ipAddress": "0:0:0:0:0:0:0:1"
      },
      "result": "FAILED"
    },
    {
      "context": {
        "id": "e98fdfbe-d436-4e09-b44e-f6727b1e293d",
        "component": "managed/user",
        "roles": [
          "openidm-authorized"
        ],
        "ipAddress": "0:0:0:0:0:0:0:1"
      },
      "result": "SUCCESSFUL"
    },
    {
      "context": {
        "id": "e98fdfbe-d436-4e09-b44e-f6727b1e293d",
        "component": "managed/user",
        "roles": [
          "openidm-authorized"
        ],
        "ipAddress": "0:0:0:0:0:0:0:1"
      },
      "result": "SUCCESSFUL"
    },
    {
      "context": {
        "id": "e98fdfbe-d436-4e09-b44e-f6727b1e293d",
        "component": "managed/user",
        "roles": [
          "openidm-authorized"
        ],
        "ipAddress": "0:0:0:0:0:0:0:1"
      },
      "result": "SUCCESSFUL"
    },
...</computeroutput>   </screen>
  </section>
 </section>
</chapter>
