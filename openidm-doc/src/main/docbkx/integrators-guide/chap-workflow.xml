<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-workflow'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Integrating Business Processes and Workflows</title>
 <indexterm>
  <primary>Workflow</primary>
 </indexterm>
 <indexterm>
  <primary>Business processes</primary>
 </indexterm>

 <para>Key to any identity management solution is the ability to provide
 workflow-driven provisioning activities, whether for self-service actions
 such as requests for entitlements, roles or resources, running sunrise or
 sunset processes, handling approvals with escalations, or performing
 maintenance.</para>
 
 <para>OpenIDM provides an embedded workflow and business process engine
 based on Activiti and the Business Process Model and Notation (BPMN) 2.0
 standard.</para>
 
 <para>More information about Activiti and the Activiti project can be found
 at <link xlink:href="http://www.activiti.org" xlink:show="new" />.</para>
 
 <section xml:id="about-bmpm-2-activiti">
  <title>BPMN 2.0 and the Activiti Tools</title>

  <para>Business Process Model and Notation 2.0 is the result of consensus
  among Business Process Management (BPM) system vendors. The <link
  xlink:href="http://omg.org/" xlink:show="new">Object Management Group</link>
  (OMG) has developed and maintained the <link xlink:show="new"
  xlink:href="http://www.omg.org/spec/BPMN/">BPMN</link> standard since
  2004.</para>

  <para>The first version of the BPMN specification focused only on graphical
  notation, and quickly became popular with the business analyst audience.
  BPMN 1.x defines how constructs such as human tasks, executable scripts, and
  automated decisions are visualized in a vendor-neutral, standard way. The
  second version of BPMN extends that focus to include execution semantics,
  and a common exchange format. Thus, BPMN 2.0 process definition models
  can be exchanged not only between different graphical editors, but can also
  be executed as is on any BPMN 2.0-compliant engine, such as the engine
  embedded in OpenIDM.</para>

  <para>Using BPMN 2.0, you can add artifacts describing workflow and business
  process behavior to OpenIDM for provisioning and other purposes. For example,
  you can craft the actual artifacts defining business processes and workflow
  in a text editor, or using a special Eclipse plugin. The Eclipse plugin 
  provides visual design capabilities, simplifying packaging and deployment of 
  the artifact to OpenIDM. See the <link
  xlink:href="http://docs.codehaus.org/display/ACT/Activiti+BPMN+2.0+Eclipse+Plugin"
  xlink:show="new">Activiti BPMN 2.0 Eclipse Plugin</link> documentation for
  instructions on installing Activiti Eclipse BPMN 2.0 Designer.</para>
  
  <para>Also, read the Activiti <citetitle>User Guide</citetitle> section
  covering <link xlink:href="http://www.activiti.org/userguide/#bpmnConstructs"
  xlink:show="new"><citetitle>BPMN 2.0 Constructs</citetitle></link>, which
  describes in detail the graphical notations and XML representations for
  events, flows, gateways, tasks, and process constructs.</para>

  <para>
   With the latest version of Activiti, JavaScript tasks can be added to
   workflow definitions. However, OpenIDM functions cannot be called from a
   JavaScript task in a workflow. Therefore, you can use JavaScript for
   non-OpenIDM workflow tasks, but you must use the
   <literal>activiti:expression</literal> construct to call OpenIDM functions.
   </para>
 </section>
 
<section xml:id="setting-up-activiti">
  <title>Setting Up Activiti Integration With OpenIDM</title>

  <para>
   OpenIDM embeds an Activiti Process Engine that is started in the OpenIDM OSGi
   container.
  </para>

  <para>
   After OpenIDM has been installed (as described in the
   <link xlink:href="install-guide#chap-install"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Installation
   Guide</citetitle></link>), start OpenIDM, and run the
   <command>scr list</command> command at the console to check that the workflow
   bundle is active.
  </para>

  <screen>-> OpenIDM ready
<userinput>scr list</userinput>
   Id   State          Name
...
[  39] [active       ] org.forgerock.openidm.workflow
...</screen>
  
  <para>
   OpenIDM reads workflow definitions from the
   <literal>/path/to/openidm/workflow</literal> directory. To test workflow
   integration, at least one workflow definition must exist in this directory.
  </para>
  <para>
   A sample workflow (<filename>example.bpmn20.xml</filename>) is provided in
   the <literal>/path/to/openidm/samples/misc</literal> directory. Copy this
   workflow to the <literal>/path/to/openidm/workflow</literal> directory to
   test the workflow integration.
  </para>
  
  <screen>$ cd /path/to/openidm
$ cp samples/misc/example.bpmn20.xml workflow/</screen>
  
  <para>
   Verify the workflow integration by using the REST API. The following
   REST call lists the defined workflows:
  </para>
  
  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/processdefinition?_queryId=query-all-ids&amp;_prettyPrint=true"
  </userinput></screen>
  <para>
   The sample workflow definition that you copied in the previous step is named
   <literal>osgiProcess</literal>. The result of the preceding REST call
   therefore includes output similar to the following:
  </para>
  
  <screen><computeroutput>{
...
  "result":[
     {
        ...
        "key": "osgiProcess",
        ...
        "name":"Osgi process",
        ...
        "_id":"osgiProcess:1:3",
        ...
     }
        ]
}</computeroutput></screen>

  <para>
   The <literal>osgiProcess</literal> workflow calls OpenIDM, queries the
   available workflow definitions from Activiti, then prints the list of
   workflow definitions to the OpenIDM logs. Invoke the <literal>osgiProcess
  </literal> workflow with the following REST call:
  </para>
  
  <screen width="100"><?dbfo pgwide="1"?>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request POST \
 --data '{"_key":"osgiProcess"}' \
 "https://localhost:8443/openidm/workflow/processinstance?_action=create&amp;_prettyPrint=true"
</userinput></screen>
  
  <para>
   The workflow prints the list of workflow definitions to the OpenIDM console.
   With the default sample, you should see something like this on the console:
  </para>
  <screen><computeroutput>
script task using resolver: [
  pagedResultsCookie:null,
  remainingPagedResults:-1,
  result:[
    [
	  tenantId:,
	  candidateStarterGroupIdExpressions:[],
	  candidateStarterUserIdExpressions:[],
	  participantProcess:null,
	  processDiagramResourceName:null,
	  historyLevel:null,
	  hasStartFormKey:false,
	  laneSets:[],
	  version:1, _id:osgiProcess:1:3,
	  description:null,
	  name:Osgi process,
	  executionListeners:[:],
	  key:osgiProcess,
	  resourceName:OSGI-INF/activiti/example.bpmn20.xml,
	  ioSpecification:null,
	  taskDefinitions:null,
	  suspensionState:1,
	  deploymentId:1,
	  properties:[:],
	  startFormHandler:null,
	  suspended:false,
	  variables:null,
	  _rev:1,
	  revisionNext:2,
	  category:Examples,
	  eventSupport:[:],
	  graphicalNotationDefined:false
	]
  ]
]
script task using expression resolver: [
  pagedResultsCookie:null,
  remainingPagedResults:-1,
  result:[
    [
	  tenantId:,
	  candidateStarterGroupIdExpressions:[],
      ...
]</computeroutput></screen>

 <section xml:id="configuring-activiti-engine">
  <title>Configuring the Activiti Engine</title>

  <para>
   The OpenIDM Activiti module is configured in a file named
   <filename>conf/workflow.json</filename>. If this file is absent from the
   configuration, the workflow module is unavailable for use. In the default
   OpenIDM installation, the <filename>workflow.json</filename> file has the
   following basic configuration:
  </para>
  
  <programlisting language="javascript">
{
   "enabled"  : "true"
}
  </programlisting>
  
  <para>
   You can disable the workflow module by setting the
   <literal>"enabled"</literal> property to <literal>"false"</literal>.
  </para>
  
  <para>
   There are several additional configuration properties for the Activiti
   module. A sample <filename>workflow.json</filename> file that includes all
   configurable properties, is provided in <literal>samples/misc</literal>. To
   configure an Activiti engine beyond the default configuration, edit this
   sample file and copy it to the <literal>/path/to/openidm/conf</literal>
   directory.
  </para>
  
  <para>
   The sample <literal>workflow.json</literal> file contains the following
   configuration:
  </para>
  <programlisting language="javascript">
  {
    "enabled"  : "true",
    "location" : "remote",
    "engine" : {
        "url" : "http://localhost:9090/openidm-workflow-remote-<?eval ${serverDocTargetVersion}?>",
        "username" : "youractivitiuser",
        "password" : "youractivitipassword"
    },
    "mail" : {
        "host" : "yourserver.smtp.com",
        "port" : 587,
        "username" : "yourusername",
        "password" : "yourpassword",
        "starttls" : true
    },
    "history" : "audit"
}
  </programlisting>
  <itemizedlist>
   <para>
    These fields have the following meaning:
   </para>
   <listitem>
    <para>
     <literal>enabled</literal>. Indicates whether the Activiti module is
     enabled for use. Possible values are <literal>true</literal> or
     <literal>false</literal>. The default value is <literal>true</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>mail</literal>. Specifies the details of the mail server that
     Activiti will use to send email notifications. By default, Activiti uses
     the mail server <literal>localhost:25</literal>. To specify a different
     mail server, enter the details of the mail server here.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <literal>host</literal>. The host of the mail server.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>port</literal>. The port number of the mail server.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>username</literal>. The user name of the account that connects
       to the mail server.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>password</literal>. The password for the user specified above.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>startTLS</literal>. Whether startTLS should be used to secure
       the connection.
      </para>
     </listitem>
    </itemizedlist>  
   </listitem>
   <listitem>
    <para>
     <literal>history</literal>. Determines the history level that should be
     used for the Activiti engine. For more information, see
     <link linkend="activiti-history-level">Configuring the Activiti History
     Level</link>.
    </para>
   </listitem>
  </itemizedlist>
  
  <section xml:id="activiti-history-level">
    <title>Configuring the Activiti History Level</title>
    <para>
     The Activiti history level determines how much historical information is
     retained when workflows are executed. You can configure the history level
     by setting the <literal>history</literal> property in the
     <literal>workflow.json</literal> file, for example:
    </para>
    <programlisting>"history" : "audit"</programlisting>
    <itemizedlist>
     <para>
      The following history levels can be configured:
     </para>
     <listitem>
      <para>
       <literal>none</literal>. No history archiving is done. This level results
       in the best performance for workflow execution, but no historical
       information is available.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>activity</literal>. Archives all process instances and activity
       instances. No details are archived.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>audit</literal>. This is the default level. All process
       instances, activity instances and submitted form properties are archived
       so that all user interaction through forms is traceable and can be
       audited.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>full</literal>. This is the highest level of history archiving
       and has the greatest performance impact. This history level stores all
       the information that is stored for the <literal>audit</literal> level, as
       well as any process variable updates.
      </para>
     </listitem>
    </itemizedlist>
   </section>
 </section> 

 <section xml:id="defining-activiti-workflows">
  <title>Defining Activiti Workflows</title>
  <para>
   The following section outlines the process to follow when you create an
   Activiti workflow for OpenIDM. Before you start creating workflows, you must
   configure the Activiti engine, as described in <link
  linkend="configuring-activiti-engine">Configuring the Activiti Engine</link>.
  </para>
  <procedure>
   <step>
    <para>
     Define your workflow in a text file, either using an editor, such as
     Activiti Eclipse BPMN 2.0 Designer, or a simple text editor.
    </para>
   </step>
   <step>
    <para>
     Package the workflow definition file as a <literal>.bar</literal> file
     (Business Archive File). If you are using Eclipse to define the workflow, a
     <literal>.bar</literal> file is created when you select "Create deployment
     artifacts". A <literal>.bar</literal> file is essentially the same as a
     <literal>.zip</literal> file, but with the <literal>.bar</literal>
     extension.
    </para>
   </step>
   <step>
    <para>
     Copy the <literal>.bar</literal> file to the
     <literal>openidm/workflow</literal> directory.
    </para>
   </step>
   <step>
    <para>
     Invoke the workflow using a script (in <literal>openidm/script/</literal>)
     or directly using the REST interface. For more information, see <link
     linkend="invoking-activiti-workflows">Invoking Activiti Workflows</link>.
    </para>
    <para>
     You can also schedule the workflow to be invoked repeatedly, or at a future
     time. For more information, see the <link
     xlink:href="integrators-guide#appendix-scheduling"
     xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Scheduler
     Reference</citetitle></link>.
    </para>
   </step>
   <!--TODO Add a new section that specifically describes scheduling workflows -->
  </procedure>
 </section>

 <section xml:id="invoking-activiti-workflows">
  <title>Invoking Activiti Workflows</title>
  <para>
   You can invoke workflows and business processes from any trigger point within
   OpenIDM, including reacting to situations discovered during reconciliation.
   Workflows can be invoked from script files, using the
   <literal>openidm.action()</literal> function, or directly from the REST
   interface.
  </para>
  <para>
   The following sample script extract shows how to invoke a workflow from a
   script file:
  </para>
  <programlisting language="javascript">
/*
 * Calling 'myWorkflow' workflow
 */

var params = {
 "_key": "myWorkflow"
};

openidm.action('workflow/processinstance', {"_action" : "create"}, params);
  </programlisting>

  <para>
   You can invoke the same workflow from the REST interface by sending the
   following REST call to OpenIDM:
  </para>
  <screen>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request POST \
 --data '{"_key":"myWorkflow"}' \
 "https://localhost:8443/openidm/workflow/processinstance?_action=create"
  </screen>

  <itemizedlist>
   <para>
    There are two ways in which you can specify the workflow definition that is
    used when a new workflow instance is started.
   </para>
   <listitem>
    <para>
     <literal>_key</literal> specifies the <literal>id</literal> attribute of
     the workflow process definition, for example:
    </para>
    <programlisting language="javascript">
&lt;process id="sendNotificationProcess" name="Send Notification Process"&gt;
    </programlisting>
    <para>
     If there is more than one workflow definition with the same
     <literal>_key</literal> parameter, the latest deployed version of the
     workflow definition is invoked.
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>_processDefinitionId</literal> specifies the ID that is generated
     by the Activiti Process Engine when a workflow definition is deployed, for
     example:
    </para>
    <programlisting language="javascript">
"sendNotificationProcess:1:104";
    </programlisting>
    <para>
     You can obtain the <literal>processDefinitionId</literal> by querying the
     available workflows, for example:
    </para>
    <programlisting language="javascript">
 {
  "result": [
    {
      "name": "Process Start Auto Generated Task Auto Generated",
      "_id": "ProcessSAGTAG:1:728"
    },
    {
      "name": "Process Start Auto Generated Task Empty",
      "_id": "ProcessSAGTE:1:725"
    },
    ...     
    </programlisting>
    <para>
     If you specify a <literal>_key</literal> and a
     <literal>_processDefinitionId</literal>, the
     <literal>_processDefinitionId</literal> is used because it is more precise.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   You can use the optional <literal>_businessKey</literal> parameter to add
   specific business logic information to the workflow when it is invoked. For
   example, the following workflow invocation assigns the workflow a business
   key of <literal>"newOrder"</literal>. This business key can later be used to
   query "newOrder" processes.
  </para>
  <screen>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request POST \
 --data '{"_key":"myWorkflow", "_businessKey":"newOrder"}' \
 "https://localhost:8443/openidm/workflow/processinstance?_action=create"</screen>
 </section>

 <section xml:id="querying-activiti-workflows">
  <title>Querying Activiti Workflows</title>

  <para>
   The Activiti implementation supports filtered queries that enable you to
   query the running process instances and tasks, based on specific query
   parameters. To perform a filtered query send a GET request to the
   <literal>workflow/processinstance</literal> context path, including the query
   in the URL.
  </para>
  <para>
   For example, the following query returns all process instances
   with the business key <literal>"newOrder"</literal>, as invoked in the
   previous example.
  </para>
  <screen width="102">$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/processinstance?_queryId=filtered-query
 &amp;businessKey=newOrder"
  </screen>  
  <para>
   Any Activiti properties can be queried using the same notation, for example,
   <literal>processDefinitionId=managedUserApproval:1:6405</literal>. The query
   syntax applies to all queries with <literal>_queryId=filtered-query</literal>.
   The following query returns all process instances that were started by the
   user <literal>openidm-admin</literal>:
  </para>
  <screen width="102">$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/processinstance?_queryId=filtered-query
 &amp;startUserId=openidm-admin"
  </screen>
  <para>
   You can also query process instances based on the value of any process
   instance variable, by prefixing the variable name with
   <literal>_var-</literal>. For example:
  </para>
  <screen>_var-processvariablename=processvariablevalue</screen>
  <para>
   The following query returns all process instances that were started by the
   user <literal>openidm-admin</literal>:
  </para>
  </section>
 </section>

 <section xml:id="workflows-REST">
  <title>Managing Workflows Over the REST Interface</title>
  <para>
   In addition to the queries described previously, the following examples show
   the context paths that are exposed for managing workflows over the REST
   interface. The example output is based on the sample workflow that is
   provided in <literal>openidm/samples/sample9</literal>.
  </para>
  <variablelist>
   <varlistentry>
    <term><literal>openidm/workflow/processdefinition</literal></term>
    <listitem>
     <para>
      List the available workflow definitions:
     </para>
     <screen width="102"><userinput>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/processdefinition?_queryId=query-all-ids&amp;_prettyPrint=true"</userinput>
      <computeroutput>{
  "result" : [ {
    "tenantId" : "",
    "candidateStarterGroupIdExpressions" : [ ],
    "candidateStarterUserIdExpressions" : [ ],
    "participantProcess" : null,
    "processDiagramResourceName" : null,
    "historyLevel" : null,
    "hasStartFormKey" : false,
    "laneSets" : [ ],
    "version" : 1,
    "_id" : "managedUserApproval:1:3",
    "description" : null,
    "name" : "Managed User Approval Workflow",
    "executionListeners" : { },
    "key" : "managedUserApproval",
    "resourceName" : "OSGI-INF/activiti/managedUserApproval.bpmn20.xml",
    "ioSpecification" : null,
    "taskDefinitions" : null,
    "suspensionState" : 1,
    "deploymentId" : "1",
    "properties" : { },
    "startFormHandler" : null,
    "suspended" : false,
    "variables" : null,
    "_rev" : 1,
    "revisionNext" : 2,
    "category" : "Examples",
    "eventSupport" : { },
    "graphicalNotationDefined" : false
  } ],
  "resultCount" : 1,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}     </computeroutput></screen>
     <para>
      List the workflows, based on certain filter criteria:
     </para>
     <screen width="102"><userinput>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/processdefinition?_queryId=filtered-query&amp;category=Examples"
      </userinput>
      <computeroutput>{
  "result": [
    {
      ...
      "name": "Managed User Approval Workflow",
      "_id": "managedUserApproval:1:3"
      ...
    }
  ]
}</computeroutput></screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>openidm/workflow/processdefinition/{id}</literal></term>
    <listitem>
     <para>
      Obtain detailed information for a process definition, based on the ID. You
      can determine the ID by querying all the available process definitions.
     </para>
     <screen width="102"><userinput>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/processdefinition/managedUserApproval:1:3?&amp;_prettyPrint=true"</userinput>
      <computeroutput>{
  "tenantId" : "",
  "candidateStarterGroupIdExpressions" : [ ],
  "candidateStarterUserIdExpressions" : [ ],
  "participantProcess" : null,
  "processDiagramResourceName" : null,
  "historyLevel" : null,
  "hasStartFormKey" : false,
  "laneSets" : [ ],
  "version" : 1,
  "formProperties" : [ ],
  "_id" : "managedUserApproval:1:3",
  "description" : null,
  "name" : "Managed User Approval Workflow",
  "executionListeners" : {
    "end" : [ { } ]
  },
  "key" : "managedUserApproval",
  "resourceName" : "OSGI-INF/activiti/managedUserApproval.bpmn20.xml",
  "ioSpecification" : null,
  "taskDefinitions" : {
    "evaluateRequest" : {
      "assigneeExpression" : {
        "expressionText" : "openidm-admin"
      },
      "candidateGroupIdExpressions" : [ ],
      "candidateUserIdExpressions" : [ ],
      "categoryExpression" : null,
      "descriptionExpression" : null,
      "dueDateExpression" : null,
      "key" : "evaluateRequest",
      "nameExpression" : {
        "expressionText" : "Evaluate request"
      },
      "ownerExpression" : null,
      "priorityExpression" : null,
      "taskFormHandler" : {
        "deploymentId" : "1",
        "formKey" : null,
        "formPropertyHandlers" : [ {
          "defaultExpression" : null,
          "id" : "requesterName",
          "name" : "Requester's name",
          "readable" : true,
          "required" : false,
          "type" : null,
          "variableExpression" : {
            "expressionText" : "${sourceId}"
          },
          "variableName" : null,
          "writable" : false
        }, {
          "defaultExpression" : null,
          "id" : "requestApproved",
          "name" : "Do you approve the request?",
          "readable" : true,
          "required" : true,
          "type" : {
            "name" : "enum",
            "values" : {
              "true" : "Yes",
              "false" : "No"
            }
          },
          "variableExpression" : null,
          "variableName" : null,
          "writable" : true
        } ]
      },
      "taskListeners" : {
        "assignment" : [ { } ],
        "create" : [ { } ]
      }
    }
  },
  "suspensionState" : 1,
  "deploymentId" : "1",
  "properties" : {
    "documentation" : null
  },
  "startFormHandler" : {
    "deploymentId" : "1",
    "formKey" : null,
    "formPropertyHandlers" : [ ]
  },
  "suspended" : false,
  "variables" : { },
  "_rev" : 2,
  "revisionNext" : 3,
  "category" : "Examples",
  "eventSupport" : { },
  "graphicalNotationDefined" : false
}       </computeroutput></screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>openidm/workflow/processinstance</literal></term>
      <listitem>
       <para>
        Obtain the list of running workflows (process instances). The query
        returns a list of IDs. For example:
       </para>
       <screen><userinput>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/processinstance?_queryId=query-all-ids&amp;_prettyPrint=true"
        </userinput>
        <computeroutput>{
  "result" : [ {
    "tenantId" : "",
    "businessKey" : null,
    "queryVariables" : null,
    "durationInMillis" : null,
    "processVariables" : { },
    "endTime" : null,
    "superProcessInstanceId" : null,
    "startActivityId" : "start",
    "startTime" : "2014-04-25T09:54:30.035+02:00",
    "startUserId" : "openidm-admin",
    "_id" : "4",
    "endActivityId" : null,
    "processInstanceId" : "4",
    "processDefinitionId" : "managedUserApproval:1:3",
    "deleteReason" : null
  } ],
  "resultCount" : 1,
  "pagedResultsCookie" : null,
  "remainingPagedResults" : -1
}</computeroutput></screen>
      <para>
       Obtain the list of running workflows based on specific filter criteria.
      </para>
      <screen>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/processinstance?_queryId=
filtered-query&amp;businessKey=myBusinessKey"</screen>
      <para>Start a workflow process instance. For example:</para>
      <screen width="92"><userinput>$ curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --data '{"_key":"managedUserApproval"}' \
 --request POST \
 "https://localhost:8443/openidm/workflow/processinstance?_action=create&amp;_prettyPrint=true"</userinput>
       <computeroutput>{
  "_id" : "4",
  "processInstanceId" : "4",
  "status" : "suspended",
  "businessKey" : null,
  "processDefinitionId" : "managedUserApproval:1:3"
}</computeroutput></screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>openidm/workflow/processinstance/{id}</literal></term>
      <listitem>
       <para>Obtain the details of the specified process instance. For example:</para>
       <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/processinstance/4"
        </userinput>
        <computeroutput>{
  "deleteReason": null,
  "processDefinitionId": "contractorOnboarding:1:3",
  "_rev": "0",
  "startTime": "2012-12-18T22:04:50.549+02:00",
  "startUserId": "user1",
  "_id": "4",
  "businessKey": null,
  "durationInMillis": null,
  "endTime": null,
  "superProcessInstanceId": null
}</computeroutput></screen>

       <para>Stop the specified process instance. For example:</para>
        <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request DELETE \
 "https://localhost:8443/openidm/workflow/processinstance/4"</userinput>
        </screen>
       </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>openidm/workflow/taskdefinition</literal></term>
      <listitem>
       <para>
        Query a task definition based on the process definition ID
        and the task name (<literal>taskDefinitionKey</literal>). For example:</para>
        <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/processdefinition/contractorOnboarding:1:6/
  taskdefinition/decideApprovalTask"
         </userinput>
         <computeroutput>{
  "dueDate": null,
  "taskCandidateGroup": [
    {
      "expressionText": "manager"
    }
  ],
  "formProperties": [
    {
      "type": {
        "values": {
          "accept": "Accept",
          "reject": "Reject"
...
        </computeroutput></screen>
       </listitem> 
     </varlistentry>  
     <varlistentry>
      <term><literal>openidm/workflow/taskinstance</literal></term>
       <listitem>
        <para>Query all running task instances. For example:</para>
         <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/taskinstance?_queryId=query-all-ids"
          </userinput>
          <computeroutput>{
  "result": [
    {
      "name": "Contractor Approval",
      "_id": "70"
    }
  ]
}</computeroutput></screen>

        <para>Query task instances based on candidate users or candidate
         groups. For example:</para>
         <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/taskinstance?_queryId=filtered-query&amp;taskCandidateUser=manager1"
          </userinput></screen>
           <para>or</para>
            <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/taskinstance?_queryId=filtered-query&amp;taskCandidateGroup=management"
            </userinput></screen>
             <para>Note that you can include both users and groups in the same 
             query.</para>          
       </listitem>       
     </varlistentry>
     <varlistentry>
      <term><literal>openidm/workflow/taskinstance/{id}</literal></term>
       <listitem>
        <para>Obtain detailed information for a running task, based on the
         task ID. For example:</para>
         <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/workflow/taskinstance/70"
          </userinput>
          <computeroutput>
{
  "dueDate": null,
  "processDefinitionId": "contractorOnboarding:1:3",
  "owner": null,
  "taskDefinitionKey": "decideApprovalTask",
  "name": "Contractor Approval",
...</computeroutput>
             </screen>

        <para>Update task-related data stored in the Activiti workflow
         engine. For example:</para>
         <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "If-Match : *" \
 --request PUT \
 --data '{"description":"updated description"}' \
 "https://localhost:8443/openidm/workflow/taskinstance/70" </userinput>
         </screen>

        <para>Complete the specified task. The variables required by the
         task are provided in the request body. For example:</para>
         <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request POST \
 --data '{"requestApproved":"true"}' \
 "https://localhost:8443/openidm/workflow/taskinstance/70?_action=complete"
          </userinput></screen>

         <para>Claim the specified task. The ID of the user who claims the
          task is provided in the request body. For example:</para>
          <screen>$<userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request POST \
 --data '{"userId":"manager1"}' \
 "https://localhost:8443/openidm/workflow/taskinstance/70?_action=claim"
           </userinput></screen>
       </listitem>                 
     </varlistentry>         
   </variablelist>
 
 </section>

 <section xml:id="sample-activiti-workflows">
  <title>Example Activiti Workflows With OpenIDM</title>
  <para>
   This section describes two example workflows - an email notification
   workflow, and a workflow that demonstrates provisioning, using the
   browser-based user interface.
  </para>
  
  <section xml:id="example-activiti-email-notification-flow">
   <title>Example Email Notification Workflow</title>
   <para>
    This example uses the Activiti Eclipse BPMN 2.0 Designer to set up an email
    notification business process. The example relies on an SMTP server
    listening on <literal>localhost</literal>, port 25.
   </para>
   <variablelist>
    <para>
     The example sets up a workflow that can accept parameters used to specify
     the sender and recipient of the mail.
    </para>
    <varlistentry>
     <term><literal>${fromSender}</literal></term>
     <listitem>
      <para>
       Specifies the sender
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>${toEmail}</literal></term>
     <listitem>
      <para>
       Specifies the recipient
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Create a new BPMN2 diagram in Eclipse, then drag and drop components to
    create the workflow. This simple example uses a
    <literal>StartEvent</literal>, <literal>MailTask</literal>, and
    <literal>EndEvent</literal>.
   </para>
   <mediaobject xml:id="figure-bpmn-email-notification">
    <alt>Email notification process</alt>
    <imageobject>
     <imagedata fileref="images/bpmn-email-notification.png" format="PNG" />
    </imageobject>
    <textobject>
     <para>The email notification workflow has a start event, mail task, and
     end event.</para>
    </textobject>
   </mediaobject>
   <para>
    When you have created the workflow definition, edit the generated XML
    source code, adding the <literal>&lt;extensionElements&gt;</literal> to
    the <literal>&lt;serviceTask&gt;</literal> tag, as follows.
   </para>
   <programlisting language="xml">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;definitions
 xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
 xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
 xmlns:activiti=&quot;http://activiti.org/bpmn&quot;
 xmlns:bpmndi=&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;
 xmlns:omgdc=&quot;http://www.omg.org/spec/DD/20100524/DC&quot;
 xmlns:omgdi=&quot;http://www.omg.org/spec/DD/20100524/DI&quot;
 typeLanguage=&quot;http://www.w3.org/2001/XMLSchema&quot;
 expressionLanguage=&quot;http://www.w3.org/1999/XPath&quot;
 targetNamespace=&quot;http://www.activiti.org/test&quot;&gt;
 &lt;process id=&quot;EmailNotification&quot; name=&quot;emailNotification&quot;&gt;
   &lt;documentation&gt;Simple Email Notification Task&lt;/documentation&gt;
   &lt;startEvent id=&quot;startevent1&quot; name=&quot;Start&quot;&gt;&lt;/startEvent&gt;
   &lt;sequenceFlow id=&quot;flow1&quot; name=&quot;&quot; sourceRef=&quot;startevent1&quot;
     targetRef=&quot;mailtask1&quot;&gt;&lt;/sequenceFlow&gt;
   &lt;endEvent id=&quot;endevent1&quot; name=&quot;End&quot;&gt;&lt;/endEvent&gt;
   &lt;sequenceFlow id=&quot;flow2&quot; name=&quot;&quot; sourceRef=&quot;mailtask1&quot;
     targetRef=&quot;endevent1&quot;&gt;&lt;/sequenceFlow&gt;
   &lt;serviceTask id=&quot;mailtask1&quot; name=&quot;Email Notification&quot;
     activiti:type=&quot;mail&quot;&gt;
     &lt;extensionElements&gt;
       &lt;activiti:field name=&quot;to&quot; expression=&quot;${toEmail}&quot;
       &gt;&lt;/activiti:field&gt;
       &lt;activiti:field name=&quot;from&quot; expression=&quot;${fromSender}&quot;
       &gt;&lt;/activiti:field&gt;
       &lt;activiti:field name=&quot;subject&quot; expression=&quot;Simple Email Notification&quot;
       &gt;&lt;/activiti:field&gt;
       &lt;activiti:field name=&quot;text&quot;&gt;
         &lt;activiti:expression&gt;&lt;![CDATA[Here is a simple Email Notification
         from ${fromSender}.]]&gt;&lt;/activiti:expression&gt;
       &lt;/activiti:field&gt;
     &lt;/extensionElements&gt;
   &lt;/serviceTask&gt;
 &lt;/process&gt;
 &lt;bpmndi:BPMNDiagram id=&quot;BPMNDiagram_EmailNotification&quot;&gt;
   &lt;bpmndi:BPMNPlane bpmnElement=&quot;EmailNotification&quot;
     id=&quot;BPMNPlane_EmailNotification&quot;&gt;
     &lt;bpmndi:BPMNShape bpmnElement=&quot;startevent1&quot; id=&quot;BPMNShape_startevent1&quot;&gt;
       &lt;omgdc:Bounds height=&quot;35&quot; width=&quot;35&quot; x=&quot;170&quot; y=&quot;250&quot;&gt;&lt;/omgdc:Bounds&gt;
     &lt;/bpmndi:BPMNShape&gt;
     &lt;bpmndi:BPMNShape bpmnElement=&quot;endevent1&quot; id=&quot;BPMNShape_endevent1&quot;&gt;
       &lt;omgdc:Bounds height=&quot;35&quot; width=&quot;35&quot; x=&quot;410&quot; y=&quot;250&quot;&gt;&lt;/omgdc:Bounds&gt;
     &lt;/bpmndi:BPMNShape&gt;
     &lt;bpmndi:BPMNShape bpmnElement=&quot;mailtask1&quot; id=&quot;BPMNShape_mailtask1&quot;&gt;
       &lt;omgdc:Bounds height=&quot;55&quot; width=&quot;105&quot; x=&quot;250&quot; y=&quot;240&quot;&gt;&lt;/omgdc:Bounds&gt;
     &lt;/bpmndi:BPMNShape&gt;
     &lt;bpmndi:BPMNEdge bpmnElement=&quot;flow1&quot; id=&quot;BPMNEdge_flow1&quot;&gt;
       &lt;omgdi:waypoint x=&quot;205&quot; y=&quot;267&quot;&gt;&lt;/omgdi:waypoint&gt;
       &lt;omgdi:waypoint x=&quot;250&quot; y=&quot;267&quot;&gt;&lt;/omgdi:waypoint&gt;
     &lt;/bpmndi:BPMNEdge&gt;
     &lt;bpmndi:BPMNEdge bpmnElement=&quot;flow2&quot; id=&quot;BPMNEdge_flow2&quot;&gt;
       &lt;omgdi:waypoint x=&quot;355&quot; y=&quot;267&quot;&gt;&lt;/omgdi:waypoint&gt;
       &lt;omgdi:waypoint x=&quot;410&quot; y=&quot;267&quot;&gt;&lt;/omgdi:waypoint&gt;
     &lt;/bpmndi:BPMNEdge&gt;
   &lt;/bpmndi:BPMNPlane&gt;
 &lt;/bpmndi:BPMNDiagram&gt;
&lt;/definitions&gt;</programlisting>
   <para>
    Save the workflow definition as a <literal>bpmn20.xml</literal> file
    (<filename>email-notification.bpmn20.xml</filename>) in the
    <filename>openidm/workflow</filename> directory.
   </para>
   <para>
    After you have deployed the workflow, create a script named
    <filename>openidm/script/triggerEmailNotification.js</filename>. The script
    invokes the workflow.
   </para>
   <programlisting language="javascript">
/*
 * Calling 'EmailNotification' workflow
 */

var params = {
 "_key" : "EmailNotification",
 "fromSender" : "noreply@openidm",
 "toEmail" : "jdoe@example.com"
};

openidm.action('workflow/processinstance', {"_action" : "createProcessInstance"}, params);
   </programlisting>
   <para>
    You can also invoke the workflow over the REST interface with the following
    REST command:
   </para>
   <screen width="100">$ curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --data '{"_key":"EmailNotification", "fromSender":"noreply@openidm", "toEmail":"jdoe@example.com"}' \
 --request POST \
 "https://localhost:8443/openidm/workflow/processinstance?_action=create"</screen>

   <para>
    To schedule the workflow to be invoked regularly, create a schedule
    configuration object named
    <filename>openidm/conf/schedule-EmailNotification.json</filename>. The
    following schedule invokes the workflow once per minute.
   </para>
   <programlisting language="javascript">
{
   "enabled" : true,
   "type" : "cron",
   "schedule" : "0 0/1 * * * ?",
   "invokeService" : "script",
   "invokeContext" : {
       "script" : {
           "type" : "text/javascript",
           "file" : "script/triggerEmailNotification.js"
       },
   }
}
   </programlisting>
  </section>
  
  <section xml:id="example-provisioning-workflow">
   <title>Sample Workflow - Provisioning User Accounts</title>
   <para>
    This example, provided in <filename>openidm/samples/workflow</filename>,
    uses workflows to provision user accounts. The example demonstrates the use
    of the browser-based user interface to manage workflows.
   </para>
    
   <section xml:id="provisioning-sample-overview">
    <title>Overview of the Sample</title>
    
    <para>The sample starts with a reconciliation process that loads user 
    accounts from an XML file into the managed users repository. The 
    reconciliation creates two users, with UIDs <literal>user1</literal> and 
    <literal>manager1</literal>. Both users have the same password 
    (<literal>Welcome1</literal>).</para>
    
    <para>The sample adds two new business roles to the configuration - 
    <literal>employee</literal> (assigned to <literal>user1</literal>) and 
    <literal>manager</literal> (assigned to <literal>manager1</literal>).</para>
    
    <para>As part of the provisioning, employees are required to initiate 
    a "Contract Onboarding" process. This process is a request to add a 
    contractor to the managed users repository, with an option to include the 
    contractor in the original data source (the XML file).</para>
    
    <para>When the employee has completed the required form, the request is 
    sent to the manager for approval. Any user with the role 
    <literal>"manager"</literal> can claim the approval task. If the request 
    is approved, the user is created in the managed users repository. If a 
    request was made to add the user to the original data source (the XML file) 
    this is done in a subsequent step.</para>
    
    <para>The workflow uses embedded templates to build a more sophisticated 
    input form.  The form is validated with the server-side policy rules, 
    described in <link xlink:href="integrators-guide#chap-policies" 
    xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Using 
    Policies to Validate Data</citetitle></link>.</para>
    </section>
    
    <section xml:id="provisioning-sample-running">
     <title>Running the Sample</title>
      
     <procedure>
     <step>
     <para>Start OpenIDM with the configuration for the workflow sample.</para>
     
     <screen>$ <userinput>cd /path/to/openidm
$ ./startup.sh -p samples/workflow</userinput></screen>
     </step>
     <step>
     <para>Run reconciliation over the REST interface.</para>

     <screen width="100">$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request POST \
 "https://localhost:8443/openidm/recon?_action=recon&amp;mapping=systemXmlfileAccounts_managedUser"
     </userinput></screen>

     <para>Successful reconciliation returns an "_id" object, such as the 
     following:</para>
   
     <screen>{"_id":"aea493f5-29ee-423d-b4b1-10449c60886c"}</screen>
     <para>The two users are added to the repository. You can test this with 
     the following REST query, which shows the two users, 
     <literal>manager1</literal> and <literal>user1</literal>.</para>
   
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/managed/user/?_queryId=query-all-ids"
      </userinput>
      <computeroutput>
{
  "conversion-time-ms": 0,
  "result": [
    {
      "_rev": "0",
      "_id": "manager1"
    },
    {
      "_rev": "0",
      "_id": "user1"
    }
  ],
  "query-time-ms": 1
}</computeroutput>
     </screen>        
     </step>
     
     <step>
     <para>Log in to the user interface as <literal>user1</literal>, with 
     password <literal>Welcome1</literal>. For information about logging in to 
     the user interface, see <link 
     xlink:href="integrators-guide#ui-overview" 
     xlink:role="http://docbook.org/xlink/role/olink">
     <citetitle>Overview of the Default User Interface</citetitle></link>.</para>
     </step>
     
     <step>
     <para>Under "Processes" click "Contractor onboarding process".</para>
     </step>
     
     <step>
     <para>Complete the details of the new user, then click Start.</para>
     <mediaobject>
     <alt>Contractor onboarding process form</alt>
     <imageobject>
     <imagedata fileref="images/ui-workflow.png" format="PNG" />
     </imageobject>
     </mediaobject>
     </step>
     <step>
     <para>Log out of the UI.</para>
     </step> 
     <step>
     <para>Log in to the UI as <literal>manager1</literal>, with password 
     <literal>Welcome1</literal>.</para>
     </step>
     <step>
     <para>Under "Tasks that are in my group's queue" click 
     "Contractor Approval".</para>
     </step>
     <step>
     <para>From the drop-down list, select "Assign to me".</para>
     <para>Note that the "Contractor Approval" task has now moved under 
     "My tasks".</para>
     </step>
     <step>
     <para>Under "My tasks" click "Contractor Approval".</para>
     </step>
     <step>
     <para>Under Actions, click Details.</para>
     <para>The form containing the details of the contractor is displayed.</para>
     </step>
     <step>
     <para>At the bottom of the form, select a decision from the drop-down 
     list (either "Accept" or "Reject"), then click Complete.</para>
     <para>If you Accept the new contractor details, the user account is 
     created in the repository. You can check the new account by running the 
     following REST command:</para>
      <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/managed/user/?_queryId=query-all-ids"
      </userinput>
      <computeroutput>
{
  "conversion-time-ms": 0,
  "result": [
    {
      "_rev": "0",
      "_id": "manager1"
    },
    {
      "_rev": "0",
      "_id": "user1"
    },
    {
      "_rev": "0",
      "_id": "51afe0f8-94c3-45c5-8c69-319e6ef5981f"
    }
  ],
  "query-time-ms": 1
}</computeroutput>
     </screen>
     
     <para>Display the details of the new user, by running a REST query on the 
     user ID, as follows:</para>

      <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/managed/user/51afe0f8-94c3-45c5-8c69-319e6ef5981f"
       </userinput>
       <computeroutput>
{
  "city": "",
  "country": "",
  "address2": "",
  "address1": "",
  "lastPasswordAttempt": "Fri Dec 14 2012 13:54:02 GMT+0200 (SAST)",
  "passwordAttempts": "0",
  "stateProvince": "",
  "postalCode": "",
  "lastPasswordSet": "",
  "jobTitle": "Accountant",
  "department": "Finance",
  "manager": "user1",
  "familyName": "Doe",
  "givenName": "John",
  "userName": "johnd",
  "_rev": "0",
  "_id": "51afe0f8-94c3-45c5-8c69-319e6ef5981f",
  "phoneNumber": "123456789",
  "email": "johnd@example.com",
  "startDate": "12/12/2012",
  "endDate": "12/12/2012",
  "description": "Contract accountant",
  "provisionToXML": "1",
  "accountStatus": "active",
  "roles": [
         "openidm-authorized"
  ]
}     </computeroutput>
     </screen>
     
     <para>You can now log in to the UI as the new user (with the details that 
     you specified in Step 5). Under "Notifications" you will see a welcome 
     message indicating the working dates of the new user. If you log in as 
     <literal>user1</literal> you are notified of the result of the manager's 
     decision.</para>
     
     <para>If you specified that the new user should be added to the original 
     data source, you will see that the account was added to the XML file:</para>
     
     <screen>$ <userinput> cd /path/to/openidm
$ cat samples/workflow/data/xmlConnectorData.xml </userinput>
      <computeroutput>
...
   &gt;ri:__ACCOUNT__&lt;
      &gt;icf:__DESCRIPTION__&lt;Contract accountant&gt;/icf:__DESCRIPTION__&lt;
      &gt;ri:roles&lt;openidm-authorized&gt;/ri:roles&lt;
      &gt;ri:mobileTelephoneNumber&lt;123456789&gt;/ri:mobileTelephoneNumber&lt;
      &gt;ri:firstname&lt;John&gt;/ri:firstname&lt;
      &gt;ri:manager&lt;user1&gt;/ri:manager&lt;
      &gt;ri:startDate&lt;12/12/2012&gt;/ri:startDate&lt;
      &gt;ri:jobTitle&lt;Accountant&gt;/ri:jobTitle&lt;
      &gt;icf:__UID__&lt;201e0d50-3313-47b3-9bd1-30c1c7dd1cee&gt;/icf:__UID__&lt;
      &gt;icf:__NAME__&lt;johnd&gt;/icf:__NAME__&lt;
      &gt;ri:email&lt;johnd@example.com&gt;/ri:email&lt;
      &gt;icf:__PASSWORD__&lt;MyPassw0rd&gt;/icf:__PASSWORD__&lt;
      &gt;ri:department&lt;Finance&gt;/ri:department&lt;
      &gt;ri:endDate&lt;12/12/2012&gt;/ri:endDate&lt;
      &gt;ri:lastname&lt;Doe&gt;/ri:lastname&lt;
   &gt;/ri:__ACCOUNT__&lt;
... </computeroutput>
     </screen>
     
     <para>If you declined the approval request, the user will not be created 
     in either data source.</para>    
     </step>   
     </procedure>
     
     <para>You can see the details of the workflow definition in 
     <filename>samples/workflow/workflow/contractorOnboarding.bpmn20.xml</filename>.
     </para> 

    </section>
  </section>
  </section>
</chapter>
