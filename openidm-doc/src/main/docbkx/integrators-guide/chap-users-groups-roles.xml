<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2015 ForgeRock AS
  !
-->
<chapter xml:id='chap-users-groups-roles'
         xmlns='http://docbook.org/ns/docbook'
         version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Managing Users, Groups, and Roles</title>

 <para>
  OpenIDM does not control the structure of objects that are stored in its
  repository. You can define any kind of managed object, but a definition for
  users, groups and roles is provided by default. Managed objects, and their
  properties are defined in your project's
  <filename>conf/managed.json</filename> file.
 </para>
 <para>
  This chapter describes how to work with the default managed objects that are
  provided with OpenIDM. More information about the OpenIDM object model is
  provided in the <link xlink:show="new" xlink:href="integrators-guide#appendix-objects"
                        xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Data Models and
  Objects Reference</citetitle></link>.
 </para>

 <section xml:id="working-with-managed-users">
  <title>Working with Managed Users</title>
  <para>
   External users that are stored in OpenIDM's repository are referred to as
   <firstterm>managed users</firstterm>. For a JDBC repository, OpenIDM stores
   managed users in the <literal>managedobjects</literal> table. A second table,
   <literal>managedobjectproperties</literal>, serves as the index table. For an
   OrientDB repository, managed users are stored in the
   <literal>managed_user</literal> table.
  </para>
  <para>
   OpenIDM provides RESTful access to managed users, at the context path
   <literal>/openidm/managed/user</literal>. For more information, see
   <link xlink:show="new" xlink:href="install-guide#first-steps-with-rest"
         xlink:role="http://docbook.org/xlink/role/olink"><citetitle>To Get Started
    With the OpenIDM REST Interface</citetitle></link> in the
   <citetitle>Installation Guide</citetitle>.
  </para>
 </section>

 <section xml:id="working-with-groups">
  <title>Working With Managed Groups</title>
  <para>
   OpenIDM provides support for a managed <literal>"group"</literal> object. For
   a JDBC repository, OpenIDM stores managed groups with all other managed
   objects, in the <literal>managedobjects</literal> table, and uses the
   <literal>managedobjectproperties</literal> for indexing. For an OrientDB
   repository, managed groups are stored in the <literal>managed_group</literal>
   table.
  </para>
  <para>
   The managed group object is not provided by default. To use managed groups,
   add an object similar to the following to your
   <filename>conf/managed.json</filename> file:
  </para>
  <programlisting>{
   "name" : "group"
},  </programlisting>
  <para>
   With this addition, OpenIDM provides RESTful access to managed groups, at the
   context path <literal>/openidm/managed/group</literal>.
  </para>
  <para>
   For an example of a deployment that uses managed groups, see <link
   xlink:show="new" xlink:href="install-guide#more-sample2d"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Sample 2d -
   Synchronizing LDAP Groups</citetitle></link> in the <citetitle>Installation
   Guide</citetitle>.
  </para>
 </section>

 <section xml:id="configuring-custom-roles">
  <title>Configuring Custom Roles</title>
  <para>
   The default managed object model includes a managed <literal>role</literal>
   object that can be manipulated in the same way as any other managed object.
   You can assign a managed role to one or more users.
  </para>
  <para>
   For more information on terms such as roles, assignments, and entitlements,
   see the <link xlink:role="http://docbook.org/xlink/role/olink"
   xlink:href="integrators-guide#openidm-glossary" xlink:show="new">
   <citetitle>OpenIDM Glossary</citetitle></link>.
  </para>
  <!-- The &#x2014; works as an em dash -->
  <para>
   This section refers to two distinct types of roles &#x2014; direct (static)
   and indirect (dynamic) roles. Direct roles are specifically added to a user's
   <literal>"roles"</literal> attribute in a persistent fashion, within the
   OpenIDM <literal>managed/user</literal> record. Indirect roles can be added
   to the account entry from a script or a rule that assigns the role.
  </para>
  <para>
   For example, a user might acquire an indirect role such as
   <literal>"sales-role"</literal>, if that user is in the
   <literal>"sales"</literal> organization.
  </para>
  <para>
   A managed user's <literal>"roles"</literal> attribute takes an array as
   a value. Currently, only flat strings are supported in this array.
  </para>
  <para>
   The <literal>"roles"</literal> attribute includes any specifically assigned
   managed roles, along with all roles assigned internally by OpenIDM. So, the
   <literal>"roles"</literal> attribute of a particular user entry might
   appear as follows:
  </para>
  <programlisting language="java">"roles" : [
   "managed/role/sample-role",
   "openidm-authorized"
]  </programlisting>
  <para>
   A role value that includes a <literal>/</literal> character is considered to
   be a URI that points to the role details on the router. One example of such
   a role value is <literal>managed/role/sample-role</literal>.
  </para>
  <para>
   The following sections describe basic CRUD operations on roles. The
   entitlements or assignments supplied by roles are described in the subsequent
   section.
  </para>

  <section xml:id="roles-creating-assigning-deleting">
   <title>Creating, Listing, Assigning, and Deleting Roles</title>
   <para>
    Role definitions are stored in the repository and are accessible at the
    <literal>/openidm/managed/role</literal> context path. This section
    describes how to manipulate roles over the REST interface.
   </para>

   <para>
    In this section, you will create two roles: Contractor and Employee, and
    assign them to different users.
   </para>

   <!-- It's now sort of independent of any sample (though I still use
   Sample 2b for users) -->

   <section xml:id="create-new-role">
    <title>Creating a New Role</title>

    <para>
     You can create a new managed role in the Admin UI. You can also create a
     new managed role with either a <literal>PUT</literal> or a
     <literal>POST</literal> REST call.
    </para>

    <para>
     While this section assumes that you are running OpenIDM with
     <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
           xlink:href="install-guide#more-sample2b"><citetitle>Sample 2b -
     LDAP Two Way</citetitle></link>, you can also just create new users as
     needed, either in the Data Management UI or with an appropriate REST call.
    </para>

    <section xml:id="create-role-adminui">
     <title>Creating a New Role in the Admin UI</title>
     <para>
      To create a new managed role in the Admin UI, start OpenIDM and follow
      these steps.
     </para>

     <procedure>
      <step>
       <para>
        In your browser, navigate to
        <literal>https://localhost:8443/admin</literal>, and log in with default
        administrative credentials: user <literal>openidm-admin</literal>
        and password <literal>openidm-admin</literal>.
       </para>
      </step>
      <step>
       <para>
        From the top navigation bar, select Roles. If you have an existing role,
        select Add Roles. In the New Role window that appears, enter a
        <literal>Role Name</literal>, a <literal>Description</literal>, and
        select <literal>Create</literal>.
       </para>
      </step>
     </procedure>

     <para>
      When you select <literal>Create</literal>, the Admin UI changes the
      name of the window to your chosen <literal>Role Name</literal>.
     </para>

     <mediaobject>
      <alt>Create a New Role from the UI</alt>
      <imageobject>
       <imagedata fileref="images/create-role-ui.png" format="PNG" />
      </imageobject>
     </mediaobject>

     <para>
      You can now add <literal>entitlements</literal>, and assign the role to
      the users of your choice.
     </para>

    </section>

    <section xml:id="create-role-cli">
     <title>Creating a New Role with a REST Call</title>

     <para>
      You can use a REST call to create a new role object, using either
      the PUT or POST methods. For additional discussion on the differences
      between PUT and POST, see the following Appendix:
      <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
      xlink:href="integrators-guide#rest-supported-methods"><citetitle>Supported
       Methods</citetitle></link>.
     </para>

     <para>
      The following PUT request allows you to specify a human-readable resource
      ID for the object that you create, in this case, <literal>"Employee"</literal>.
     </para>

     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --header "If-None-Match: *" \
 --request PUT \
 https://localhost:8443/openidm/managed/role/Employee
     </userinput>
<computeroutput>{
   "properties" : "Employee",
      "name" : "Employee",
      "description" : "Role assigned to workers on the payroll."
   },
   "_id" : "Employee",
   "_rev" : "1"
}</computeroutput></screen>

     <para>
      Alternatively, the following POST request prompts OpenIDM to generate
      a server-assigned Universally Unique Identifier (UUID) for the new role
      object, in this case for <literal>"Contractor"</literal>
     </para>

     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request POST \
 --data '{
 "properties" : {
      "name" : "Contractor",
      "description" : "Role assigned to contract workers."
      }
 }' \
 https://localhost:8443/openidm/managed/role?_action=create
     </userinput>
<computeroutput>{
    "properties" : {
       "name" : "Contractor",
       "description" : "Role assigned to contract workers."
    },
    "_id" : "9adba05b-89b4-4ed2-946f-0b1c2149cfa7",
    "_rev" : "1"
}</computeroutput></screen>
     </section>
   </section>

   <section xml:id="list-existing-roles">
    <title>Listing Existing Roles</title>

    <para>
      You can review the full list of roles with a REST call or with the Admin UI.
     </para>

     <para>
      The following REST call lists the roles that you just created in the
      previous section:
     </para>

     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/managed/role?_queryFilter=true' </userinput>
<computeroutput>{
    "result" : [ {
       "properties" : {
          "name" : "Employee",
          "description" : "Role assigned to workers on the payroll."
       },
       "_id" : "Employee",
       "_rev" : "1"
    }, {
       "properties" : {
          "name" : "Contractor",
          "description" : "Role assigned to contract workers."
       },
       "_id" : "9adba05b-89b4-4ed2-946f-0b1c2149cfa7",
       "_rev" : "1"
    } ],
    "resultCount" : 2,
    "pagedResultsCookie" : null,
    "remainingPagedResults" : -1
}</computeroutput></screen>

     <para>
      Alternatively, you can get the same information from the Admin UI, except
      for the UUID and revision. Log into
      <literal>https://localhost:8443/admin</literal>. From the top navigation
      bar, select Roles.
     </para>

     <para>
      You should see the Role List window, with the roles that you just created.
     </para>

     <mediaobject>
      <alt>List existing Roles in the UI</alt>
      <imageobject>
       <imagedata fileref="images/list-role.png" format="PNG" />
      </imageobject>
     </mediaobject>

    </section>

    <section xml:id="assign-role-user">
     <title>Assigning a Managed Role to a User</title>

     <para>
      Now that we have two roles, you can assign them to users. The process
      in the Admin UI is straightforward. When you select a role such as
      <literal>"Employee"</literal>, a window opens with a list of users
      that you can assign to the role.
     </para>

     <mediaobject>
      <alt>Assigning Roles</alt>
      <imageobject>
       <imagedata fileref="images/assign-role-users.png" format="PNG" />
      </imageobject>
     </mediaobject>

     <para>
      If you do not see users in the Role screen, you may need to reconcile
      users from a remote connected repository. For more information, see the
      following section:
      <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
            xlink:href="integrators-guide#admin-ui-sync"><citetitle>Configuring
      Reconciliation from the UI</citetitle></link>.
     </para>

     <para>
      When you assign a user to a specific role, OpenIDM synchronizes that
      information to the user account. For example, after user
      <literal>bjensen</literal> is assigned as an Employee, review the
      result in the Data Management View for that account:
     </para>

     <mediaobject>
      <alt>Barbara Jensen now has an Employee Role</alt>
      <imageobject>
       <imagedata fileref="images/bjensen-role.png" format="PNG" />
      </imageobject>
     </mediaobject>

     <para>
      To confirm, scroll down and review the account information for the
      Linked Resource on the LDAP system (OpenDJ).
     </para>

     <mediaobject>
      <alt>Barbara Jensen's Employee Role is shown with the Linked Resource</alt>
      <imageobject>
       <imagedata fileref="images/bjensen-ldap-role.png" format="PNG" />
      </imageobject>
     </mediaobject>

     <para>
      It is easy to assign users to specific roles in the UI. But you may also
      want to automate the process with REST calls.
     </para>

     <para>
      For that purpose, you could get the desired <literal>_id</literal> of
      target users with a RESTful GET.
     </para>

     <para>
      To get the value of <literal>_id</literal> for all users, you could use a
      RESTful GET. If you made the call against the following endpoint, you
      would get all information related to all managed users:
     </para>

     <screen>https://localhost:8443/openidm/managed/user?_queryId=query-all</screen>

     <para>
      Based on the information discussed in the this section:
      <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
            xlink:href="integrators-guide#constructing-queries">
       <citetitle>Constructing Queries</citetitle></link>, you can make a more
      fine-grained RESTful call against to list just the
      <literal>userName</literal> and <literal>_id</literal> of each user:
     </para>

     <screen>$ <userinput>curl \
      --cacert self-signed.crt \
      --header "X-OpenIDM-Username: openidm-admin" \
      --header "X-OpenIDM-Password: openidm-admin" \
      --request GET \
      'https://localhost:8443/openidm/managed/user?_queryFilter=true&amp;_fields=userName,_id'
     </userinput>
<computeroutput>{
  "result": [
    {
      "userName": "jdoe",
      "_id": "3c7e4b21-6e1c-4983-9517-35d90e2569a9"
    },
    {
      "userName": "bjensen",
      "_id": "616f4aed-f674-4670-a875-a3cd2d512e1e"
    }
  ],
  "resultCount": 2,
  "pagedResultsCookie": null,
  "remainingPagedResults": -1
}</computeroutput></screen>

     <para>
      With that information in hand, you can run the following command to add
      the <literal>managed/role/Employee</literal> role to user
      <literal>jdoe</literal>:
     </para>

     <screen width="100">$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-type: application/json" \
 --header "If-Match: *" \
 --request PATCH \
 --data '[
    {
      "operation" : "add",
      "field" : "/roles/-",
      "value" : "managed/role/Employee"
    }
 ]' \
 'https://localhost:8443/openidm/managed/user/3c7e4b21-6e1c-4983-9517-35d90e2569a9?_fields=roles,effectiveRoles'
     </userinput>
     <computeroutput>{
   "roles" : [ "openidm-authorized", "managed/role/Employee" ],
   "effectiveRoles" : [ "openidm-authorized", "managed/role/Employee" ],
 }</computeroutput></screen>

     <para>
      Note the value of <literal>"roles"</literal>. It includes the default
      <literal>openidm-authorized</literal> role along with the
      <literal>managed/role/Employee</literal> role that you just assigned to
      that user with a <literal>PATCH</literal> call.
     </para>

    </section>

    <section xml:id="delete-role-user">
     <title>Deleting a Managed Role</title>

     <para>
      You can delete a managed role if it is not currently assigned to any
      accounts. Otherwise, if you try to delete a role that has been assigned,
      an error  message appears. Observe what happens when you try to delete
      the <literal>managed/role/Employee</literal> role that has been
      assigned to user <literal>bjensen</literal>:
     </para>

     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request DELETE \
 'https://localhost:8443/openidm/managed/role/Employee'</userinput>
<computeroutput>{
    "code":409,
    "reason":"Conflict",
    "message":"Cannot delete a role that is currently assigned"
 }</computeroutput></screen>

     <para>
      If you delete a non-empty role in the Admin UI, OpenIDM returns an error
      message.
     </para>

     <para>
      As you can see, OpenIDM has a safeguard to prevent you from accidentally
      deleting a role that has been assigned to one or more users.
     </para>

     <para>
      To demonstrate the process, first unassign that
      <literal>managed/role/Employee</literal> role from user
      <literal>jdoe</literal>.
     </para>

     <screen width="100">$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --header "If-Match: *" \
 --request PATCH \
 --data '[
   {
      "operation" : "remove",
      "field" : "/roles/1",
      "value" : "managed/role/Employee"
   }
 ]' \
 'https://localhost:8443/openidm/managed/user/3c7e4b21-6e1c-4983-9517-35d90e2569a9?_fields=roles,effectiveRoles'</userinput></screen>

     <para>
      To confirm that the Employee role no longer exists, run the following
      command on the <literal>openidm/managed/role</literal> endpoint:
     </para>

     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/managed/role?_queryFilter=true</userinput>
<computeroutput>{
   "result" : [ {
      "properties" : {
         "name" : "Contractor",
         "description" : "Role assigned to contract workers."
      },
      "_id" : "9adba05b-89b4-4ed2-946f-0b1c2149cfa7",
      "_rev" : "3"
   } ],
   "resultCount" : 1,
   "pagedResultsCookie" : null,
   "remainingPagedResults" : -1
}</computeroutput></screen>

     <para>
      Because the only remaining role is <literal>"Contractor"</literal>, you
      know the <literal>DELETE</literal> command successfully removed the
      <literal>"Employee"</literal> role.
     </para>

     <para>
      Alternatively, from the Admin UI, you can select the Roles option from the
      top navigation bar. In the Role List window that appears, you can select
      a role, and then select the Users tab.
     </para>

     <para>
      You should see a check mark under the <literal>Has Role</literal> column
      for any users who have been assigned to a specific role. As shown here,
      you can highlight such users and then select <literal>Remove Users</literal>.
     </para>

     <mediaobject>
      <alt>Delete Users from a Role Before Deleting the Role</alt>
      <imageobject>
       <imagedata fileref="images/delete-user-role-ui.png" format="PNG" />
      </imageobject>
     </mediaobject>

     <para>
      You can then return to the Details tab, and select Delete to delete the
      role, in this case, Contractor. After you provide confirmation,
      the Contractor role should no longer appear.
     </para>

     <mediaobject>
      <alt>Delete a Role</alt>
      <imageobject>
       <imagedata fileref="images/delete-role-ui.png" format="PNG" />
      </imageobject>
     </mediaobject>

   </section>

  </section>

  <section xml:id="effective-roles-and-assignments">
   <title>Understanding Effective Roles and Effective Assignments</title>
   <para>
    OpenIDM supports the use of roles to help manage user membership in various
    groups, through attribute assignments. Some groups may have more
    entitlements than others. However, the configuration of associated access
    rights is the province of access management tools such as OpenAM.
   </para>
   <para>
    The previous sections described how you can create a role, as well as how you
    can assign that role to a user. This section describes how OpenIDM applies
    the assignments that are specified for that role.
   </para>

   <section xml:id="sample-role-definition">
    <title>A Sample Role Definition for Two Remote Systems</title>
    <para>
     The following sample role definition shows how assignments are configured
     for two remote systems &#x2014; an LDAP server (<literal>ldap</literal>),
     and an Active Directory Server (<literal>ad</literal>).
    </para>
    <programlisting language="java">{
  "name": "samplerole",
  "_id": "samplerole",
  "assignments": {
     "ad": {
        "attributes": [
           {
              "name": "adSystems",
              "value": [
                 "CN=fileshare,O=corp",
                 "CN=desktop,O=corp",
                 "CN=terminal,O=corp",
                 "CN=intranet,O=corp"
              ],
              "assignmentOperation": "mergeWithTarget",
              "unassignmentOperation": "removeFromTarget"
           }
        ]
     },
     "ldap": {
        "attributes": [
           {
              "name": "ldapGroups",
              "value": [
                 "CN=employees,O=corp"
              ],
              "assignmentOperation": "mergeWithTarget",
              "unassignmentOperation": "removeFromTarget"
           },
           {
              "name": "employeeType",
              "value": "employee"
           }
        ],
        "onAssignment": {
           "file": "roles/onAssignment_ldap.js",
           "type": "text/javascript"
        },
        "onUnassignment": {
           "file": "roles/onUnassignment_ldap.js",
           "type": "text/javascript"
        }
     }
  }
}</programlisting>
    <itemizedlist>
     <para>
      The role definition includes the following properties:
     </para>
     <listitem>
      <para>
       <literal>"name"</literal> is the name of the role, and should be unique.
       Avoid using special characters in the role name.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>"_id"</literal> is the object identifier of the role, by which
       it is accessed over REST.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>assignments</literal> specifies the list of attribute
       assignments that this role creates on remote systems.
      </para>
      <para>
       Each assignment includes the name of the external system, such as
       <literal>ad</literal> and <literal>ldap</literal>, the
       attribute or attributes whose values will be generated on the external
       system, and the value or values that will be applied to each attribute.
      </para>
      <para>
       OpenIDM uses the <literal>"assignments"</literal> property to keep
       assigned roles up to date.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>"assignmentOperation"</literal> and
       <literal>"unassignmentOperation"</literal>
      </para>
      <para>
       When you update the definition of a role by adding, updating, or removing an
       attribute, the update could trigger one of the following two operations:
       <simplelist>
        <member>
         <literal>assignmentOperation</literal>: For accounts that have the
         assignment, an assignmentOperation is triggered every time that account
         is processed as part of a synchronization.
        </member>
        <member>
         <literal>unassignmentOperation</literal>: When an assignment is
         updated or removed from an account, the next synchronization triggers
         an unassignmentOperation.
        </member>
       </simplelist>
      </para>
      <para>
       When you assign or unassign a role to a user, that action also triggers
       an <literal>"assignmentOperation"</literal> or an
       <literal>"unassignmentOperation"</literal>.
      </para>
      <itemizedlist>
       <listitem>
        <para>
         The <literal>"assignmentOperation"</literal> specifies the way in which
         the attribute value is applied, and can be either
         <literal>"replaceTarget"</literal> (the default) or
         <literal>"mergeWithTarget"</literal>.
        </para>
        <para>
         The <literal>"replaceTarget"</literal> operation replaces the entire
         target attribute value with whatever is specified in the role
         definition. The value from the role assignments becomes the only
         authoritative source for the attribute.
        </para>
        <para>
         The <literal>"mergeWithTarget"</literal> operation first merges the
         source value with the existing target value, then adds the value(s)
         from the role assignment. If duplicate values are found (for attributes
         that take a list as a value), each value is included only once in the
         resulting target.
        </para>
        <para>
         The <literal>"mergeWithTarget"</literal> operation is used only with
         complex attribute values like arrays and objects. This operation does
         not work with strings or numbers.
        </para>
       </listitem>
       <listitem>
        <para>
         The <literal>"unassignmentOperation"</literal> specifies how the
         attribute value is removed, and can only be set to
         <literal>"removeFromTarget"</literal>.
        </para>
       </listitem>
      </itemizedlist>
      <para>
       Changes are not always required to roles. In such cases, a
       <literal>"noOp"</literal> operation is available. It returns the mapped
       attribute value in the target object.
      </para>
      <para>
       The <literal>"mergeWithTarget"</literal>, <literal>"replaceTarget"</literal>,
       <literal>"removeFromTarget"</literal>, and <literal>"noOp"</literal>
       operations are aliases, and are defined in the file
       <filename>openidm/bin/defaults/script/roles/defaultMapping.js</filename>.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>"onAssignment"</literal> and <literal>"onUnassignment"</literal>
      </para>
      <para>
       These properties refer to customizable scripts specific to each
       assignment.
      </para>
      <para>
       By default, OpenIDM addresses any change in role assignments with the
       assignment operations defined in the
       <filename>defaultMapping.js</filename> file.
      </para>
      <para>
       You can modify this behavior with custom <literal>onAssignment</literal>
       and <literal>onUnassignment</literal> scripts. OpenIDM can trigger
       the <literal>"onAssignment"</literal> or
       <literal>"onUnassignment"</literal> script whenever you create, assign,
       or delete a role from a user entry.
      </para>
      <para>
       If you create a custom <literal>"onAssignment"</literal> or
       <literal>"onUnassignment"</literal> script, the script must return a
       <literal>"targetObject"</literal>, otherwise, the script operation might
       fail.
      </para>
      <para>
       Every synchronization operation triggers the
       <literal>"onAssignment"</literal> script. In contrast, the
       <literal>"onUnassignment"</literal> script is triggered only when an
       assignment is removed from a role, or when a role is unassigned from a
       user.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     OpenIDM logs any changes to a managed role definition in the activity audit
     log.
    </para>
   </section>

   <section xml:id="roles-virtual-attributes">
    <title>Virtual Role Attributes</title>
    <para>
     Based on the set of role definitions that are assigned to a specific user,
     the roles mechanism generates two virtual attributes on the user entry
     &#x2014; <literal>effectiveRoles</literal> and
     <literal>effectiveAssignments</literal>.
    </para>
    <para>
     To review the logic that calculates the <literal>effectiveRoles</literal>
     and <literal>effectiveAssignments</literal> attribute values, examine the
     following scripts:
     <filename>openidm/bin/defaults/script/roles/effectiveRoles.js</filename>
     and
     <filename>openidm/bin/defaults/script/roles/effectiveAssignments.js</filename>.
     <emphasis>Do not change these scripts.</emphasis>
    </para>
    <para>
     If you need to change the logic that calculates
     <literal>effectiveRoles</literal> and
     <literal>effectiveAssignments</literal>, create your own custom script
     and include a reference to it in the <filename>conf/managed.json</filename>
     file. For more information about using custom scripts, see the
     <link xlink:href="integrators-guide#appendix-scripting"
           xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Scripting
      Reference</citetitle></link>.
    </para>
    <para>
     The <literal>effectiveRoles</literal> attribute lists the specific role
     definitions that are applied to a user entry. By default, the effective
     roles script supports <emphasis>only</emphasis> direct role assignments.
    </para>
    <para>
     To set up a dynamic role assignment, you need a custom script that
     overrides the default <filename>effectiveRoles.js</filename> script. For
     more information, see <xref linkend="dynamic-role-assignments" />.
    </para>
    <para>
     The synchronization engine reads the calculated value of the
     <literal>effectiveAssignments</literal> attribute, while it processes the
     account. The target system is updated with role-specific attributes, per
     the configured <literal>assignmentOperation</literal>. For more information,
     see the previous section on <link xlink:show="new"
     xlink:role="http://docbook.org/xlink/role/olink"
     xlink:href="integrators-guide#sample-role-definition"><citetitle>A Sample
     Role Definition for Two Remote Systems</citetitle></link>.
    </para>
    <para>
     Effective assignments can merge attribute operations on the same system from
     multiple roles. For example, role A might add group A to a user's group
     membership list, and role B might add group B to the same group
     membership property on the same assigned system.
    </para>
    <para>
     To see how effective roles and effective assignments attributes are
     configured, examine the following
     <filename>openidm/conf/managed.json</filename> as follows:
    </para>
    <programlisting language="java">
{
     "name" : "effectiveRoles",
     "type" : "virtual",
     "onRetrieve" : {
          "type" : "text/javascript",
          "file" : "roles/effectiveRoles.js",
          "rolesPropName" : "roles"
     }
},
{
     "name" : "effectiveAssignments",
     "type" : "virtual",
     "onRetrieve" : {
          "type" : "text/javascript",
          "file" : "roles/effectiveAssignments.js",
          "effectiveRolesPropName" : "effectiveRoles"
     }
}
    </programlisting>

    <para>
     By default, the <filename>effectiveRoles.js</filename> script uses the
     <literal>"roles"</literal> attribute of a user entry to derive the
     direct roles assigned to the user. The
     <filename>effectiveAssignments.js</filename> script uses the virtual
     <literal>"effectiveRoles"</literal> attribute for a user to calculate
     the user's effective assignments.
    </para>
    <para>
     If your deployment uses different attributes to store this information,
     change the <literal>"rolesPropName"</literal> and the
     <literal>"effectiveRolesPropName"</literal> properties of the virtual
     attribute definitions accordingly.
    </para>

    <para>
     When a role is assigned to a user entry, OpenIDM calculates the
     <literal>effectiveRoles</literal> and <literal>effectiveAssignments</literal>
     for that user from the definition of the role. A managed user entry, whose
     roles have been generated based on the previously noted role definition,
     might appear as follows:
    </para>

    <programlisting language="javascript">{
  "_id":"1",
  "_rev":"1",
  "roles":[
     "openidm-authorized",
     "managed/role/sample-role"
  ],
  "effectiveRoles":[
     "openidm-authorized",
     "managed/role/sample-role"
  ],
  "effectiveAssignments":{
     "ldap":{
        "attributes":[
           {
              "value":[
                 "CN=employees,O=corp"
              ],
              "operation":"replaceTarget",
              "name":"ldapGroups",
              "assignedThrough":"managed/role/sample-role"
           },
           {
              "value":"employee",
              "name":"employeeType",
              "assignedThrough":"managed/role/sample-role"
           }
        ]
     },
     "ad":{
        "attributes":[
           {
              "value":[
                 "CN=fileshare,O=corp",
                 "CN=desktop,O=corp",
                 "CN=terminal,O=corp",
                 "CN=intranet,O=corp"
              ],
              "operation":"replaceTarget",
              "name":"adSystems",
              "assignedThrough":"managed/role/sample-role"
           }
        ]
     }
  }
}</programlisting>

    <para>
     Note that the value of the <literal>"assignedThrough"</literal> property
     of the virtual <literal>"effectiveAssignments"</literal> attribute indicates
     how each assignment has been generated.
    </para>
    <para>
     After you have defined a role and assigned it to a user, verify that the
     expected effective roles and effective assignments have been generated for
     that user. To apply the effective assignments to the target resource, add a
     default mapping to your synchronization configuration, as described in the
     following section.
    </para>
   </section>
  </section>

  <section xml:id="role-mapping">
   <title>Setting up the Role Mapping</title>
   <para>
    After the role has been defined, and the effective assignments checked, you
    must set up mapping for the role and, optionally, restrict provisioning
    based on the effective assignments.
   </para>
   <para>
    This section describes both options.
   </para>

   <section xml:id="roles-default-mapping">
    <title>Creating a Mapping For Effective Assignments</title>
    <para>
     After the effective assignments have been calculated, OpenIDM applies these
     assignments to the target resources.
    </para>
    <para>
     The following sample extract of a <filename>sync.json</filename> file
     applies the <literal>ldap</literal> assignment, illustrated in the previous
     section, on the target resource (<literal>system/ldap/account</literal>) for
     all entries that have <literal>"effectiveAssignments" : "ldap"</literal> in
     the source.
    </para>
    <programlisting language="javascript">{
     "name" : "managedUser_systemLdapAccounts",
     "source" : "managed/user",
     "target" : "system/ldap/account",
     "links" : "systemLdapAccounts_managedUser",
     },
     "assignmentsToMap": [
        "ldap"
     ],
     ...
}   </programlisting>
   </section>

   <section xml:id="conditional-mapping">
    <title>Using Roles For Conditional Mapping</title>
    <para>
     The roles mechanism provides the ability to restrict provisioning based on
     a user's effective assignments. For example, you might want to prevent users
     from being provisioned to an Active Directory system, if they do not have
     specific access to that system.
    </para>
    <para>
     Based on the <literal>"effectiveAssignments"</literal> virtual attribute,
     described in the previous section, you could configure a conditional mapping
     for this example, as follows:
    </para>
    <orderedlist>
     <listitem>
      <para>
       Create a role definition that gives the user the Active Directory
       assignment, for example:
      </para>
      <programlisting language="javascript">{
"_id": "ad-role",
   "assignments": {
      "ad": {
         "attributes": [
            {
               "name": "adSystems",
               "value": [
                  "CN=fileshare,O=corp",
                  "CN=desktop,O=corp",
                  "CN=terminal,O=corp",
                  "CN=intranet,O=corp"
               ],
               "assignmentOperation": "replaceTarget"
            }
         ]
      }
   }
}  </programlisting>
     </listitem>
     <listitem>
      <para>Add the role directly as a value of the user's
       <literal>"roles"</literal> attribute.</para>
      <programlisting>"roles" : [
   "name" : "managed/role/ad-role",
   "name" : "openidm-authorized"
]     </programlisting>
     </listitem>
     <listitem>
      <para>
       Add a condition in the mapping that restricts provisioning to users who
       have the <literal>"ad"</literal> assignment as an effective assignment.
       The effective assignments are calculated from the values in the user's
       <literal>"roles"</literal> attribute.
      </para>
      <programlisting language="java">{
   "mappings": [
       {
          "name": "managedUser_systemAdAccounts",
          "source": "managed/user",
          "sourceCondition": {
              "effectiveAssignments": "ad"
          },
          "target": "system/ad/account"
          ...
       }
   ]
}     </programlisting>
     </listitem>
    </orderedlist>
   </section>

  </section>

  <section xml:id="test-effective-roles">
   <title>Testing the Roles Mechanism</title>
   <procedure>
    <para>
     The following sample procedure creates a new role that includes an
     assignment, adds that role to the user entry <literal>bjensen</literal>, and
     then shows how OpenIDM generates effective assignments for user
     <literal>bjensen</literal>.
    </para>
    <step>
     <para>
      Create the role definition over REST.
     </para>
     <para>
      This example uses a PUT request to create the role definition, so that we
      can specify the role <literal>_id</literal>. The example adds a role
      definition with the ID <literal>ldap-role</literal>. The role ID is used
      to assign the role directly to the user entry.
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --header "If-None-Match: *" \
 --request PUT \
 --data '{
  "assignments": {
    "ldap": {
      "attributes": [
        {
          "name": "ldapSystems",
          "value": [
            "cn=printers,ou=Groups,dc=example,dc=com",
            "cn=intranet,ou=Groups,dc=example,dc=com"
          ],
          "operation": "replaceTarget"
        }
      ]
    }
  }
}' \
"https://localhost:8443/openidm/managed/role/ldap-role"</userinput>
<computeroutput>{
  "assignments": {
    "ldap": {
      "attributes": [
        {
          "name": "ldapSystems",
          "operation": "replaceTarget",
          "value": [
             "cn=printers,ou=Groups,dc=example,dc=com",
             "cn=intranet,ou=Groups,dc=example,dc=com"
          ]
        }
      ]
    }
  },
  "_id": "ldap-role",
  "_rev": "0"
}</computeroutput>
     </screen>
    </step>
    <step>
     <para>
      The <literal>ldap-role</literal> includes one assignment named
      <literal>ldap</literal>. Add a mapping for the assignment, by adding the
      <literal>"assignmentsToMap"</literal> property to your mapping
      (<literal>sync.json</literal>) file. For example:
     </para>
     <programlisting language="javascript">
      "mappings":[
          {
              "name" : "managedUser_systemAdAccounts",
              "source" : "managed/user",
              "target" : "system/ad/account",
              "assignmentsToMap": [
                  "ldap"
              ],
          ...
          },
   ...
      ]</programlisting>
     <para>
      By default, OpenIDM addresses any change in role assignments with the
      assignment operations defined in the
      <filename>defaultMapping.js</filename> file. You can modify this behavior
      by writing custom <literal>onAssignment</literal> and
      <literal>onUnassignment</literal> scripts.
     </para>
    </step>
    <step>
     <para>
      Assign the role to user <literal>bjensen</literal>.
     </para>
     <screen><userinput>$ curl \
--cacert self-signed.crt \
--header "X-OpenIDM-Username: openidm-admin" \
--header "X-OpenIDM-Password: openidm-admin" \
--header "Content-Type: application/json" \
--header "If-Match: *" \
--request PATCH \
--data '[
   {
      "operation": "replace",
      "field": "/roles",
      "value": [
         "openidm-authorized",
         "managed/role/ldap-role"
      ]
   }
]' \
"https://localhost:8443/openidm/managed/user/bjensen"</userinput>
<computeroutput>{
  "mail": "bjensen@example.com",
  "sn": "Jensen",
  "passwordAttempts": "0",
  "address2": "",
  "lastPasswordAttempt": "Thu October 23 2014 12:49:32 GMT+0200 (SAST)",
  "givenName": "Barbara",
  "city": "",
  "country": "",
  "_rev": "2",
  "lastPasswordSet": "",
  "postalCode": "",
  "_id": "bjensen",
  "accountStatus": "active",
  "description": "Created for OpenIDM",
  "roles": [
    "openidm-authorized",
    "managed/role/ldap-role"
  ],
  "telephoneNumber": "1-360-229-7105",
  "postalAddress": "",
  "userName": "bjensen",
  "stateProvince": "",
  "displayName": "Barbara Jensen"
}</computeroutput>
     </screen>
    </step>
    <step>
     <para>
      Query <literal>bjensen's</literal> user entry to verify that her
      effective assignments have been updated.
     </para>
     <screen>$ <userinput>curl \
--cacert self-signed.crt \
--header "X-OpenIDM-Username: openidm-admin" \
--header "X-OpenIDM-Password: openidm-admin" \
--request GET \
"https://localhost:8443/openidm/managed/user/bjensen"</userinput>
<computeroutput>...
{
  "effectiveAssignments": {
    "ldap": {
      "attributes": [
        {
          "assignedThrough": "managed/role/ldap-role",
           "name": "ldapSystems",
           "operation": "replaceTarget",
           "value": [
              "cn=printers,ou=Groups,dc=example,dc=com",
              "cn=intranet,ou=Groups,dc=example,dc=com"
           ]
        }
      ]
    }
  },
  ...</computeroutput>
     </screen>
     <para>
      Note that bjensen's effective assignments have been updated to include the
      assignments provided by the <literal>ldap-role</literal> role.
     </para>
    </step>
   </procedure>
  </section>

  <section xml:id="dynamic-role-assignments">
   <title>Adding Support for Dynamic Assignments</title>
   <para>
    While support for dynamic role assignments is not included in the default
    configuration, you can add such support with a custom script, as follows.
   </para>
   <procedure>
    <step>
     <para>
      Copy the default effective roles script to your project's
      <literal>script/roles</literal> directory.
     </para>
     <screen>
$ cp /path/to/openidm/bin/defaults/script/roles/effectiveRoles.js \
      <replaceable>project-dir</replaceable>/script/roles/
     </screen>
     <para>
      The new script will override the default effective roles script.
     </para>
    </step>
    <step>
     <para>
      Modify the effective roles script to include the dynamic role assignment
      logic.
     </para>
     <para>
      For example, to enable dynamic role assignment for the
      <literal>example</literal> organization, you might add the following
      extract after the section:
     </para>
     <programlisting language="java">
// This is the location to expand to dynamic roles,
// project role script return values can then be added via
// effectiveRoles = effectiveRoles.concat(dynamicRolesArray);</programlisting>

     <programlisting language="java">
if (object.org === 'example') {
      effectiveRoles = effectiveRoles.concat(['dynamic-role1', 'dynamic-role2']);
}    </programlisting>
    </step>
    <step performance="optional">
     <para>
      To apply changes to the dynamic assignment rules to existing users, run a
      reconciliation operation on those users.
     </para>
    </step>
   </procedure>
   <para>
    If you make any of the following changes to dynamic role assignments, you
    must perform a manual reconciliation of all affected users before the
    changes take effect:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      If you create a new dynamic role definition.
     </para>
    </listitem>
    <listitem>
     <para>
      If you change the definition of an existing dynamic role.
     </para>
    </listitem>
    <listitem>
     <para>
      If you change a dynamic assignment rule.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Alternatively, you could change or synchronize a user entry. In that case,
    all dynamic role assignments are reassessed automatically.
   </para>
  </section>

  <section xml:id="managed-role-script-hooks">
   <title>Managed Role Object Script Hooks</title>
   <para>
    A managed role object has script hooks that enable you to configure role
    behavior. The managed role object has the following structure in the managed
    objects configuration file (<filename>managed.json</filename>):
   </para>
   <programlisting language="javascript">{
    "name" : "role",
    "postCreate" : {
        "type" : "text/javascript",
        "file" : "roles/update-users-of-role.js"
    },
    "postUpdate" : {
        "type" : "text/javascript",
        "file" : "roles/update-users-of-role.js"
    },
    "postDelete" : {
        "type" : "text/javascript",
        "file" : "roles/update-users-of-role.js"
    }
}</programlisting>
   <para>
    The <literal>"postCreate"</literal>, <literal>"postUpdate"</literal>, and
    <literal>"postDelete"</literal> properties enable you to specify what
    should happen when a role definition is created, updated, or deleted. By
    default, the <filename>update-users-of-role.js</filename> script runs in
    each of these cases.
   </para>
   <para>
    The <filename>update-users-of-role.js</filename> script includes a
    <literal>triggerSyncCheck</literal> attribute, which reviews the
    <literal>effectiveRoles</literal> and <literal>effectiveAssignments</literal>
    virtual attributes. That review determines whether OpenIDM should run a
    synchronization operation on these attributes.
   </para>
   <para>
    This script examines all managed users, locates the users who have
    been assigned this role, and regenerates their effective assignments on the
    target resource. So, for example, assume the <literal>"ldap"</literal> role
    provides an entitlement on the resource named Active Directory. When that
    role definition is changed, OpenIDM runs a reconciliation to update the
    entitlement for that user on the "Active Directory" resource.
   </para>
  </section>

  </section>

 <section xml:id="sync-encrypted-values">
  <title>Using Encrypted Values</title>
  <indexterm>
   <primary>Synchronization</primary>
   <secondary>Encryption</secondary>
  </indexterm>
  <para>
   OpenIDM supports reversible encryption of attribute values for managed
   objects. Attribute values that might be encrypted include passwords,
   authentication questions, credit card numbers, and social security numbers.
   If passwords are already encrypted on the external resource, they are
   generally excluded from the synchronization process. For more information,
   see <link xlink:href="integrators-guide#chap-passwords"
             xlink:role="http://docbook.org/xlink/role/olink">
   <citetitle>Managing Passwords</citetitle></link>.
  </para>
  <para>
   You configure encryption in the managed object configuration (in the
   <filename>conf/managed.json</filename> file). The following extract of that
   file shows a managed object configuration that encrypts and decrypts
   <literal>securityAnswer</literal>, <literal>ssn</literal>, and
   <literal>password</literal> attributes using the default symmetric
   key, and additional scripts for extra passwords.
  </para>
  <programlisting language="javascript">{
   "objects": [
      {
         "name": "user",
         ...
         "properties": [
            {
               "name": "securityAnswer",
               "encryption": {
                  "key": "openidm-sym-default"
               }
            },
            {
               "name": "ssn",
               "encryption": {
                  "key": "openidm-sym-default"
               }
            },
            {
               "name": "password",
               "encryption": {
                  "key": "openidm-sym-default"
               }
            }
         ],
         ...
      }
   ]
} </programlisting>
  <para>
   Do not use the default symmetric key, <literal>openidm-sym-default</literal>,
   in production. See the chapter on
   <link xlink:href="integrators-guide#chap-security"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Securing
   and Hardening OpenIDM</citetitle></link> for instructions on adding your
   own symmetric key.
  </para>
 </section>

 <section xml:id="restricting-http-access">
  <title>Restricting HTTP Access to Sensitive Data</title>
  <para>
   You can protect specific sensitive managed data by marking the corresponding
   properties as "private". Private data, whether it is encrypted or not, is not
   accessible over the REST interface. Properties that are marked as private are
   removed from an object when that object is retrieved over REST.
  </para>
  <para>
   To mark a property as private, set its <literal>"scope"</literal> to
   <literal>"private"</literal> in the <filename>conf/managed.json</filename>
   file.
  </para>
  <para>
   The following extract of the <filename>managed.json</filename> file shows how
   HTTP access is prevented on the <literal>password</literal> and
   <literal>securityAnswer</literal> properties.
  </para>
  <programlisting language="javascript">
"properties" : [
   {
      "name" : "securityAnswer",
      "encryption" : {
         "key" : "openidm-sym-default"
      },
      "scope" : "private"
   },
   {
      "name" : "password",
      "encryption" : {
         "key" : "openidm-sym-default"
      },
      "scope" : "private"
   },
...</programlisting>
  <para>
   A potential caveat with using private properties is that private properties
   are <emphasis>removed</emphasis> if an object is updated by using an HTTP
   <literal>PUT</literal> request. A <literal>PUT</literal> request replaces the
   entire object in the repository. Because properties that are marked as
   private are ignored in HTTP requests, these properties are effectively
   removed from the object when the update is done. To work around this
   limitation, do not use <literal>PUT</literal> requests if you have configured
   private properties. Instead, use a <literal>PATCH</literal> request to update
   only those properties that need to be changed.
  </para>
  <para>
   For example, to update the <literal>givenName</literal> of user jdoe, you
   could run the following command:
  </para>
  <screen>$ <userinput>curl \
--cacert self-signed.crt \
--header "X-OpenIDM-Username: openidm-admin" \
--header "X-OpenIDM-Password: openidm-admin" \
--header "Content-Type: application/json" \
--request POST \
--data '[
   {
   "operation":"replace",
   "field":"/givenName",
   "value":"Jon"
   }
]' \
"https://localhost:8443/openidm/managed/user?_action=patch&amp;_queryId=for-userName&amp;uid=jdoe"</userinput>
  </screen>
  <note>
   <para>
    The filtering of private data applies only to direct HTTP read and query
    calls on managed objects. No automatic filtering is done for internal
    callers, and the data that these callers choose to expose.
   </para>
  </note>
 </section>

</chapter>