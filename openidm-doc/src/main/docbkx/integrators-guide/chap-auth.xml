<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2015 ForgeRock AS
  !    
-->
<chapter xml:id='chap-auth'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Managing Authentication, Authorization and Role-Based Access Control</title>
 <indexterm>
  <primary>Authentication</primary>
 </indexterm>
 <indexterm>
  <primary>Authorization</primary>
 </indexterm>

 <para>
  OpenIDM provides a flexible authentication and authorization mechanism, based
  on REST interface URLs and on managed roles. This chapter describes how to
  configure the supported authentication modules, and how roles are used to
  support authentication, authorization, and access control.
 </para>

 <section xml:id="openidm-authentication">
  <title>OpenIDM Authentication</title>
  <para>
   OpenIDM does not allow access to the REST interface without authentication.
   User self-registration requires anonymous access. For this purpose, OpenIDM
   includes an <literal>anonymous</literal> user, with the password
   <literal>anonymous</literal>. For more information, see
   <xref linkend="internal-users" />.
  </para>
  <variablelist>
   <para>
    OpenIDM supports HTTP basic authentication, but also supports an enhanced
    authentication mechanism over the REST interface that is compatible with the
    AJAX framework. You can use basic authentication headers, or the
    OpenIDM-specific authentication headers, as follows:
   </para>
   <varlistentry>
    <term>Authentication with HTTP basic authentication headers</term>
    <listitem>
     <screen>$ curl --user openidm-admin:openidm-admin</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Authentication with OpenIDM-specific headers</term>
    <listitem>
     <screen>$ curl
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"</screen>
    </listitem>
   </varlistentry>
  </variablelist>
  <note>
   <para>
    This document uses the OpenIDM authentication headers in all REST examples.
   </para>
  </note>
  <para>
   For more information about the OpenIDM authentication mechanism, see
   <link xlink:href="integrators-guide#security-messages"
         xlink:role="http://docbook.org/xlink/role/olink">
   <citetitle>Use Message Level Security</citetitle></link>.
  </para>

  <section xml:id="openidm-users">
   <title>Authenticating OpenIDM Users</title>
   <indexterm>
    <primary>Authentication</primary>
    <secondary>Internal users</secondary>
   </indexterm>
   <indexterm>
    <primary>Authentication</primary>
    <secondary>Managed users</secondary>
   </indexterm>
   <para>
    OpenIDM stores two types of users in its repository - internal users and
    managed users. The way in which both of these user types are authenticated
    is defined in the file
    <filename>openidm/conf/authentication.json</filename>.
   </para>

   <section xml:id="internal-users">
    <title>Internal Users</title>
    <para>
     OpenIDM creates two internal users by default: <literal>anonymous</literal>
     and <literal>openidm-admin</literal>. These internal user accounts are
     separated from other user accounts to protect them from any reconciliation
     or synchronization processes.
    </para>
    <para>
     OpenIDM stores internal users and their role membership in a table in the
     repository. The two default internal users have the following functions:
    </para>
    <variablelist>
     <varlistentry>
      <term>anonymous</term>
      <listitem>
       <para>
        This user enables anonymous access to OpenIDM, for users who do not have
        their own accounts. The anonymous user has limited rights within
        OpenIDM. By default, the anonymous user has the
        <literal>openidm-reg</literal> role, and can be used to allow
        self-registration. For more information about self-registration, see
        <link xlink:role="http://docbook.org/xlink/role/olink"
        xlink:show="new" xlink:href="integrators-guide#ui-self-registration">
        <citetitle>Enabling Self-Registration</citetitle></link>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>openidm-admin</term>
      <listitem>
       <para>
        This user serves as the top-level administrator. After installation, the
        <literal>openidm-admin</literal> user has full access, and provides a
        fallback mechanism in the event that other users are locked out of their
        accounts. Do not use <literal>openidm-admin</literal> for regular tasks.
        Under normal circumstances, the <literal>openidm-admin</literal> account
        does not represent a regular user, so audit log records for this account
        do not represent the actions of any real person.
       </para>
       <para>
        The default password for the <literal>openidm-admin</literal> user (also
        <literal>openidm-admin</literal>) is not encrypted, and is not secure.
        In production environments, you must change this password to a more
        secure one, as described in the following section. The new password will
        be encrypted when it is changed.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    <section xml:id="repo-internal-user">
     <title>Managing Internal Users Over REST</title>
     <para>
      Like any other user in the repository, you can manage internal users over
      the REST interface.
     </para>
     <para>
      To list the internal users over REST, query the <literal>repo</literal>
      endpoint as follows:
     </para>
     <screen><userinput>$ curl \
   --cacert self-signed.crt \
   --header "X-OpenIDM-Username: openidm-admin" \
   --header "X-OpenIDM-Password: openidm-admin" \
   --request GET  \
   "https://localhost:8443/openidm/repo/internal/user?_queryId=query-all-ids"</userinput>
  <computeroutput>{
    "remainingPagedResults": -1,
    "pagedResultsCookie": null,
    "resultCount": 2,
    "result": [
      {
        "_rev": "0",
        "_id": "openidm-admin"
      },
      {
        "_rev": "0",
        "_id": "anonymous"
      }
    ]
  }</computeroutput></screen>
     <para>
      To query the details of an internal user, include the user's ID in the
      request, for example:
     </para>
     <screen><userinput>$ curl \
   --cacert self-signed.crt \
   --header "X-OpenIDM-Username: openidm-admin" \
   --header "X-OpenIDM-Password: openidm-admin" \
   --request GET  \
   "https://localhost:8443/openidm/repo/internal/user/openidm-admin"</userinput>
  <computeroutput>{
    "password": "openidm-admin",
    "userName": "openidm-admin",
    "roles": "openidm-admin,openidm-authorized",
    "_rev": "1",
    "_id": "openidm-admin"
  }</computeroutput></screen>
     <para>
      To change the password of the default administrative user, send a PUT
      request to the user object. The following example changes the password of
      the <literal>openidm-admin</literal> user to <literal>Passw0rd</literal>:
     </para>
     <screen><userinput>$ curl \
   --cacert self-signed.crt \
   --header "Content-Type: application/json" \
   --header "X-OpenIDM-Username: openidm-admin" \
   --header "X-OpenIDM-Password: openidm-admin" \
   --request PUT \
   --data '{
      "password": "Passw0rd",
      "userName": "openidm-admin",
      "roles": "openidm-admin,openidm-authorized",
      "_id": "openidm-admin"
   }' \
   "https://localhost:8443/openidm/repo/internal/user/openidm-admin"</userinput>
  <computeroutput>{
    "roles": "openidm-admin,openidm-authorized",
    "password": {
      "$crypto": {
        "value": {
          "key": "openidm-sym-default",
          "iv": "USfN9kARk4QjoyjGa/r8WA==",
          "cipher": "AES/CBC/PKCS5Padding",
          "data": "27tDQg49z8nWqvIOEh7VAg=="
        },
        "type": "x-simple-encryption"
      }
    },
    "_id": "openidm-admin",
    "userName": "openidm-admin",
    "_rev": "2"
  }</computeroutput>
     </screen>
    </section>
   </section>
  
   <section xml:id="managed-users">
    <title>Managed Users</title>
    <indexterm>
     <primary>Objects</primary>
     <secondary>Managed objects</secondary>
    </indexterm>
    <para>
     External users that are managed by OpenIDM are known as managed users.
    </para>
    <para>
     The table in which managed users are stored depends on the type of
     repository. For JDBC repositories, OpenIDM stores managed users in the
     managed objects table, named <literal>managedobjects</literal>, and indexes
     those objects in a table named <literal>managedobjectproperties</literal>.
    </para>
    <para>
     For an OrientDB repository, managed objects are stored in the table
     <literal>managed_user</literal>.
    </para>
    <para>
     OpenIDM provides RESTful access to managed users, at the context path
     <literal>/openidm/managed/user</literal>. For more information, see
     <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
     xlink:href="integrators-guide#managing-users-REST"><citetitle>Managing
     Users Over REST</citetitle></link>.
    </para>
   </section>

   <section xml:id="internal-managed-authentication">
    <title>Authenticating Internal and Managed Users</title>
    <para>
     By default, the attribute names that are used to authenticate managed and
     internal users are <literal>username</literal> and
     <literal>password</literal>, respectively. However, you can explicitly
     define the properties that constitute usernames, passwords or roles with
     the <literal>propertyMapping</literal> object in the
     <filename>conf/authentication.json</filename> file. The following excerpt
     of the <filename>authentication.json</filename> file shows the default
     property mapping object:
    </para>
    <programlisting language="javascript">
 ...
    "propertyMapping" : {
        "authenticationId" : "username",
        "userCredential" : "password",
        "userRoles" : "roles"
    },
 ...
    </programlisting>
    <para>
     If you change the attribute names that are used for authentication, you
     must adjust the following authentication queries (defined in the repository
     configuration file,
     <filename>openidm/conf/repo.<replaceable>repo-type</replaceable>.json</filename>).
    </para>
    <variablelist>
     <para>Two queries are defined by default.</para>
     <varlistentry>
      <term><literal>credential-internaluser-query</literal></term>
      <listitem>
       <para>
        This query uses the <literal>username</literal> attribute for login,
        for internal users. For example, the following
        <literal>credential-internaluser-query</literal> is defined in the
        default repository configuration file for a MySQL repository.
       </para>
       <informalexample><screen><?dbfo pgwide="1"?>
"credential-internaluser-query" : "SELECT objectid, pwd, roles FROM ${_dbSchema}.${_table}
        WHERE objectid = ${username}",
       </screen></informalexample>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>credential-query</literal></term>
      <listitem>
       <para>
        This query uses the <literal>username</literal> attribute for login, for
        managed users. For example, the following
        <literal>credential-query</literal> is defined in the default repository
        configuration file for a MySQL repository.
       </para>
       <informalexample><screen><?dbfo pgwide="1"?>
"credential-query" : "SELECT * FROM ${_dbSchema}.${_table} WHERE objectid = ${username}
        and accountStatus = 'active'",
       </screen></informalexample>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     The query that is used for a particular resource is specified by the
     <literal>queryId</literal> property in the
     <filename>authentication.json</filename> file. The following sample excerpt
     of that file shows that the <literal>credential-query</literal> is used
     when validating managed user credentials.
    </para>
    <programlisting language="javascript">
{
    "queryId" : "credential-query",
    "queryOnResource" : "managed/user",
...
}  </programlisting>
   </section>
  </section>

  <section xml:id="supported-auth-modules">
   <title>Supported Authentication and Session Modules</title>
   <para>
    The authentication configuration is defined in
    <filename>conf/authentication.json</filename>. This file configures the
    methods by which a user request is authenticated. It includes both session
    and authentication module configuration.
   </para>

   <!-- For those modules in the Admin UI, I want to set up tables for each
   auth module in this section, in appendix-auth-modules.xml -->

   <variablelist>
    <para>
     OpenIDM supports one module for managing authentication sessions.
    </para>
    <varlistentry>
     <term>JWT_SESSION</term>
     <listitem>
      <para>
       The JSON Web Token session module configuration specifies keystore
       information, and details about the session lifespan. The default
       <literal>JWT_SESSION</literal> configuration is as follows:
      </para>
      <programlisting language="javascript">
    "name" : "JWT_SESSION",
    "properties" : {
        "keyAlias" : "openidm-localhost",
        "privateKeyPassword" : "&amp;{openidm.keystore.password}",
        "keystoreType" : "&amp;{openidm.keystore.type}",
        "keystoreFile" : "&amp;{openidm.keystore.location}",
        "keystorePassword" : "&amp;{openidm.keystore.password}",
        "maxTokenLifeMinutes" : "120",
        "tokenIdleTimeMinutes" : "30",
        "sessionOnly" : true
    }
      </programlisting>
      <para>
       For more information about the <literal>JWT_SESSION</literal> module, see
       the following Javadoc page: <link xlink:show="new"
       xlink:href="http://commons.forgerock.org/forgerock-auth-filters/forgerock-authn-filter/forgerock-jaspi-modules/forgerock-jaspi-jwt-session-module/apidocs/org/forgerock/jaspi/modules/session/jwt/JwtSessionModule.html">
       <citetitle>Class JwtSessionModule</citetitle></link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <variablelist>
    <para>
     In addition to the <literal>JWT_SESSION</literal> module, OpenIDM supports
     a number of authentication modules. This section describes the supported
     authentication modules.
    </para>
    <para>
     OpenIDM evaluates authentication modules in the order in which they are
     listed in the <filename>authentication.json</filename> file.
    </para>
    <!-- Include OpenID Connect when a sample is available, or another statement
    of support is made. -->
    <varlistentry>
     <term>CLIENT_CERT</term>
     <listitem>
      <para>
       The client certificate module accommodates users who authenticate with a
       client certificate. By default, OpenIDM queries the truststore for the
       certificate, but you can specify an alternative location by modifying the
       <literal>"queryOnResource"</literal> property in the configuration.
      </para>
      <para>
       A sample <literal>CLIENT_CERT</literal> authentication configuration
       follows:
      </para>
      <programlisting>{
    "name" : "CLIENT_CERT",
    "enabled" : true,
    "properties" : {
        "queryOnResource" : "security/truststore",
        "defaultUserRoles" : [ "openidm-cert" ],
        "allowedAuthenticationIdPatterns" : [ ]
    }
},
      </programlisting>
      <para>
       The <literal>"allowedAuthenticationIdPatterns"</literal> filter enables
       you to specify an array of usernames or username patterns that will be
       accepted for authentication. If this property is empty, any username can
       authenticate.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>INTERNAL_USER</term>
     <listitem>
      <para>
       <literal>INTERNAL_USER</literal> authentication queries the repository,
       specifically the <literal>repo/internal/user</literal> objects, and
       allows authentication if the credentials match. The default configuration
       uses the <literal>username</literal> and <literal>password</literal> of
       the internal user to authenticate, as shown in the following sample
       configuration.
      </para>
      <programlisting language="javascript">{
    "name" : "INTERNAL_USER",
    "enabled" : true,
    "properties" : {
        "queryId" : "credential-internaluser-query",
        "queryOnResource" : "repo/internal/user",
        "propertyMapping" : {
            "authenticationId" : "username",
            "userCredential" : "password",
            "userRoles" : "roles"
        },
        "defaultUserRoles" : [ ]
    }
},    </programlisting>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>STATIC_USER</term>
     <listitem>
      <para>
       <literal>STATIC_USER</literal> authentication provides an anonymous
       authentication mechanism that bypasses any database lookups if the
       headers in a request indicate that the user is
       <literal>anonymous</literal>. The following sample REST call uses
       <literal>STATIC_USER</literal> authentication in the self-registration
       process:
      </para>
      <screen>$ curl \
 --header "X-OpenIDM-Password: anonymous" \
 --header "X-OpenIDM-Username: anonymous" \
 --header "Content-Type: application/json" \
 --data '{
       "userName":"steve",
       "givenName":"Steve",
       "sn":"Carter",
       "telephoneNumber":"0828290289",
       "mail":"scarter@example.com",
       "password":"Passw0rd"
       }' \
 --request POST \
 "https://localhost:8443/openidm/managed/user/?_action=create"
</screen>
      <para>
       Note that this is not the same as an anonymous request that is issued
       without headers.
      </para>
      <para>
       Authenticating with the <literal>STATIC_USER</literal> module avoids the
       performance cost of reading the database for self-registration, certain
       UI requests, and other actions that can be performed anonymously.
       Authenticating the anonymous user with the <literal>STATIC_USER</literal>
       module is identical to authenticating the anonymous user with the
       <literal>INTERNAL_USER</literal> module, except that the database is not
       accessed. So, <literal>STATIC_USER</literal> authentication provides an
       authentication mechanism for the anonymous user that avoids the database
       lookups incurred when using <literal>INTERNAL_USER</literal>.
      </para>
      <para>
       A sample <literal>STATIC_USER</literal> authentication configuration
       follows:
      </para>
      <programlisting>{
    "name" : "STATIC_USER",
    "enabled" : true,
    "properties" : {
        "propertyMapping" : "{}",
        "queryOnResource" : "repo/internal/user",
        "username" : "anonymous",
        "password" : "anonymous",
        "defaultUserRoles" : [
            "openidm-reg"
        ],
        "augmentSecurityContext" : null
    }
}
      </programlisting>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>MANAGED_USER</term>
     <listitem>
      <para>
       <literal>MANAGED_USER</literal> authentication queries the repository,
       specifically the <literal>managed/user</literal> objects, and allows
       authentication if the credentials match. The default configuration uses
       the <literal>username</literal> and <literal>password</literal> of the
       managed user to authenticate, as shown in the following sample
       configuration.
      </para>
      <programlisting language="javascript">{
    "name" : "MANAGED_USER",
    "enabled" : true,
    "properties" : {
        "queryId" : "credential-query",
        "queryOnResource" : "managed/user",
        "propertyMapping" : {
            "authenticationId" : "username",
            "userCredential" : "password",
            "userRoles" : "roles"
        },
        "defaultUserRoles" : [ ]
    }
},    </programlisting>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>PASSTHROUGH</term>
     <listitem>
      <para>
       <literal>PASSTHROUGH</literal> authentication queries an external system,
       such as an LDAP server, and allows authentication if the provided
       credentials match those in the external system. The following sample
       configuration shows pass-through authentication using the user objects
       in the system endpoint <literal>system/ldap/account</literal>. For more
       information on pass-through authentication, see
       <xref linkend="passthrough-auth" />.
      </para>
      <programlisting language="javascript">{
    "name" : "PASSTHROUGH",
    "enabled" : true,
    "properties" : {
        "augmentSecurityContext": {
            "type" : "text/javascript",
            "file" : "auth/populateAsManagedUser.js"
        },
        "queryOnResource" : "system/ldap/account",
        "propertyMapping" : {
            "authenticationId" : "uid"
        },
        "managedUserLink" : "systemLdapAccounts_managedUser",
        "defaultUserRoles" : [
            "openidm-authorized"
        ]
    }
},    </programlisting>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>OPENAM_SESSION</term>
     <listitem>
      <para>
       The <literal>OPENAM_SESSION</literal> module enables you to protect an
       OpenIDM deployment with ForgeRock's <link xlink:show="new"
       xlink:href="http://docs.forgerock.org/en/index.html?product=openam">
       <citetitle>OpenAM Access Management</citetitle></link> product. For an
       example of how you might use the <literal>OPENAM_SESSION</literal>
       module, see <link xlink:role="http://docbook.org/xlink/role/olink"
       xlink:show="new" xlink:href="install-guide#more-sample-openam">
       <citetitle>Sample - Configuring Authentication Management With OpenAM
       </citetitle></link> in the <citetitle>Install Guide</citetitle>.
      </para>
      <para>
       For detailed options, see the
       <link xlink:show="new" xlink:href="integrators-guide#openam-module-details"
             xlink:role="http://docbook.org/xlink/role/olink">
        <citetitle>OPENAM_SESSION Module Configuration Options</citetitle></link>
       in the following Appendix: <citetitle>Configuration Details for
       Authentication Modules</citetitle>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IWA</term>
     <listitem>
      <para>
       The IWA module supports Integrated Windows Authentication. In other words,
       the IWA module supports the use of an LDAP connector for an Active
       Directory server. For an example of how you can set that up with a
       Kerberos server, see the following <link xlink:show="new"
       xlink:href="integrators-guide#openidm-auth-kerberos"
       xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Kerberos
       Configuration Example</citetitle></link>.
      </para>
     </listitem>
    </varlistentry>

    <!--          Waiting for OpenID sample, per OPENIDM-2477
    <varlistentry>
     <term>OPENID_CONNECT</term>
     <listitem>
      <para>
       The OPENID_CONNECT module supports the use of <link xlink:show="new"
       xlink:href="http://openid.net/connect">OpenID Connect 1.0</link>, which
       is an authentication layer built on OAuth 2.0.
      </para>
     </listitem>
    </varlistentry>
                      when sample is available, add a link here             -->
   </variablelist>

  </section>

  <section xml:id="passthrough-auth">
   <title>Configuring Pass-Through Authentication</title>
   <para>
    OpenIDM ${docTargetVersion} supports a pass-through authentication
    mechanism. With pass-through authentication, the credentials included with
    the REST request are validated against those stored in a remote system, such
    as an LDAP server.
   </para>
   <para>
    The following excerpt of an <filename>authentication.json</filename> shows a
    pass-through authentication configuration for an LDAP system.
   </para>

   <programlisting language="javascript">
 "authModules" : [
    {
       "name" : "PASSTHROUGH",
       "enabled" : true,
       "properties" : {
          "augmentSecurityContext": {
             "type" : "text/javascript",
             "file" : "auth/populateAsManagedUser.js"
          },
          "queryOnResource" : "system/ldap/account",
          "propertyMapping" : {
             "authenticationId" : "uid",
             "groupMembership" : "memberOf"
          },
          "groupRoleMapping" : {
             "openidm-admin" : ["cn=admins"]
          },
          "managedUserLink" : "systemLdapAccounts_managedUser",
          "defaultUserRoles" : [
             "openidm-authorized"
          ]
       },
    },
    ...
 ]
   </programlisting>

   <para>
    For more information on authentication module properties, see the following
    Appendix section on
    <link xlink:show="new" xlink:href="integrators-guide#auth-module-prop"
          xlink:role="http://docbook.org/xlink/role/olink">
     <citetitle>Authentication Module Properties</citetitle></link>.
   </para>

   <para>
    The samples described in the
    <link xlink:role="http://docbook.org/xlink/role/olink"
    xlink:show="new" xlink:href="install-guide#chap-samples"><citetitle>OpenIDM
    Installation Guide</citetitle></link> include several examples of
    pass-through authentication configuration. Samples 2, 2b, 2c, and 2d use an
    external LDAP system for authentication. Sample 3 authenticates against a
    SQL database. Sample 6 authenticates against an Active Directory server.
    The <literal>scriptedrest2dj</literal> sample uses a scripted REST connector
    to authenticate against an OpenDJ server.
   </para>
  </section>

  <section xml:id="openidm-auth-kerberos">
   <title>Kerberos Configuration Example</title>

   <para>
    This section assumes that you have an active Kerberos server acting as
    a Key Distribution Center (KDC). If you're running Active Directory in your
    deployment, that service includes a Kerberos KDC by default.
   </para>

   <para>
    To take advantage of a Kerberos KDC, you need to do two things: first
    include at least the <literal>IWA</literal> and possibly the
    <literal>PASSTHROUGH</literal> modules in the
    <filename>authentication.json</filename> file. Second, modify the
    <filename>system.properties</filename> file to take advantage of the
    noted modules.
   </para>

   <para>
    For <literal>IWA</literal>, based on Integrated Windows Authentication,
    this section assumes you have configured an LDAP connector for an Active
    Directory server. To confirm, identify the following mapping source in the
    <filename>sync.json</filename> configuration file:
   </para>

   <screen>system/ad/account</screen>

   <para>
    You could then include the following code block in the
    <filename>authentication.json</filename> file. Include appropriate
    values for the <literal>kerberosRealm</literal> and
    <literal>kerberosServerName</literal>. For a list of definitions, see the
    following section: <link xlink:role="http://docbook.org/xlink/role/olink"
                             xlink:href="integrators-guide#kerberos-definitions" xlink:show="new">
    <citetitle>Kerberos Definitions</citetitle></link>.
   </para>

   <programlisting language="javascript">"authModules" : [
    ...
    {
    "name" : "IWA",
    "properties": {
    "servicePrincipal" : "",
    "keytabFileName" : "security/name.HTTP.keytab",
    "kerberosRealm" : "",
    "kerberosServerName" : "",
    "queryOnResource" : "system/ad/account",
    "propertyMapping" : {
    "authenticationId" : "sAMAccountName",
    "groupMembership" : "memberOf"
    },
    "groupRoleMapping" : { "openidm-admin": [ ] },
    "groupComparisonMethod": "ldap",
    "defaultUserRoles" : [
    "openidm-authorized"
    ]
    },
    "enabled" : true
    }
   </programlisting>

   <para>
    To grant different roles to users who are authenticated through the
    <literal>IWA</literal> module, list them with their
    <literal>groupRoleMapping</literal>.
   </para>

   <para>
    You could pair the <literal>IWA</literal> module with the
    <literal>PASSTHROUGH</literal> module. When paired, a failure in the
    <literal>IWA</literal> module allows users to revert to forms-based
    authentication.
   </para>

   <para>
    You could add the <literal>PASSTHROUGH</literal> module as follows, in the
    <filename>authentication.json</filename> file:
   </para>

   <programlisting language="javascript"> ...
    {
    "name" : "PASSTHROUGH",
    "properties": {
    "queryOnResource" : "system/AD/account",
    "propertyMapping" : {
    "authenticationId" : "sAMAccountName",
    "groupMembership" : "memberOf" },
    "groupRoleMapping" : { "openidm-admin": [ ] },
    "groupComparisonMethod": "ldap",
    "defaultUserRoles" : [
    "openidm-authorized"
    ]
    },
    "enabled" : true
    }
    ... </programlisting>

   <para>
    Once you have included at least the <literal>IWA</literal> module,
    edit the <filename>system.properties</filename> file. Include the following
    entry to point to a JAAS configuration file. Substitute if desired for
    <filename>gssapi_jaas.conf</filename>
   </para>

   <screen>
    java.security.auth.login.config=/path/to/openidm/conf/gssapi_jaas.conf
   </screen>

   <para>
    In the <filename>gssapi_jaas.conf</filename> file, include the following
    information related to the LDAP connector:
   </para>

   <programlisting language="javascript">
    org.identityconnectors.ldap.LdapConnector {
    com.sun.security.auth.module.Krb5LoginModule required client=TRUE
    principal="bjensen@EXAMPLE.COM" useKeyTab=true keyTab="/path/to/bjensen.keytab";
    };
   </programlisting>

   <xinclude:include href="../shared/kerberos-definitions.xml" />

  </section>

 </section>



 <section xml:id="openidm-roles">
  <title>Roles and Authentication</title>
  <indexterm>
   <primary>Authentication</primary>
   <secondary>Roles</secondary>
  </indexterm>
  <indexterm>
   <primary>Roles</primary>
  </indexterm>

  <para>
   OpenIDM includes a number of default roles, and supports the configuration of
   managed roles, enabling you to customize the roles mechanism as needed.
  </para>
  <variablelist>
   <para>The following roles are configured by default:</para>
   <varlistentry>
    <term>openidm-reg</term>
    <listitem>
     <para>
      Role assigned to users who access OpenIDM with the default anonymous
      account.
     </para>
     <para>
      The <literal>openidm-reg</literal> role is excluded from the
      reauthorization required policy definition by default.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>openidm-admin</term>
    <listitem>
     <para>
      OpenIDM administrator role, excluded from the reauthorization required
      policy definition by default.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>openidm-authorized</term>
    <listitem>
     <para>
      Default role for any user who has authenticated with a user name and
      password.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>openidm-cert</term>
    <listitem>
     <para>
      Default role for any user authenticated with mutual SSL authentication.
     </para>
     <para>
      This role applies only for mutual authentication. Furthermore,
      the shared secret (certificate) must be adequately protected. The
      <literal>openidm-cert</literal> role is excluded from the reauthorization
      required policy definition by default.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   OpenIDM begins the process of assigning the roles of a user with the
   <literal>roles</literal> property. OpenIDM then proceeds in the
   following sequence to define user roles:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     If the <literal>defaultRoles</literal> property is set, OpenIDM assigns
     those roles to the given user. The <literal>defaultRoles</literal> property
     must be configured in an array.
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>userRoles</literal> property is a string that defines the
     attribute. The value of the attribute may be either a comma-delimited
     string or a list of strings. You can identify the list with a REST call to
     a <literal>queryOnResource</literal> endpoint such as
     <literal>system/ldap/account</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     If the <literal>groupRoleMapping</literal> and
     <literal>groupMembership</literal> properties are defined, OpenIDM
     assigns additional roles to users depending on any existing group
     membership.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The roles calculated in sequence are cumulative. In other words, if all of
   the above properties are defined, OpenIDM would assign roles from
   <literal>defaultRoles</literal> and <literal>userRoles</literal>. It would
   also use a <literal>MappingRoleCalculator</literal> to define roles from the
   <literal>groupRoleMapping</literal> and <literal>groupMembership</literal>
   properties.
  </para>

  <para>
   For users who have authenticated with mutual SSL authentication, the module
   is <literal>CLIENT_CERT</literal> and the default role for such users is
   <literal>openidm-cert</literal>.
  </para>

   <programlisting language="javascript">
{   "name" : "CLIENT_CERT",
    "properties" : {
        "queryOnResource": "managed/user",
        "defaultUserRoles": [  "openidm-cert" ],
        "allowedAuthenticationPatterns" : [ ]
    },
    "enabled" : "true"
}</programlisting>

   <para>
    Access control for such users is configured in the
    <filename>access.js</filename> file. For more information, see
    <xref linkend="openidm-authorization" />.
   </para>

 </section>
 
 <section xml:id="openidm-authorization">
  <title>Authorization</title>
  <indexterm>
   <primary>Authorization</primary>
  </indexterm>
  
  <para>
   OpenIDM provides role-based authorization that restricts direct HTTP access
   to REST interface URLs. The default authorization configuration grants
   different access rights to users that are assigned the roles
   <literal>"openidm-admin"</literal>, <literal>"openidm-cert"</literal>,
   <literal>"openidm-authorized"</literal>, and <literal>"openidm-reg"</literal>.
  </para>

  <para>
   Note that this access control applies to direct HTTP calls only. Access for
   internal calls (for example, calls from scripts) is not affected by this
   mechanism.
  </para>
  
  <itemizedlist>
    <para>Authorization is configured in two script files:</para>
    <listitem>
      <para>
       <filename>openidm/bin/defaults/script/router-authz.js</filename>
      </para>
    </listitem>
    <listitem>
      <para><filename>openidm/script/access.js</filename></para>
    </listitem>
  </itemizedlist>
  
  <para>
   OpenIDM calls these scripts for each request, via the
   <literal>onRequest</literal> hook that is defined in the default
   <filename>router.json</filename> file. The scripts either throw the string
   <literal>Access denied</literal>, or nothing. If
   <literal>Access denied</literal> is thrown, OpenIDM denies the request.
  </para>
  
  <section xml:id="router-authz-js">
   <title><literal>router-authz.js</literal></title>
   <para>
    This file provides the functions that enforce access rules. For example, the
    following function controls whether users with a certain role can start a
    specified process.
   </para>
   <programlisting language="javascript">
...
function isAllowedToStartProcess() {
var processDefinitionId = request.content._processDefinitionId;
return isProcessOnUsersList(processDefinitionId);
}
...
   </programlisting>
   <para>
    There are certain authorization-related functions in
    <filename>router-authz.js</filename> that should <emphasis>not</emphasis> be
    altered, as described in a comment in the file.
   </para>
  </section>
  
  <section xml:id="access-js">
   <title><literal>access.js</literal></title>
   <para>
    This file defines the access configuration for HTTP requests and
    references the methods defined in <filename>router-authz.js</filename>. Each 
    entry in the configuration contains a pattern to match against the incoming 
    request ID, and the associated roles, methods, and actions that are allowed 
    for requests on that pattern.
   </para>

   <para>
    The options shown in the default version of the file do not include all of
    the actions available at each endpoint.
   </para>

   <para>
    The following sample configuration entry indicates the configurable
    parameters and their purpose.
   </para>
   <programlisting language="javascript">
        {  
            "pattern"   : "*",
            "roles"     : "openidm-admin",
            "methods"   : "*", // default to all methods allowed
            "actions"   : "*", // default to all actions allowed
            "customAuthz" : "disallowQueryExpression()",
            "excludePatterns": "system/*"
        },    
   </programlisting>
   <para>
    As shown, this entry affects users with the <literal>openidm-admin</literal>
    role. Such users have HTTP access to all but <literal>system</literal>
    endpoints. The parameters are as follows:
   </para>
    
   <itemizedlist>
    <listitem>
     <para>
      <literal>"pattern"</literal> - the REST endpoint to which access is being
      controlled. <literal>"*"</literal> indicates access to all endpoints.
      <literal>"managed/user/*"</literal> would indicate access to all managed
      user objects.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>"roles"</literal> - a list of the roles to which this access
      configuration applies.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>"methods"</literal> - a comma separated list of the methods to
      which access is being granted. The method can be one or more of
      <literal>create, read, update, delete, patch, action, query</literal>. A
      value of <literal>"*"</literal> indicates that all methods are allowed. A
      value of <literal>""</literal> indicates that no methods are allowed.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>"actions"</literal> - a comma separated list of the allowed
      actions. The possible values depend on the service (URL) that is being
      exposed. The following list indicates the possible actions for each
      service.
     </para>
     <simplelist>
      <member>
       <literal>openidm/info/*</literal> - <literal>(no action parameter
       applies)</literal>
      </member>
      <member>
       <literal>openidm/authentication</literal> -
       <literal>reauthenticate</literal>
      </member>
      <member>
       <literal>openidm/config/ui/*</literal> - <literal>(no action
       parameter applies)</literal>
      </member>
      <member>
       <literal>openidm/endpoint/securityQA</literal> -
       <literal>securityQuestionForUserName, checkSecurityAnswerForUserName,
       setNewPasswordForUserName
       </literal>
      </member>
      <member>
       <literal>openidm/endpoint/getprocessforuser</literal> -
       <literal>create, complete</literal>
      </member>
      <member>
       <literal>openidm/endpoint/gettaskview</literal> -
       <literal>create, complete</literal>
      </member>
      <member>
       <literal>openidm/external/email</literal> - <literal>send</literal>
      </member>
      <member>
       <literal>openidm/external/rest</literal> - <literal>(no action parameter
       applies)</literal>
      </member>
      <member>
       <literal>openidm/managed</literal> - <literal>patch,
       triggerSyncCheck</literal>
      </member>
      <member>
       <literal>openidm/managed/user</literal> - <literal>validateObject,
       validateProperty</literal>
      </member>
      <member>
       <literal>openidm/policy</literal> - <literal>validateObject,
       validateProperty</literal>
      </member>
      <member>
       <literal>openidm/recon</literal> - <literal>recon, reconByQuery,
       reconById, cancel</literal>
      </member>
      <member>
       <literal>openidm/repo</literal> - <literal>updateDbCredentials</literal>
      </member>
      <member>
       <literal>openidm/script/*</literal> - <literal>eval</literal>
      </member>
      <member>
       <literal>openidm/security/keystore</literal> -
       <literal>generateCert, generateCSR</literal>
      </member>
      <member>
       <literal>openidm/security/truststore</literal> -
       <literal>generateCert, generateCSR</literal>
      </member>
      <member>
       <literal>openidm/sync</literal> - <literal>notifyCreate, notifyUpdate,
       notifyDelete, recon, performAction</literal>
      </member>
      <member>
       <literal>openidm/system</literal> - <literal>test, testConfig,
       availableConnectors, createCoreConfig, createFullConfig, liveSync,
       authenticate</literal>
      </member>
      <member>
       <literal>openidm/system/&lt;name&gt;</literal> - <literal>script,
       test, liveSync</literal>
      </member>
      <member>
       <literal>openidm/system/&lt;name&gt;/{id}</literal> -
       <literal>authenticate, liveSync</literal>
      </member>
      <member>
       <literal>openidm/taskscanner</literal> - <literal>execute,
       cancel</literal>
      </member>
      <member>
       <literal>openidm/workflow/processdefinition</literal> - <literal>
       create, complete</literal>
      </member>
      <member>
       <literal>openidm/workflow/processinstance</literal> - <literal>create,
       complete</literal>
      </member>
      <member>
       <literal>openidm/workflow/taskinstance</literal> -
       <literal>claim, create, complete</literal>
      </member>
     </simplelist>
     <para>
      A value of <literal>"*"</literal> indicates that all actions exposed for
      that service are allowed. A value of <literal>""</literal> indicates that
      no actions are allowed.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>"customAuthz"</literal> - an optional parameter that enables you
      to specify a custom function for additional authorization checks. These
      functions are defined in <filename>router-authz.js</filename>.
     </para>
     <para>
      The <literal>allowedPropertiesForManagedUser</literal> variable, declared
      at the beginning of the file, enables you to create a white list of
      attributes that users are able to modify on their own accounts.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>"excludePatterns"</literal> - an optional parameter that enables
      you to specify particular endpoints to which access should not be given.
     </para>
    </listitem>
   </itemizedlist>
  </section>
  
  <section xml:id="authorization-extending">
   <title>Extending the Authorization Mechanism</title>
   <para>
    You can extend the default authorization mechanism by defining additional
    functions in <filename>router-authz.js</filename> and by creating new access
    control configuration definitions in <filename>access.js</filename>.
   </para>
  </section>

 </section>

 <section xml:id="user-group-role-auth-assignment">
  <title>Building Role-Based Access Control (RBAC)</title>

  <para>
   In OpenIDM, role assignments can be configured with different authentication
   options. Roles can be assigned in a number of ways. The roles assigned to
   specific users are cumulative.
  </para>

  <para>
   The roles for each user are calculated based on the process depicted here:
  </para>

  <mediaobject xml:id="figure-roles-auth">
   <alt>The Role-Based Access Control Configuration Process</alt>
   <imageobject>
    <imagedata fileref="images/roles-auth.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>The RBAC configuration process is additive; it includes roles
     assigned by default, from objects, and group mapping.</para>
   </textobject>
  </mediaobject>

  <para>
   In OpenIDM, RBAC incorporates authentication and authorization options from
   roles configured for clients, for managed / internal users, as well as for
   group memberships.
  </para>
  <para>
   The properties listed in this section are described in <xref
   linkend="passthrough-auth" />.
  </para>

  <para>
   Roles and authentication options can be configured for users in three stages:
  </para>
  
  <variablelist>
   <varlistentry>
    <term>Client Controlled</term>
    <listitem>
     <para>
      The <literal>defaultUserRoles</literal> may be added to authentication
      modules configured in the applicable
      <filename>authentication.json</filename> file. Default roles are listed in
      <xref linkend="openidm-roles" />.
     </para>
     <para>
      If you see the following entry in <filename>authentication.json</filename>,
      the cited authentication property applies to all authenticated users:
     </para>
     <screen>"defaultUserRoles" : [ ] </screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Managed / Internal</term>
    <listitem>
     <para>
      Accumulated roles for users are collected in the <literal>userRoles</literal>
      property.
     </para>
     <para>
      For a definition of managed and internal users, see
      <xref linkend="openidm-users" />.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Group roles</term>
    <listitem>
     <para>
      OpenIDM also uses group roles as input. Options include
      <literal>groupMembership</literal>, <literal>groupRoleMapping</literal>,
      and <literal>groupComparison</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>context.security</term>
    <listitem>
     <para>
      Once OpenIDM assigns roles and authentication modules to a user,
      OpenIDM then evaluates the result based on the
      <literal>context.security</literal> map, based on the scripts in the
      <filename>policy.js</filename> file. Details require an extended
      discussion in the next section.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

 <section xml:id="auth-security-context">
  <title>Roles, Authentication, and the Security Context</title>

  <para>
   The Security Context, written into the code as
   <literal>context.security</literal>, consists of a principal defined by the
   <literal>authenticationId</literal>, along with access control defined
   through the <literal>authorizationId</literal>.
  </para>

  <para>
   If authentication is successful, Common Authentication Framework (CAF)
   modules set a principal. OpenIDM stores that principal as the
   <literal>authenticationId</literal>. For more information, see the
   authentication components defined in <xref linkend="supported-auth-modules" />.
  </para>

  <para>
   The <literal>authorizationId</literal> includes two roles-related components,
   generated by OpenIDM:
  </para>

  <variablelist>
   <varlistentry>
    <term>roles</term>
    <listitem>
     <para>
      Discussed in <xref linkend="openidm-roles" />
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>component</term>
    <listitem>
     <para>
      Resources defined through the configuration properties listed in
      <xref linkend="passthrough-auth" />. The <literal>authorizationId</literal>
      component is set to the value references in the
      <literal>queryOnResource</literal> property.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>
 </section>

</chapter>
