<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-cli'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>OpenIDM Command-Line Interface</title>

 <para>OpenIDM includes a basic command-line interface that provides a number 
 of utilities for managing the OpenIDM instance.</para>
 
 <para>All of the utilities are subcommands of the <literal>cli.sh</literal> 
 (UNIX) or <literal>cli.bat</literal> (Windows) scripts. To use the utilities, 
 you can either run them as subcommands, or launch the <command>cli</command> 
 script first, and then run the utility. For example, to run the 
 <command>encrypt</command> utility on a UNIX system:</para>
 
 <screen>
$ <userinput>cd /path/to/openidm </userinput>
$ <userinput>./cli.sh </userinput>
  <computeroutput>
Using boot properties at /path/to/openidm/conf/boot/boot.properties
openidm# encrypt ....</computeroutput>
 </screen>
 
<para>or</para>

 <screen>
$ <userinput>cd /path/to/openidm</userinput>
$ <userinput>./cli.sh encrypt ... </userinput>
 </screen>
 
 <para>By default, the command-line utilities run with the properties defined 
 in <filename>/path/to/openidm/conf/boot/boot.properties</filename>.</para>

 <para>
  If you run the <command>cli.sh</command> command by itself, it opens an
  OpenIDM-specific shell prompt:
 </para>

 <screen>openidm#</screen>
 
 <para>The startup and shutdown scripts are not discussed in this chapter. For 
 information about these scripts, see <link xlink:href="integrators-guide#chap-services" 
 xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Starting and 
 Stopping OpenIDM</citetitle></link>.</para>
 
 <para>The following sections describe the subcommands and their use. Examples 
 assume that you are running the commands on a UNIX system. For Windows 
 systems, use <command>cli.bat</command> instead of <command>cli.sh</command>.
 </para>

 <para>
  For a list of subcommands available from the <literal>openidm#</literal>
  prompt, run the <command>cli.sh help</command> command. The
  <command>help</command> and <command>exit</command> options shown below are
  self-explanatory. The other subcommands are explained in the subsections
  that follow.
 </para>

 <screen>local:keytool  Export or import a SecretKeyEntry. 
	   The Java Keytool does not allow for exporting or importing SecretKeyEntries.
local:encrypt    Encrypt the input string.
local:validate   Validates all json configuration files in the configuration (default: /conf) folder.
basic:help   Displays available commands.
basic:exit   Exit from the console.
remote:configureconnector   Generate connector configuration.
remote:configexport         Exports all configurations.
remote:configimport         Imports the configuration set from local file/directory.</screen>


  <para>
   The <command>configexport</command>, <command>configimport</command>, and
   <command>configconnector</command> subcommands support up to four options:
  </para>
 
  <variablelist>
   <varlistentry>
    <term>-u or --user USER[:PASSWORD]</term>
    <listitem>
     <para>
      Allows you to specify the server user and password. Specifying a username
      is mandatory. If you do not specify a username, the following error is
      output to the console:
      <literal>Remote operation failed: Unauthorized</literal>. If you do
      not specify a password, you are prompted for one. This option is used by
      all three subcommands.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
     <term>--url URL</term>
     <listitem>
      <para>
       The URL of the OpenIDM REST service. The default URL is
       <literal>http://localhost:8080/openidm/</literal>. This can
       be used to import configuration files from a remote running
       instance of OpenIDM. This option is used with the
       <command>configimport</command> and <command>configexport</command>
       commands.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>-P or --port PORT</term>
     <listitem>
      <para>
       The port number associated with the OpenIDM REST service. If specified,
       this option overrides any port number specified with the
       <command>--url</command> option. The default port is 8080. This option is
       used with the <command>configimport</command> and
       <command>configexport</command> commands.
      </para>
     </listitem>
    </varlistentry>
   <varlistentry>
    <term>-r or --replaceall or --replaceAll</term>
    <listitem>
     <para>
      Replaces the entire list of configuration files with the files in the
      specified backup directory. This option is used with only the
      <command>configimport</command> command.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

 <section xml:id="cli-configexport">
  <title>configexport</title>

  <para>The <command>configexport</command> subcommand exports all 
  configuration objects to a specified location, enabling you to reuse a 
  system configuration in another environment. For example, you can test a 
  configuration in a development environment, then export it and import it 
  into a production environment. This subcommand also enables you to inspect 
  the active configuration of an OpenIDM instance.</para>
  
  <para>OpenIDM must be running when you execute this command.</para>
  
  <para>Usage is as follows:</para>
  
  <screen>
$ ./cli.sh configexport --user username:passsword <replaceable>export-location</replaceable>
  </screen>

  <para>For example:</para>

  <screen>
$ ./cli.sh --user openidm-admin:openidm-admin configexport /tmp/conf</screen>
  
  <para>Configuration objects are exported, as <filename>.json</filename>
   files, to the specified directory. The command creates the directory if
   needed. Configuration files that are present in this directory are renamed as
   backup files, with a timestamp, for example,
   <filename>audit.json.2014-02-19T12-00-28.bkp</filename>, and are not
   overwritten. The following configuration objects are exported:</para>
  
  <itemizedlist>
    <listitem>
      <para>The internal repository configuration (<filename>repo.orientdb.json
      </filename> or <filename>repo.jdbc.json</filename>)</para>
    </listitem>
    <listitem>
     <para>Default and custom configuration directories (<filename>script.json
     </filename>)</para>
    </listitem>
    <listitem>
      <para>The log configuration (<filename>audit.json</filename>)</para>
    </listitem>
    <listitem>
      <para>The authentication configuration (<filename>authentication.json
      </filename>)</para>
    </listitem>
    <listitem>
     <para>The cluster configuration (<filename>cluster.json</filename>)</para>
    </listitem>
    <listitem>
     <para>The configuration of a connected SMTP email server
     (<filename>external.email.json)</filename></para>
    </listitem>
    <listitem>
     <para>Custom configuration information
      (<filename>info-<replaceable>name</replaceable>.json</filename>)
     </para>
    </listitem>
    <listitem>
      <para>The managed object configuration (<filename>managed.json</filename>)
      </para>
    </listitem>                  
    <listitem>
      <para>The connector configuration (<filename>provisioner.openicf-*.json
      </filename>)</para>
    </listitem>
    <listitem>
      <para>The router service configuration (<filename>router.json</filename>)
      </para>
    </listitem>
    <listitem>
      <para>The scheduler service configuration (<filename>scheduler.json</filename>)
      </para>
    </listitem>
    <listitem>
      <para>Any configured schedules (<filename>schedule-*.json</filename>)
      </para>
    </listitem>    
    <listitem>
      <para>The synchronization mapping configuration (<filename>sync.json
      </filename>)</para>
    </listitem>         
     <listitem>
      <para>If workflows are defined, the configuration of the workflow engine 
      (<filename>workflow.json</filename>) and the workflow access 
      configuration (<filename>process-access.json</filename>)</para>
    </listitem>
    <listitem>
     <para>Any configuration files related to the user interface 
     (<filename>ui-*.json</filename>)</para>
    </listitem>
    <listitem>
      <para>The configuration of any custom endpoints 
      (<filename>endpoint-*.json</filename>)</para>
    </listitem>
    <listitem>
     <para>The configuration of servlet filters
     (<filename>servletfilter-*.json</filename>)</para>
    </listitem>
    <listitem>
      <para>The policy configuration (<filename>policy.json</filename>)</para>
    </listitem>    
  </itemizedlist>
 </section>

<section xml:id="cli-configimport">
  <title>configimport</title>

  <para>The <command>configimport</command> subcommand imports configuration 
  objects from the specified directory, enabling you to reuse a system 
  configuration from another environment. For example, you can test a 
  configuration in a development environment, then export it and import it 
  into a production environment.</para>

  <para>The command updates the existing configuration from the 
  <replaceable>import-location</replaceable> over the OpenIDM REST interface. 
  By default, if configuration objects are present in the 
  <replaceable>import-location</replaceable> and not in the existing 
  configuration, these objects are added. If configuration objects are present 
  in the existing location but not in the 
  <replaceable>import-location</replaceable>, these objects are left untouched 
  in the existing configuration.</para>
        
  <para>If you include the <literal>--replaceAll</literal> parameter, the 
  command wipes out the existing configuration and replaces it with the 
  configuration in the <replaceable>import-location</replaceable>. Objects in 
  the existing configuration that are not present in the 
  <replaceable>import-location</replaceable> are deleted.</para>
                
  <para>Usage is as follows:</para>
  
  <screen>
$ ./cli.sh configimport --user username:password [--replaceAll] <replaceable>import-location</replaceable>
  </screen>
  
  <para>For example:</para>
  
  <screen>
$ ./cli.sh configimport --user openidm-admin:openidm-admin --replaceAll /tmp/conf
  </screen>

  <para>Configuration objects are imported, as <literal>.json</literal> files, 
  from the specified directory to the <filename>conf</filename> directory. The 
  configuration objects that are imported are outlined in the corresponding 
  export command, described in the previous section.</para>
  
 </section>
 
 <section xml:id="cli-configureconnector">
  <title>configureconnector</title>
  
  <para>The <command>configureconnector</command> subcommand generates a 
  configuration for an OpenICF connector.</para>
  
  <para>Usage is as follows:</para>
  
  <screen>$ ./cli.sh --user username:password configureconnector <replaceable>connector-name</replaceable>
  </screen>
  
  <para>Select the type of connector that you want to configure. The following 
  example configures a new XML connector.
  </para>

  <!-- Removed <?eval ${openicfBundleVersion}?> as that doesn't match
  the version numbers shown in command output. If there is a future mismatch
   in version numbers, I do not know if that's a "big deal". -->

  <screen width="85">
$ <userinput>./cli.sh --user openidm-admin:openidm-admin configureconnector myXmlConnector
   </userinput>
   <computeroutput>
Starting shell in /path/to/openidm
Using boot properties at /path/to/openidm/conf/boot/boot.properties
0. Scripted SQL Connector version 1.1.0.1
1. XML Connector version 1.1.0.1
2. Database Table Connector version 1.1.0.0
3. CSV File Connector version 1.1.0.1
4. LDAP Connector version 1.1.1.2
5. Exit
Select [0..5]: 0
Edit the configuration file and run the command again. The configuration was 
  saved to /openidm/temp/provisioner.openicf-myXmlConnector.json</computeroutput>
  </screen>
  
  <para>The basic configuration is saved in a file named 
  <filename>/openidm/temp/provisioner.openicf-<replaceable>connector-name</replaceable>.json</filename>.
  Edit the <literal>configurationProperties</literal> parameter in this file to 
  complete the connector configuration. For an XML connector, you can use the 
  schema definitions in sample 1 for an example configuration.</para>
  
  <programlisting language="javascript">
  "configurationProperties" : {
    "xmlFilePath" : "samples/sample1/data/resource-schema-1.xsd",
    "createFileIfNotExists" : false,
    "xsdFilePath" : "samples/sample1/data/resource-schema-extension.xsd",
    "xsdIcfFilePath" : "samples/sample1/data/xmlConnectorData.xml"
  },  
  </programlisting>
  
  <para>For more information about the connector configuration properties, see 
  <link xlink:href="integrators-guide#openicf-provisioner-conf"
xlink:role="http://docbook.org/xlink/role/olink"><citetitle
>Configuring Connectors</citetitle></link>.</para>

  <para>When you have modified the file, run the 
  <command>configureconnector</command> command again so that OpenIDM can pick 
  up the new connector configuration.</para>
  
  <screen>
<userinput>$ ./cli.sh --user openidm-admin:openidm-admin configureconnector myXmlConnector</userinput>
<computeroutput>Using boot properties at /openidm/conf/boot/boot.properties
Configuration was found and picked up from:
      /openidm/temp/provisioner.openicf-myXmlConnector.json
Dec 11, 2012 10:55:28 AM org.restlet.ext.httpclient.HttpClientHelper start
INFO: Starting the HTTP client
...</computeroutput>
  </screen>  
  
  <para>You can also configure connectors over the REST interface. For more 
  information, see <link xlink:href="integrators-guide#connector-wiz"
xlink:role="http://docbook.org/xlink/role/olink"><citetitle
>Creating Default Connector Configurations</citetitle></link>.</para>
 </section> 
 
 <section xml:id="cli-encrypt">
  <title>encrypt</title>
 
  <para>The <command>encrypt</command> subcommand encrypts an input string, or 
  JSON object, provided at the command line. This subcommand can be used to 
  encrypt passwords, or other sensitive data, to be stored in the OpenIDM 
  repository. The encrypted value is output to standard output and provides 
  details of the cryptography key that is used to encrypt the data.</para>
  
  <para>Usage is as follows:</para>
  
  <screen>
$ ./cli.sh encrypt [-j] <replaceable>string</replaceable>
  </screen>
  
  <para>The <literal>-j</literal> option specifies that the string to be 
  encrypted is a JSON object. If you do not enter the string as part of the 
  command, the command prompts for the string to be encrypted. If you enter 
  the string as part of the command, any special characters, for example 
  quotation marks, must be escaped.</para>
  
  <para>The following example encrypts a normal string value:</para>
  
  <screen width="85">
$ <userinput>./cli.sh encrypt mypassword  </userinput>
  <computeroutput>
Executing ./cli.sh
Starting shell in /path/to/openidm
Using boot properties at /path/to/openidm/conf/boot/boot.properties
Activating cryptography service of type: JCEKS provider:  location: security/keystore.jceks
Available cryptography key: openidm-sym-default
Available cryptography key: openidm-localhost
CryptoService is initialized with 2 keys.
-----BEGIN ENCRYPTED VALUE-----
{
  "$crypto" : {
    "value" : {
      "iv" : "M2913T5ZADlC2ip2imeOyg==",
      "data" : "DZAAAM1nKjQM1qpLwh3BgA==",
      "cipher" : "AES/CBC/PKCS5Padding",
      "key" : "openidm-sym-default"
    },
    "type" : "x-simple-encryption"
  }
}
------END ENCRYPTED VALUE------ </computeroutput>
  </screen>  

  <para>The following example encrypts a JSON object. The input string must be 
  a valid JSON object.</para>
  
  <screen width="85">
$ <userinput>./cli.sh encrypt -j {\"password\":\"myPassw0rd\"}</userinput>
<computeroutput>
Starting shell in /path/to/openidm
Using boot properties at /path/to/openidm/conf/boot/boot.properties
Activating cryptography service of type: JCEKS provider:  location: security/keystore.jceks
Available cryptography key: openidm-sym-default
Available cryptography key: openidm-localhost
CryptoService is initialized with 2 keys.
-----BEGIN ENCRYPTED VALUE-----
{
  "$crypto" : {
    "value" : {
      "iv" : "M2913T5ZADlC2ip2imeOyg==",
      "data" : "DZAAAM1nKjQM1qpLwh3BgA==",
      "cipher" : "AES/CBC/PKCS5Padding",
      "key" : "openidm-sym-default"
    },
    "type" : "x-simple-encryption"
  }
}
------END ENCRYPTED VALUE------  </computeroutput>
  </screen>

  <para>The following example prompts for a JSON object to be encrypted. In 
  this case, you need not escape the special characters.</para>
  
  <screen width="85">
$ <userinput>./cli.sh encrypt -j

Using boot properties at /path/to/openidm/conf/boot/boot.properties
Enter the Json value

> Press ctrl-D to finish input
Start data input:
{"password":"myPassw0rd"}
^D        </userinput>
<computeroutput>
Activating cryptography service of type: JCEKS provider:  location: security/keystore.jceks
Available cryptography key: openidm-sym-default
Available cryptography key: openidm-localhost
CryptoService is initialized with 2 keys.
-----BEGIN ENCRYPTED VALUE-----
{
  "$crypto" : {
    "value" : {
      "iv" : "6e0RK8/4F1EK5FzSZHwNYQ==",
      "data" : "gwHSdDTmzmUXeD6Gtfn6JFC8cAUiksiAGfvzTsdnAqQ=",
      "cipher" : "AES/CBC/PKCS5Padding",
      "key" : "openidm-sym-default"
    },
    "type" : "x-simple-encryption"
  }
}
------END ENCRYPTED VALUE------</computeroutput>
  </screen>

 </section>
 
 <section xml:id="cli-keytool">     
   <title>keytool</title>
   
  <indexterm>
    <primary>Keytool</primary>
  </indexterm>   

   <para>
    The <command>keytool</command> subcommand exports or imports secret key
    values.
   </para>
   
   <para>
    The Java <command>keytool</command> command enables you to export and import
    public keys and certificates, but not secret or symmetric keys. The OpenIDM
    <command>keytool</command> subcommand provides this functionality.
   </para>

  <para>Usage is as follows:</para>
  
  <screen>./cli.sh keytool [--export, --import] <replaceable>alias</replaceable>
  </screen>
  
  <para>
   For example, to export the default OpenIDM symmetric key, run the following
   command:
  </para>
  
  <screen>
$ <userinput>./cli.sh keytool --export openidm-sym-default</userinput>
   <computeroutput>
Using boot properties at /openidm/conf/boot/boot.properties
Use KeyStore from: /openidm/security/keystore.jceks
Please enter the password: 
[OK] Secret key entry with algorithm AES
AES:606d80ae316be58e94439f91ad8ce1c0  </computeroutput>
  </screen>
  
  <para>The default keystore password is <literal>changeit</literal>. You 
  should change this password after installation.</para>
  
  <para>To import a new secret key named <replaceable>my-new-key</replaceable>, 
  run the following command:</para>
  
  <screen>
$ <userinput>./cli.sh keytool --import my-new-key   </userinput>
   <computeroutput>
Using boot properties at /openidm/conf/boot/boot.properties
Use KeyStore from: /openidm/security/keystore.jceks
Please enter the password: 
Enter the key: 
AES:606d80ae316be58e94439f91ad8ce1c0 </computeroutput>
  </screen>
  
  <para>If a secret key of that name already exists, OpenIDM returns the 
  following error:</para>
  
  <screen>"KeyStore contains a key with this alias"</screen>
   
 </section>

<section xml:id="cli-validate">
  <title>validate</title>

  <indexterm>
    <primary>Configuration</primary>
    <secondary>Validating</secondary>
  </indexterm>

  <para>The <command>validate</command> subcommand validates all .json 
  configuration files in the <filename>openidm/conf/</filename> directory.</para>
  
  <para>Usage is as follows:</para>
  
  <screen>
$ <userinput>./cli.sh validate   </userinput>
   <computeroutput>
Executing ./cli.sh
Starting shell in /path/to/openidm
Using boot properties at /path/to/openidm/conf/boot/boot.properties
...................................................................
[Validating] Load JSON configuration files from:
[Validating] 	/path/to/openidm/conf
[Validating] audit.json .................................. SUCCESS
[Validating] authentication.json ......................... SUCCESS

    ...

[Validating] sync.json ................................... SUCCESS
[Validating] ui-configuration.json ....................... SUCCESS
[Validating] ui-countries.json ........................... SUCCESS
[Validating] ui-secquestions.json ........................ SUCCESS
[Validating] workflow.json ............................... SUCCESS
  </computeroutput></screen>

</section>

</chapter>