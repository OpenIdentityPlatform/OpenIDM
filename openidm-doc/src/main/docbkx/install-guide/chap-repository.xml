<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2012-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-repository'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Installing a Repository For Production</title>
  <indexterm>
   <primary>Repository database</primary>
   <secondary>Production ready</secondary>
  </indexterm>

 <para>
  By default, OpenIDM uses OrientDB for its internal repository so that you do
  not have to install a database in order to evaluate OpenIDM. Before using
  OpenIDM in production, however, you must replace OrientDB with a supported
  JDBC repository.
 </para>
 
 <para>
  OpenIDM <?eval ${docTargetVersion}?> supports the use of <link
  xlink:href="http://dev.mysql.com/downloads/mysql/"
  xlink:show="new">MySQL</link>, MS SQL, and Oracle Database as internal
  repositories. For details of the supported versions, see <link
  xlink:href="release-notes#chap-before-you-install"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Before You Install
  OpenIDM Software</citetitle></link> in the
  <citetitle>Release Notes</citetitle>.
 </para>

 <section xml:id="repository-mysql">
  <title>To Set Up OpenIDM With MySQL</title>

  <procedure>
   <para>
    After you have installed MySQL on the local host and <emphasis>before
    starting OpenIDM for the first time</emphasis>, set up OpenIDM to use the
    new repository, as described in the following sections.
   </para>
   <para>
    This procedure assumes that a password has already been set for the MySQL
    root user.
   </para>
   <step>
    <para>
     Download MySQL Connector/J, version 5.1 or later from the MySQL website.
     Unpack the delivery, and copy the .jar into the
     <filename>openidm/bundle</filename> directory.
    </para>
    <screen>
$ cp mysql-connector-java-<replaceable>version</replaceable>-bin.jar /path/to/openidm/bundle/
    </screen>
   </step>
   <step>
    <para>
     Make sure that OpenIDM is stopped.
    </para>
    <screen>$ cd /path/to/openidm/
$ ./shutdown.sh
OpenIDM is not running, not stopping.
    </screen>
   </step>
   <step>
    <para>
     Remove <filename>openidm/conf/repo.orientdb.json</filename>.
    </para>
   <screen>$ cd /path/to/openidm/conf/
$ rm repo.orientdb.json</screen>
  </step>
  <step>
   <para>Copy <filename>openidm/samples/misc/repo.jdbc.json</filename> to the
   <filename>openidm/conf</filename> directory.</para>
   <screen>$ cd /path/to/openidm/conf
$ cp ../samples/misc/repo.jdbc.json .</screen>
  </step>
  <step>
   <indexterm>
    <primary>Repository database</primary>
    <secondary>Table names</secondary>
   </indexterm>
   <para>Import the data definition language script for OpenIDM into
   MySQL.</para>
   <screen>$ ./bin/mysql -u root -p &lt; /path/to/openidm/db/scripts/mysql/openidm.sql
Enter password:
$ </screen>
   <para>This step creates an <literal>openidm</literal> database for use
   as the internal repository, and a user <literal>openidm</literal> with 
   password <literal>openidm</literal> who has all the required privileges to 
   update the database.</para>
   <screen>$ cd /path/to/mysql
$ ./bin/mysql -u root -p 
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 18
Server version: 5.5.19 MySQL Community Server (GPL)
...
mysql&gt; use openidm;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; show tables;
+---------------------------+
| Tables_in_openidm         |
+---------------------------+
| auditaccess               |
| auditactivity             |
| auditrecon                |
| clusterobjectproperties   |
| clusterobjects            |
| configobjectproperties    |
| configobjects             |
| genericobjectproperties   |
| genericobjects            |
| internaluser              |
| links                     |
| managedobjectproperties   |
| managedobjects            |
| objecttypes               |
| schedulerobjectproperties |
| schedulerobjects          |
| uinotification            |
+---------------------------+
17 rows in set (0.00 sec)</screen>
   <para>The table names are similar to those used with OrientDB.</para>
  </step>
  <step>
   <para>Update <filename>openidm/conf/repo.jdbc.json</filename> as necessary,
   to reflect your MySQL deployment.</para>
   <programlisting language="javascript">
"connection" : {
    "dbType" : "MYSQL",
    "jndiName" : "",
    "driverClass" : "com.mysql.jdbc.Driver",
    <emphasis role="strong">"jdbcUrl" : "jdbc:mysql://localhost:3306/openidm",
    "username" : "openidm",
    "password" : "openidm",</emphasis>
    "defaultCatalog" : "openidm",
    "maxBatchSize" : 100,
    "maxTxRetry" : 5,
    "enableConnectionPool" : true 
},</programlisting>
  </step>
 </procedure>

    <para>
     When you have set up MySQL for use as the OpenIDM internal repository,
     start OpenIDM to check that the setup has been successful. After startup,
     you should see that <literal>repo.jdbc</literal> is
     <literal>active</literal>, whereas <literal>repo.orientdb</literal> is
     <literal>unsatisfied</literal>.
    </para>

    <screen>
     <userinput>
$ cd /path/to/openidm
$ ./startup.sh
     </userinput>
     <computeroutput>
Using OPENIDM_HOME:   /path/to/openidm
Using OPENIDM_OPTS:   -Xmx1024m
Using LOGGING_CONFIG:
-Djava.util.logging.config.file=/path/to/openidm/conf/logging.properties
Using boot properties at /path/to/openidm/conf/boot/boot.properties
     </computeroutput>
     <userinput>
-&gt; scr list
     </userinput>
     <computeroutput>
Id   State          Name
[  19] [active       ] org.forgerock.openidm.config.starter
        [  23] [active       ] org.forgerock.openidm.taskscanner
        [   8] [active       ] org.forgerock.openidm.external.rest
        [  12] [active       ] org.forgerock.openidm.provisioner.openicf.connectorinfoprovider
        [  15] [active       ] org.forgerock.openidm.ui.simple
        [   1] [active       ] org.forgerock.openidm.router
        [  22] [active       ] org.forgerock.openidm.scheduler
        [  14] [active       ] org.forgerock.openidm.restlet
        [   7] [unsatisfied  ] org.forgerock.openidm.external.email
        [  18] [unsatisfied  ] org.forgerock.openidm.repo.orientdb
        [   6] [active       ] org.forgerock.openidm.sync
        [   3] [active       ] org.forgerock.openidm.script
        [   5] [active       ] org.forgerock.openidm.recon
        [   2] [active       ] org.forgerock.openidm.scope
        [  10] [active       ] org.forgerock.openidm.http.contextregistrator
        [  20] [active       ] org.forgerock.openidm.config
        [   0] [active       ] org.forgerock.openidm.audit
        [  21] [active       ] org.forgerock.openidm.schedule
        [  17] [active       ] org.forgerock.openidm.repo.jdbc
        [  16] [active       ] org.forgerock.openidm.workflow
        [  13] [active       ] org.forgerock.openidm.provisioner.openicf
        [   4] [active       ] org.forgerock.openidm.managed
        [   9] [active       ] org.forgerock.openidm.authentication
        [  11] [active       ] org.forgerock.openidm.provisioner
     </computeroutput>
    </screen>
 </section>

 <section xml:id="repository-mssql">
  <title>To Set Up OpenIDM With MS SQL</title>

  <procedure>
   <para>
    These instructions are specific to MS SQL Server 2008 R2 Express running on
    a local Windows XP system. Adapt the instructions for your environment.
   </para>

   <itemizedlist>
    <para>
     When you install MS SQL Server, note that OpenIDM has the following
     specific configuration requirements:
    </para>
    <listitem>
     <para>
      OpenIDM requires SQL Server authentication. During the MS SQL Server
      installation, make sure that you select SQL Server authentication and not
      just Windows authentication.
     </para>
    </listitem>
    <listitem>
     <para>
      During the Feature Selection installation step, make sure that at least
      SQL Server Replication, Full Text Search, and Management Tools - Basic are
      selected.
     </para>
     <para>
      These instructions require SQL Management Studio so make sure that you
      include Management Tools in the installation.
     </para>
    </listitem>
    <listitem>
     <para>
      TCP/IP must be enabled and configured for the correct IP address and port.
      To configure TCP/IP, follow these steps:
     </para>
     <orderedlist>
      <listitem>
       <para>
        Click Start > All Programs > MS SQL Server 2008 R2 > Configuration Tools
        > SQL Server Configuration Manager.
       </para>
      </listitem>
      <listitem>
       <para>
        Expand the SQL Server Network Configuration item and select "Protocols
        for SQLEXPRESS".
       </para>
      </listitem>
      <listitem>
       <para>
        Double click TCP/IP and select Enabled > Yes.
       </para>
      </listitem>
      <listitem>
       <para>
        Select the IP Addresses tab and set the addresses and ports on which the
        server will listen.
       </para>
       <para>
        For this sample procedure, scroll down to IPAll and set TCP Dynamic
        Ports to 1433 (the default port for MS SQL).
       </para>
      </listitem>
      <listitem>
       <para>
        Click Apply, then OK.
       </para>
      </listitem>
      <listitem>
       <para>
        Restart MS SQL Server for the configuration changes to take effect. To
        restart the server, select SQL Server Services in the left pane, double
        click SQL Server (SQLEXPRESS) and click Restart.
       </para>
      </listitem>
      <listitem>
       <para>
        If you have a firewall enabled, ensure that the port you configured in
        the previous step is open for OpenIDM to access MS SQL.
       </para>
      </listitem>
     </orderedlist>
    </listitem>
   </itemizedlist>

   <para>
    After you have installed MS SQL on the local host, install OpenIDM, if you
    have not already done so, but <emphasis>do not start</emphasis> the OpenIDM
    instance. Import the data definition and set up OpenIDM to use the new
    repository, as described in the following steps.
   </para>

   <step>
    <para>
     Use SQL Management Studio to import the data definition language script for
     OpenIDM into MS SQL.
    </para>
    <substeps>
     <step>
      <para>
       Click Start > All Programs > MS SQL Server 2008 R2 > SQL Server
       Management Studio.
      </para>
     </step>
     <step>
      <para>
       On the Connect to Server panel, select SQL Server Authentication from the
       Authentication drop down list and log in as the current user (for
       example, Administrator).
      </para>
     </step>
     <step>
      <para>
       Select File > Open > File and navigate to the OpenIDM data definition
       language script
       (<filename>path\to\openidm\db\scripts\mssql\openidm.sql</filename>).
       Click Open to open the file.
      </para>
     </step>
     <step>
      <para>
       Click Execute to run the script.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     This step creates an <literal>openidm</literal> database for use as the
     internal repository, and a user <literal>openidm</literal> with password
     <literal>Passw0rd</literal> who has all the required privileges to update
     the database. You might need to refresh the view in SQL Server Management
     Studio to see the <literal>openidm</literal> database in the Object
     Explorer.
    </para>
    <para>
     Expand Databases > openidm > Tables. You should see the following tables in
     the openidm database:
    </para>
    <mediaobject>
     <alt>Default tables in the openidm MS SQL database</alt>
     <imageobject>
      <imagedata fileref="images/sql-tables.png" format="PNG" />
     </imageobject>
    </mediaobject>
    <para>
     The table names are similar to those used with OrientDB.
    </para>
   </step>
   <step>
    <para>
     OpenIDM requires an MS SQL driver that must be created from two separate
     JAR files. Create the driver as follows.
    </para>
    <substeps>
     <step>
      <para>
       Download the JDBC Driver 4.0 for SQL Server
       (<filename>sqljdbc_4.0.2206.100_enu.tar.gz</filename>) from <link
       xlink:href="http://www.microsoft.com/en-us/download/details.aspx?id=11774">
       Microsoft's download site</link>. The precise URL may vary, depending on
       your location.
      </para>
      <para>
       Extract the executable Java archive file
       (<filename>sqljdbc4.jar</filename>) from the zip file, using 7-zip or an
       equivalent file management application.
      </para>
      <para>
       Copy the file to <filename>openidm\db\scripts\mssql</filename>.
      </para>
     </step>
     <step>
      <para>
       Download the <literal>bnd</literal> Java archive file
       (<filename>biz.aQute.bnd.jar</filename>) that enables you to create OSGi
       bundles. The file can be downloaded from <link
       xlink:href="http://dl.dropbox.com/u/2590603/bnd/biz.aQute.bnd.jar" />.
       For more information about <literal>bnd</literal>, see <link
       xlink:href="http://www.aqute.biz/Bnd/Bnd" />.
      </para>
      <para>
       Copy the file to <filename>openidm\db\scripts\mssql</filename>.
      </para>
     </step>
     <step>
      <para>
       Your <filename>openidm\db\scripts\mssql</filename> directory should now
       contain the following files:
      </para>
      <screen>
       <userinput>.\> ls \path\to\openidm\db\scripts\mssql</userinput>
       <computeroutput>
       biz.aQute.bnd.jar  openidm.sql  sqljdbc4.bnd  sqljdbc4.jar
       </computeroutput>
      </screen>
     </step>
     <step>
      <para>
       Bundle the two JAR files together with the following command:
      </para>
      <screen>
C:\> cd \path\to\openidm\db\scripts\mssql
./> java -jar biz.aQute.bnd.jar wrap -properties sqljdbc4.bnd sqljdbc4.jar
      </screen>
      <para>
       This step creates a single <literal>.bar</literal> file, named
       <filename>sqljdbc4.bar</filename>.
      </para>
     </step>
     <step>
      <para>
       Rename the <filename>sqljdbc4.bar</filename> file to
       <filename>sqljdbc4-osgi.jar</filename> and copy it to the
       <filename>openidm\bundle</filename> directory.
      </para>
      <screen>
./> mv sqljdbc4.bar sqljdbc4-osgi.jar
./> cp sqljdbc4-osgi.jar \path\to\openidm\bundle
      </screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Remove the default OrientDB repository configuration file
     (<filename>openidm\conf\repo.orientdb.json</filename>) from the
     configuration directory.
    </para>
    <screen>
C:\> cd \path\to\openidm\conf\
.\> del repo.orientdb.json
    </screen>
   </step>
   <step>
    <para>
     Copy the repository configuration file for MS SQL
     (<filename>openidm\samples\misc\repo.jdbc.json</filename>) to the
     configuration directory.
    </para>
    <screen>
C:\> cd \path\to\openidm\conf\
.\> cp ..\samples\misc\repo.jdbc-mssql.json .
    </screen>
   </step>
   <step>
    <para>
     Rename the MS SQL repository configuration file to
     <filename>repo.jdbc.json</filename>.
    </para>
    <screen>.\> mv repo.jdbc-mssql.json repo.jdbc.json</screen>
   </step>
   <step>
    <para>
     Update <filename>openidm\conf\repo.jdbc.json</filename> as necessary, to
     reflect your MS SQL deployment.
    </para>
    <programlisting language="javascript">
{
    "connection" : {
        "dbType" : "SQLSERVER",
        "jndiName" : "",
        "driverClass" : "com.microsoft.sqlserver.jdbc.SQLServerDriver",
        "jdbcUrl" : "jdbc:sqlserver://localhost:1433;instanceName=default;
                     databaseName=openidm;applicationName=OpenIDM",
        "username" : "openidm",
        "password" : "Passw0rd",
        "defaultCatalog" : "openidm",
        "maxBatchSize" : 100,
        "maxTxRetry" : 5,
        "enableConnectionPool" : true
    },
...
    </programlisting>
    <para>
     Specifically, check that the port matches what you have configured in MS
     SQL.
    </para>
   </step>
  </procedure>

  <para>
   When you have completed the preceding steps, start OpenIDM to check that the
   setup has been successful. After startup, you should see that
   <literal>repo.jdbc</literal> is <literal>active</literal>, whereas
   <literal>repo.orientdb</literal> is <literal>unsatisfied</literal>.
  </para>

  <screen>
   <userinput>
C:> cd \path\to\openidm
./> startup.bat
   </userinput>
   <computeroutput>
"Using OPENIDM_HOME:   \path\to\openidm"
"Using OPENIDM_OPTS:   -Xmx1024m"
"Using LOGGING_CONFIG:
-Djava.util.logging.config.file=\path\to\openidm\conf\logging.properties"
Using boot properties at \path\to\openidm\conf\boot\boot.properties
-&gt; scr list
Id   State          Name
[ 19] [active      ] org.forgerock.openidm.config.starter
[ 23] [active      ] org.forgerock.openidm.taskscanner
[  8] [active      ] org.forgerock.openidm.external.rest
[ 12] [active      ] org.forgerock.openidm.provisioner.openicf.connectorinfoprovider
[ 15] [active      ] org.forgerock.openidm.ui.simple
[  1] [active      ] org.forgerock.openidm.router
[ 22] [active      ] org.forgerock.openidm.scheduler
[ 14] [active      ] org.forgerock.openidm.restlet
[  7] [unsatisfied ] org.forgerock.openidm.external.email
[ 18] [unsatisfied ] org.forgerock.openidm.repo.orientdb
[  6] [active      ] org.forgerock.openidm.sync
[  3] [active      ] org.forgerock.openidm.script
[  5] [active      ] org.forgerock.openidm.recon
[  2] [active      ] org.forgerock.openidm.scope
[ 10] [active      ] org.forgerock.openidm.http.contextregistrator
[ 20] [active      ] org.forgerock.openidm.config
[  0] [active      ] org.forgerock.openidm.audit
[ 21] [active      ] org.forgerock.openidm.schedule
[ 17] [active      ] org.forgerock.openidm.repo.jdbc
[ 16] [active      ] org.forgerock.openidm.workflow
[ 13] [active      ] org.forgerock.openidm.provisioner.openicf
[  4] [active      ] org.forgerock.openidm.managed
[  9] [active      ] org.forgerock.openidm.authentication
[ 11] [active      ] org.forgerock.openidm.provisioner
   </computeroutput>
  </screen>
 </section>

 <section xml:id="repository-oracledb">
 <title>To Set Up OpenIDM With Oracle Database</title>

 <procedure>

  <para>This procedure assumes that Oracle Database has been installed and
  configured on the local host.</para>

  <para>OpenIDM listens on port 8080 by default. To avoid a port conflict,
  make sure that Oracle Database is configured to use a different port, or
  edit the <filename>/path/to/openidm/conf/boot/boot.properties</filename>
  file to change the port on which OpenIDM listens.</para>

  <step>
      <para>Connect to the Oracle Database with any database connection utility.
      For more information, see <link xlink:show="new"
      xlink:href="http://docs.oracle.com/cd/B25329_01/doc/admin.102/b25107/connecting.htm"
      >Connecting to the Database</link>.</para>
      <para>This example uses SQL Command Line (SQL*Plus) to connect as the
      <literal>SYSTEM</literal> user.</para>
      <screen>$ sqlplus /nolog
SQL&gt; connect SYSTEM/password
Connected.
      </screen>
  </step>
  <step>
      <para>Create a user that will have permission to connect to the
      OpenIDM database tables.</para>
      <para>The following example creates a user <literal>openidm</literal>
      with password <literal>password</literal>.</para>
      <screen>SQL&gt; CREATE USER openidm IDENTIFIED BY password;
User created.</screen>
  </step>
  <step>
      <para>Grant the new user at least the <literal>CREATE SESSION</literal>
      and <literal>RESOURCE</literal> privileges, to allow that user to connect
      to the database and create the required tables.</para>
      <screen>SQL&gt; GRANT CREATE SESSION TO openidm;
Grant succeeded.
SQL&gt; GRANT RESOURCE TO openidm;
Grant succeeded.</screen>
  </step>
  <step>
      <para>Connect to the database as the <literal>openidm</literal> user.</para>
      <screen>SQL&gt; connect openidm/password;
Connected.
      </screen>
  </step>
  <step>
      <para>Import the OpenIDM data definition language script for OpenIDM
      into Oracle Database.</para>
      <screen>SQL&gt; @/root/openidm/db/scripts/oracle/openidm.sql
Creating Sequence genericobjects_id_SEQ ...

Sequence created.
...</screen>
      <para>This step creates all of the required database tables for use as
      the internal repository.</para>
  </step>
  <step>
      <para>Check that the tables have been created correctly by querying the
      <literal>internaluser</literal> table. The query should return two
      records (<literal>openidm-admin</literal> and <literal>anonymous</literal>).
      The output here has been formatted for legibility.</para>
      <screen>SQL&gt; select * from internaluser;

OBJECTID     openidm-admin
-----------------------------------------------------------------------------
REV          0
-----------------------------------------------------------------------------
PWD          openidm-admin
-----------------------------------------------------------------------------
ROLES        openidm-admin,openidm-authorized
-----------------------------------------------------------------------------

OBJECTID     anonymous
-----------------------------------------------------------------------------
REV          0
-----------------------------------------------------------------------------
PWD          anonymous
-----------------------------------------------------------------------------
ROLES        openidm-reg
-----------------------------------------------------------------------------</screen>
  </step>
  <step>
      <para>Make sure that OpenIDM is stopped.</para>
      <screen>$ cd /path/to/openidm/
$ ./shutdown.sh
OpenIDM is not running, not stopping.</screen>
  </step>
  <step>
    <para>OpenIDM requires an Oracle DB driver that must be created from two
    separate jar files. Create the driver as follows.</para>
    <substeps>
       <step>
           <para>Download the Oracle JDBC driver for your Oracle DB version
           from <link
           xlink:show="new" xlink:href="http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html"
           >Oracle Technetwork</link> and place it in the <filename>openidm/db/scripts/oracle</filename>
           directory.</para>
           <screen>$ ls /path/to/openidm/db/scripts/oracle
ojdbc6_g.jar
</screen>
       </step>
       <step>
           <para>Create a bind file and edit it to match the version information
           for your JDBC driver.</para>
           <para>You can use the sample bind file located in
           <filename>openidm/db/scripts/mssql/</filename>. Copy the bind file
           to the same location as the JDBC driver.</para>
           <screen>$ cd /path/to/openidm/db/scripts
$ cp mssql/sqljdbc4.bnd oracle/
$ ls oracle/
ojdbc6_g.jar  sqljdbc4.bnd</screen>
           <para>The JDBC driver version information for your driver is located
           in the <literal>Specification-Version</literal> property in the
           MANIFEST file of the driver.</para>
           <screen>$ cd /path/to/openidm/db/scripts/oracle
$ unzip -q -c ojdbc6_g.jar META-INF/MANIFEST.MF
...
Specification-Vendor: Sun Microsystems Inc.
Specification-Title: JDBC
Specification-Version: 4.0
...</screen>
           <para>Edit the bind file to match the JDBC driver version.</para>
           <screen>$ more sqljdbc4.bnd
...
version=4.0
Export-Package: *;version=${version}
Bundle-Name: Oracle JDBC Driver 4.0 for SQL Server
Bundle-SymbolicName: Oracle JDBC Driver 4.0 for SQL Server
Bundle-Version: ${version}</screen>
       </step>
       <step>
           <para>Download the <literal>bnd</literal> Java archive file
           (<filename>biz.aQute.bnd.jar</filename>) that enables you to create
           OSGi bundles. The file can be downloaded from
           <link xlink:show="new" xlink:href="http://dl.dropbox.com/u/2590603/bnd/biz.aQute.bnd.jar" />.
           For more information about <literal>bnd</literal>, see
           <link xlink:show="new" xlink:href="http://www.aqute.biz/Bnd/Bnd" />.</para>
           <para>Place the <literal>bnd</literal> Java archive file in the same
           directory as the JDBC driver, and the bind file.</para>
           <screen>$ ls /path/to/openidm/db/scripts/oracle/
biz.aQute.bnd.jar  ojdbc6_g.jar  sqljdbc4.bnd</screen>
       </step>
       <step>
           <para>Change to the directory in which the three files are located and
           run the following command to create the OSGi bundle.</para>
           <screen>$ cd /path/to/openidm/db/scripts/oracle/
$ java -jar biz.aQute.bnd.jar wrap -properties sqljdbc4.bnd ojdbc6_g.jar
Dec 10, 2013 9:53:28 AM java.util.prefs.FileSystemPreferences$1 run
INFO: Created user preferences directory.
ojdbc6_g 984 0</screen>
           <para>A new <literal>.bar</literal> file has now been created.</para>
           <screen>$ ls
biz.aQute.bnd.jar  ojdbc6_g.bar  ojdbc6_g.jar  sqljdbc4.bnd</screen>
       </step>
       <step>
           <para>Move the <literal>.bar</literal> file to the
           <literal>openidm/bundle</literal> directory and rename it with a
           <literal>.jar</literal> extension. The actual name of the file is
           unimportant.</para>
           <screen>$ mv ojdbc6_g.bar /path/to/openidm/bundle/ojdbc6_g-osgi.jar</screen>
       </step>
   </substeps>
  </step>
  <step>
   <para>Remove the default OrientDB configuration file
   (<filename>openidm/conf/repo.orientdb.json</filename>) from the
   configuration directory.</para>
   <screen>$ rm /path/to/openidm/conf/repo.orientdb.json</screen>
  </step>
  <step>
   <para>Copy the OracleDB configuration file
   (<filename>openidm/samples/misc/repo.jdbc-oracle.json</filename>) to the
   configuration directory and rename the file <filename>repo.jdbc.json</filename>.</para>
   <screen>$ cd /path/to/openidm/conf
$ cp ../samples/misc/repo.jdbc-oracle.json repo.jdbc.json</screen>
  </step>
  <step>
   <para>Update <filename>openidm/conf/repo.jdbc.json</filename> as necessary,
   to reflect your OracleDB deployment. Specifically, edit the <literal>jdbcUrl</literal>,
   <literal>username</literal>, and <literal>password</literal> properties. For
   example:</para>
   <programlisting language="javascript">{
    "connection" : {
        "dbType" : "ORACLE",
        "jndiName" : "",
        "driverClass" : "oracle.jdbc.OracleDriver",
        "jdbcUrl" : "jdbc:oracle:thin:@//localhost:1521/XE",
        "username" : "openidm",
        "password" : "password",
        "maxBatchSize" : 100,
        "maxTxRetry" : 5,
        "connectionTimeoutInMs" : 30000
    },</programlisting>
  </step>
 </procedure>

    <para>When you have set up OracleDB for use as the OpenIDM internal
    repository, start OpenIDM to check that the setup has been successful. On
    startup, a number of INFO messages are output, as the predefined queries
    are processed.</para>
    <para>After startup, you should see that <literal>repo.jdbc</literal> is
    <literal>active</literal>, whereas <literal>repo.orientdb</literal> is
    <literal>unsatisfied</literal>.
    </para>

    <screen>$ cd /path/to/openidm
$ ./startup.sh
Using OPENIDM_HOME:   /path/to/openidm
Using OPENIDM_OPTS:   -Xmx1024m
Using LOGGING_CONFIG:
-Djava.util.logging.config.file=/path/to/openidm/conf/logging.properties
Using boot properties at /path/to/openidm/conf/boot/boot.properties
....
-&gt; scr list
   Id   State          Name
...
[   2] [unsatisfied  ] org.forgerock.openidm.repo.orientdb
...
[   3] [active       ] org.forgerock.openidm.repo.jdbc
...</screen>
  </section>

 <!-- TODO Include this section when we support PostGreSQL - This information is
 currently provided in the wiki
 <section xml:id="repository-postgresql">
  <title>To Set Up OpenIDM With PostGreSQL</title>
  <para>
   Note that PostGreSQL has been minimally tested but is not yet supported in
   production environments.
  </para>
  <para>
   This procedure assumes that PostgreSQL (version 9.3 or later) is installed
   and running on the local host.
  </para>
  <para>
   <emphasis>Before starting OpenIDM for the first time</emphasis>, set up
   OpenIDM to use a PostGreSQL repository, as described in the following
   procedure.
  </para>
  <procedure>
   <step>
    <para>
     OpenIDM includes a script
     (<filename>path/to/openidm/db/scripts/postgresql/createuser.pgsql</filename>)
     that sets up an <literal>openidm</literal> database and user, and grants
     the appropriate permissions.
    </para>
    <para>
     Edit this script to set a password for the <literal>openidm</literal> user
     that will be created. The default password is <literal>openidm</literal>.
    </para>
    <screen>
     <userinput>
$ more /path/to/openidm/db/scripts/postgresql/createuser.pgsql
     </userinput>
     <computeroutput>

create user openidm with password 'mypassword';

create database openidm encoding 'utf8' owner openidm;

grant all privileges on database openidm to openidm;
     </computeroutput>
    </screen>
   </step>
   <step>
    <para>
     Execute the <literal>createuser.pgsql</literal> script as follows:
    </para>
    <screen>
     <userinput>
$ psql &lt; /path/to/openidm/db/scripts/postgresql/createuser.pgsql
     </userinput>
     <computeroutput>
CREATE ROLE
CREATE DATABASE
GRANT
     </computeroutput>
    </screen>
   </step>
   <step>
    <para>
     Execute the <literal>openidm.pgsql</literal> script as the new
     <literal>openidm</literal> user that you created in the first step.
    </para>
    <screen>
     <userinput>
$ psql -U openidm &lt; /path/to/openidm/db/scripts/postgresql/openidm.pgsql
     </userinput>
     <computeroutput>
CREATE SCHEMA
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE INDEX
CREATE INDEX
...
START TRANSACTION
INSERT 0 1
INSERT 0 1
COMMIT
CREATE INDEX
CREATE INDEX
     </computeroutput>
    </screen>
    <para>
     Your database has now been initialized.
    </para>
   </step>
   <step>
    <para>
     Remove the OrientDB repository configuration file
     (<filename>conf/repo.orientdb.json</filename>.
    </para>
    <screen>
$ rm /path/to/openidm/conf/repo.orientdb.json
    </screen>
   </step>
   <step>
    <para>
     Copy the PostGreSQL repository configuration file
     (<filename>samples/misc/repo.jdbc-postgres.json</filename>) to the
     configuration directory, and rename it <filename>repo.jdcb.json</filename>.
    </para>
    <screen>
$ cd /path/to/openidm
$ cp samples/misc/repo.jdbc-postgres.json conf/repo.jdbc.json
    </screen>
   </step>
   <step>
    <para>
     If you changed the password in step 1 of this procedure, edit the
     <filename>repo.jdcb.json</filename> file to set the value for the
     <literal>"password"</literal> field to whatever password you set for the
     <literal>openidm</literal> user. For example:
    </para>
    <screen>
     <userinput>
$ more conf/repo.jdbc.json
     </userinput>
     <computeroutput>
{
    "connection" : {
        "dbType" : "POSTGRESQL",
        "jndiName" : "",
        "driverClass" : "org.postgresql.Driver",
        "jdbcUrl" : "jdbc:postgresql://localhost:5432/openidm",
        "username" : "openidm",
        "password" : "mypassword",
     </computeroutput>
    </screen>
   </step>
   <step>
    <para>
     PostgreSQL is now set up for use as the OpenIDM internal repository.
    </para>
    <para>
     Start OpenIDM to check that the setup has been successful. After startup,
     you should see that <literal>repo.jdbc</literal> is
     <literal>active</literal>, whereas <literal>repo.orientdb</literal> is
     <literal>unsatisfied</literal>.
    </para>
   </step>
   <step>
    <para>
     If you are using the default project configuration, run the
     <literal>default_schema_optimization.pgsql</literal> script to create the
     required indexes. The file includes extensive comments on the indexes
     that are being created.
    </para>
    <screen width="102">
$ psql -U postgres openidm &lt; /path/to/openidm/db/scripts/postgresql/default_schema_optimization.pgsql
    </screen>
   </step>
  </procedure>
 </section>  -->

 <section xml:id="jdbc-repo-config">
  <title>Understanding the JDBC Repository Configuration File</title>
  <para>
   OpenIDM provides a specific configuration file for each supported JDBC
   repository, as well as example configurations for other repositories. These
   configuration files are located in
   <filename>/path/to/openidm/samples/misc</filename> and are named
   <filename>repo.jdbc-<replaceable>database</replaceable>.json</filename>. Copy
   the configuration file for your specific database type to
   <filename>/path/to/openidm/conf/repo.jdbc.json</filename>.
  </para>
  <para>
   The repository configuration file includes the connection details for the
   repository, a number of predefined queries, and a mapping between OpenIDM
   resources and the tables in the repository.
  </para>
  <para>
   An excerpt from an example repository configuration follows.
  </para>
  <programlisting language="javascript">
{
    "connection" : {
        "dbType" : "MYSQL",
        "jndiName" : "",
        "driverClass" : "com.mysql.jdbc.Driver",
        "jdbcUrl" : "jdbc:mysql://localhost:3306/openidm?characterEncoding=utf8",
        "username" : "openidm",
        "password" : "openidm",
        "defaultCatalog" : "openidm",
        "maxBatchSize" : 100,
        "maxTxRetry" : 5,
        "enableConnectionPool" : true,
        "connectionTimeoutInMs" : 30000
    },
    "queries" : {...},
    "resourceMapping" : {...}
}
  </programlisting>
  <variablelist>
   <varlistentry>
    <term><literal>"dbType" : string, optional</literal></term>
    <listitem>
     <para>
      The type of database. The database type might affect the queries used and
      other optimizations. Supported database types include
      <literal>MYSQL</literal>, <literal>SQLSERVER</literal>, and
      <literal>ORACLE</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"driverClass"</literal>, <literal>"jndiName"</literal>, or
    <literal>"jtaName"</literal></term>
    <listitem>
     <para>
      Depending on the mechanism you use to acquire the data source, set
      <emphasis>one</emphasis> of these properties.
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <literal>"driverClass" : string</literal>
       </para>
       <para>
        To use the JDBC driver manager to acquire a data source, set this
        property, as well as <literal>"jdbcUrl"</literal>,
        <literal>"username"</literal>, and <literal>"password"</literal>. The
        driver class must be the fully qualified class name of the database
        driver to use for your database.
       </para>
       <para>
        Using the JDBC driver manager to acquire a data source is the most
        likely option, and the only one supported "out of the box". The
        remaining options in the sample repository configuration file assume
        that you are using a JDBC driver manager.
       </para>
       <para>
        Example: <literal>"driverClass" : "com.mysql.jdbc.Driver"</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>"jndiName" : string</literal>
       </para>
       <para>
        If you use JNDI to acquire the data source, set this property to the
        JNDI name of the data source.
       </para>
       <para>
        This option might be relevant if you want to run OpenIDM inside your own
        web container.
       </para>
       <para>
        Example: <literal>"jndiName" : "jdbc/my-datasource"</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>"jtaName" : string</literal>
       </para>
       <para>
        If you use an OSGi service to acquire the data source, set this property
        to a stringified version of the OsgiName.
       </para>
       <para>
        This option would only be relevant in a highly customized deployment,
        for example, if you wanted to develop your own connection pool.
       </para>
       <para>
        Example: <literal>"jtaName" : "osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=jdbc/openidm)"</literal>
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"jdbcUrl"</literal></term>
    <listitem>
     <para>
      The connection URL to the JDBC database. The URL should include all of the
      parameters required by your database. For example, to specify the encoding
      in MySQL use <literal>'characterEncoding=utf8'</literal>.
     </para>
     <para>
      Example: <literal>"jdbcUrl" : "jdbc:mysql://localhost:3306/openidm?characterEncoding=utf8"</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"username"</literal></term>
    <listitem>
     <para>
      The username with which to access the JDBC database.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"password"</literal></term>
    <listitem>
     <para>
      The password with which to access the JDBC database. OpenIDM automatically
      encrypts clear string passwords. To replace an existing encrypted value,
      replace the whole <literal>crypto-object</literal> value, including the
      brackets, with a string of the new password.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"defaultCatalog"</literal></term>
    <listitem>
     <para>
      The database schema to use for OpenIDM. By default, no schema prefix
      is used for queries.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"maxBatchSize"</literal></term>
    <listitem>
     <para>
      The maximum number of SQL statements that will be batched together. This
      parameter allows you to optimize the time taken to execute multiple
      queries. Certain databases do not support batching, or limit how many
      statements can be batched. A value of <literal>1</literal> disables
      batching.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"queries"</literal></term>
    <listitem>
     <para>
      Enables you to create pre-defined queries that can be referenced from the
      configuration. The queries are divided between those for
      <literal>"genericTables"</literal> and those for
      <literal>"explicitTables"</literal>.
     </para>
     <para>
      The following sample extract from the default MySQL configuration file
      shows two credential queries, one for a generic mapping, and one for an
      explicit mapping. Note that the lines have been broken here for legibility
      only. In a real configuration file, the query would be all on one line.
     </para>
     <programlisting language="javascript">
"queries" : {
    "genericTables" : {
        "credential-query" : "SELECT fullobject FROM ${_dbSchema}.${_mainTable}
          obj INNER JOIN ${_dbSchema}.${_propTable} prop ON
          obj.id = prop.${_mainTable}_id INNER JOIN ${_dbSchema}.objecttypes
          objtype ON objtype.id = obj.objecttypes_id WHERE prop.propkey='/userName'
          AND prop.propvalue = ${username} AND objtype.objecttype = ${_resource}",
        ...
    "explicitTables" : {
        "credential-query" : "SELECT * FROM ${_dbSchema}.${_table}
          WHERE objectid = ${username} and accountStatus = 'active'",
        ...
    }
}    </programlisting>
     <itemizedlist>
      <para>
       Options supported for query parameters include the following:
      </para>
      <listitem>
       <para>
        A default string parameter, for example:
       </para>
       <programlisting>
openidm.query("managed/user", { "_queryId": "for-userName", "uid": "jdoe" });
       </programlisting>
      </listitem>
      <listitem>
       <para>
        A list parameter (<literal>${list:propName}</literal>).
       </para>
       <para>
        Use this parameter to specify a set of indeterminate size as part of
        your query. For example:
       </para>
       <programlisting>
WHERE targetObjectId IN (${list:filteredIds})
       </programlisting>
      </listitem>
      <listitem>
       <para>
        An integer parameter (<literal>${int:propName}</literal>).
       </para>
       <para>
        Use this parameter if you need query for non-string values in the
        database. This is particularly useful with explicit tables.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"resourceMapping"</literal></term>
    <listitem>
     <para>
      Defines the mapping between OpenIDM resource URIs (for example,
      <literal>managed/user</literal>) and JDBC tables. The structure of the
      resource mapping is as follows:
     </para>
     <programlisting language="javascript">
"resourceMapping" : {
    "default" : {
        "mainTable" : "genericobjects",
        "propertiesTable" : "genericobjectproperties",
        "searchableDefault" : true
    },
    "genericMapping" : {...},
    "explicitMapping" : {...}
}    </programlisting>
     <para>
      The default mapping object represents a default generic table in which any
      resource that does not have a more specific mapping is stored.
     </para>
     <para>
      The generic and explicit mapping objects are described in the following
      section.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="explicit-generic-mapping">
  <title>Using Explicit or Generic Object Mapping With a JDBC Repository</title>
  <itemizedlist>
   <para>
    For JDBC repositories, there are two ways of mapping OpenIDM objects to the
    database tables.
   </para>
   <listitem>
    <para>
     <emphasis>Generic mapping</emphasis>, which allows arbitrary objects to be
     stored without special configuration or administration.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>Explicit mapping</emphasis>, which allows for optimized storage
     and queries by explicitly mapping objects to tables and columns in the
     database.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   These two mapping strategies are discussed in the following sections.
  </para>

  <section xml:id="generic-mappings">
   <title>Using Generic Mappings</title>
   <para>
    Generic mapping speeds up development, and can make system maintenance
    more flexible by providing a more stable database structure. However,
    generic mapping can have a performance impact and does not take full
    advantage of the database facilities (such as validation within the database
    and flexible indexing). In addition, queries can be more difficult to set up.
   </para>
   <para>
    In a generic table, the entire object content is stored in a single
    large-character field named <literal>"fullobject"</literal> in the
    <literal>"mainTable"</literal> for the object. To search on specific fields,
    you can read them by referring to them in the corresponding
    <literal>properties table</literal> for that object. The disadvantage of
    generic objects is that, because every property you might like to filter by
    is stored in a separate table, you must join to that table each time you need
    to filter by anything.
   </para>
   <para>
    The following diagram shows a pared down database structure for the default
    generic table, and indicates the relationship between the main table and
    the corresponding properties table for each object.
   </para>
   <mediaobject>
    <alt>Generic tables entity relationship diagram</alt>
    <imageobject>
     <imagedata fileref="images/generic-tables-erd.png" format="PNG" />
    </imageobject>
   </mediaobject>
   <para>
    These separate tables can make the query syntax particularly complex. For
    example, a simple query to return user entries based on a user name would
    need to be implemented as follows:
   </para>
   <programlisting width="100">
SELECT fullobject FROM ${_dbSchema}.${_mainTable} obj INNER JOIN ${_dbSchema}.${_propTable} prop
    ON obj.id = prop.${_mainTable}_id INNER JOIN ${_dbSchema}.objecttypes objtype
    ON objtype.id = obj.objecttypes_id WHERE prop.propkey='/userName' AND prop.propvalue = ${uid}
    AND objtype.objecttype = ${_resource}",
   </programlisting>
   <para>
    The query can be broken down as follows:
   </para>
   <itemizedlist>
    <listitem>
     <para>Select the full object from the main table</para>
     <programlisting>
SELECT fullobject FROM ${_dbSchema}.${_mainTable} obj
     </programlisting>
    </listitem>
    <listitem>
     <para>
      Join to the properties table and locate the object with the corresponding ID.
     </para>
     <programlisting>
INNER JOIN ${_dbSchema}.${_propTable} prop  ON obj.id = prop.${_mainTable}_id
     </programlisting>
    </listitem>
    <listitem>
     <para>
      Join to the object types table to restrict returned entries to objects of
      a specific type. For example, you might want to restrict returned entries
      to <literal>managed/user</literal> objects, or <literal>managed/role</literal>
      objects.
     </para>
     <programlisting>
INNER JOIN ${_dbSchema}.objecttypes objtype ON objtype.id = obj.objecttypes_id
     </programlisting>
    </listitem>
    <listitem>
     <para>
      Filter records by the <literal>userName</literal> property, where the
      userName is equal to the specified <literal>uid</literal> and the object
      type is the specified type (in this case, managed/user objects).
     </para>
     <programlisting>
WHERE prop.propkey='/userName'
AND prop.propvalue = ${uid}
AND objtype.objecttype = ${_resource}",
     </programlisting>
     <para>
      The value of the <literal>uid</literal> field is provided as part of the
      query call, for example:
     </para>
     <programlisting>
openidm.query("managed/user", { "_queryId": "for-userName", "uid": "jdoe" });
     </programlisting>
    </listitem>
   </itemizedlist>
   <para>
    Tables for user definable objects use a generic mapping by default.
   </para>
   <para>
    The following sample generic mapping object illustrates how
    <literal>managed/</literal> objects are stored in a generic table.
   </para>
   <programlisting language="javascript">
  "genericMapping" : {
      "managed/*" : {
          "mainTable" : "managedobjects",
          "propertiesTable" : "managedobjectproperties",
          "searchableDefault" : true,
          "properties" : {
              "/picture" : {
                  "searchable" : false
              }
          }
      }
  },
   </programlisting>
   <variablelist>
    <varlistentry>
     <term><literal>"mainTable"</literal> (string, mandatory)</term>
     <listitem>
      <para>
       Indicates the main table in which data is stored for this resource.
      </para>
      <para>
       The complete object is stored in the <literal>fullobject</literal> column
       of this table. The table includes an <literal>entityType</literal>
       foreign key, that is used to distinguish the different objects stored
       within the table. In addition, the revision of each stored object is
       tracked, in the <literal>rev</literal> column of the table, enabling
       multi version concurrency control (MVCC). For more information, see
       <link xlink:show="new"
       xlink:href="integrators-guide#managed-objects-programmatic"
       xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Manipulating
       Managed Objects Programmatically</citetitle></link> in the
       <citetitle>Integrator's Guide</citetitle>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>"propertiesTable"</literal> (string, mandatory)</term>
     <listitem>
      <para>
       Indicates the properties table, used for searches.
      </para>
      <para>
       The contents of the properties table is a defined subset of the
       properties, copied from the character large object (CLOB) that is stored
       in the <literal>fullobject</literal> column of the main table. The
       properties are stored in a one-to-many style separate table. The set of
       properties stored here is determined by the properties that are defined
       as <literal>"searchable"</literal>.
      </para>
      <para>
       The stored set of searchable properties makes these values available as
       discrete rows that can be accessed with SQL queries, specifically, with
       <literal>WHERE</literal> clauses. It is not otherwise possible to query
       specific properties of the full object.
      </para>
      <itemizedlist>
       <para>
        The properties table includes the following columns:
       </para>
       <listitem>
        <para>
         <literal>${_mainTable}_id</literal> corresponds to the
         <literal>id</literal> of the full object in the main table,
         for example, <literal>manageobjects_id</literal>, or
         <literal>genericobjects_id</literal>.
        </para>
       </listitem>
       <listitem>
         <para>
          <literal>propkey</literal> is the name of the searchable property,
          stored in JSON pointer format (for example <literal>/mail</literal>.
          For more information about JSON pointer syntax, see
          <link xlink:show="new"
          xlink:href="http://tools.ietf.org/html/rfc6901">RFC 6901</link>.
         </para>
       </listitem>
       <listitem>
        <para>
         <literal>proptype</literal> is the data type of the property, for
         example <literal>java.lang.String</literal>. The property type is
         obtained from the Class associated with the value.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>propvalue</literal> is the value of property, extracted from
         the full object that is stored in the main table.
        </para>
        <para>
         Regardless of the property data type, this value is stored as a string,
         so queries against it should treat it as such.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>"searchableDefault"</literal> (boolean, optional)</term>
     <listitem>
      <para>
       Specifies whether all properties of the resource should be searchable by
       default. Properties that are searchable are stored and indexed. You can
       override the default for individual properties in the
       <literal>"properties"</literal> element of the mapping. The preceding
       example indicates that all properties are searchable, with the exception
       of the <literal>"picture"</literal> property.
      </para>
      <para>
       For large, complex objects, having all properties searchable implies a
       substantial performance impact. In such a case, a separate insert
       statement is made in the properties table for each element in the object,
       every time the object is updated. Also, because these are indexed fields,
       the recreation of these properties incurs a cost in the maintenance of
       the index. You should therefore enable <literal>"searchable"</literal>
       only for those properties that must be used as part of a WHERE clause in
       a query.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>"properties"</literal></term>
     <listitem>
      <para>
       Lists any individual properties for which the searchable default should
       be overridden.
      </para>
      <para>
       Note that if an object was originally created with a subset of
       <literal>"searchable"</literal> properties, changing this subset (by
       adding a new <literal>"searchable"</literal> property in the
       configuration, for example) will not cause the existing values to be
       updated in the properties table for that object. To add the new property
       to the properties table for that object, you must update or recreate the
       object.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>

  <section xml:id="searches-with-generic-mappings">
   <title>Improving Search Performance for Generic Mappings</title>
   <para>
    By default, all properties in a generic mapping are searchable.
    Although there are no individual indexes in a generic mapping, you can
    improve search performance by setting only those properties that you need to
    search as <literal>"searchable"</literal>. Properties that are searchable
    are created within the corresponding properties table. The properties table
    exists only for searches or look-ups, and has a composite index, based on
    the resource, then the property name.
   </para>
   <para>
    To restrict searches to specific properties, set the
    <literal>"searchableDefault"</literal> to false for the mapping, and then
    explicitly set <literal>"searchable"</literal> to true for each property
    that should be searched. The following sample extract from
    <filename>repo.jdbc.json</filename> indicates searches restricted to the
    <literal>"userName"</literal> property.
   </para>
   <programlisting language="javascript">
"genericMapping" : {
    "managed/user" : {
        "mainTable" : "manageduserobjects",
        "propertiesTable" : "manageduserobjectproperties",
        "searchableDefault" : false,
        "properties" : {
            "/userName" : {
            "searchable" : true
            }
        }
    }
},
   </programlisting>
   <para>
    With this configuration, OpenIDM creates entries in the properties table
    only for <literal>"userName"</literal> properties of managed user objects.
   </para>
   <para>
    If the global <literal>"searchableDefault"</literal> is set to false,
    properties that do not have a searchable attribute explicitly set to true
    are not written in the properties table.
   </para>
  </section>
  <section xml:id="explicit-mappings">
   <title>Using Explicit Mappings</title>
   <para>
    Explicit mapping is more difficult to set up and maintain, but can take
    complete advantage of the native database facilities.
   </para>
   <para>
    An explicit table offers better performance and simpler queries. There is
    less work in the reading and writing of data, since the data is all in a
    single row of a single table. In addition, it is easier to create different
    types of indexes that apply to only specific fields in an explicit table.
    The disadvantage of explicit tables is the additional work required in
    creating the table in the schema. Also, because rows in a table are
    inherently more simple, it is more difficult to deal with complex objects.
    Any non-simple key:value pair in an object associated with an explicit table
    is converted to a JSON string and stored in the cell in that format. This
    makes the value difficult to use, from the perspective of a query attempting
    to search within it.
   </para>
   <para>
    Note that it is possible to have a generic mapping configuration for most
    managed objects, <emphasis>and</emphasis> to have an explicit mapping that
    overrides the default generic mapping in certain cases. The sample
    configuration provided in
    <filename>/path/to/openidm/samples/misc/repo.jdbc-mysql-explicit-managed-user.json</filename>
    has a generic mapping for managed objects, but an explicit mapping for
    managed user objects.
   </para>
   <para>
    OpenIDM uses explicit mapping for internal system tables, such as the tables
    used for auditing.
   </para>
   <para>
    Depending on the types of usage your system is supporting, you might find
    that an explicit mapping performs better than a generic mapping. Operations
    such as sorting and searching (such as those performed in the default UI)
    tend to be faster with explicitly-mapped objects, for example.
   </para>
   <para>
    The following sample explicit mapping object illustrates how
    <literal>internal/user</literal> objects are stored in an explicit table.
   </para>
   <programlisting language="javascript">
"explicitMapping" : {
    "internal/user" : {
        "table" : "internaluser",
        "objectToColumn" : {
            "_id" : "objectid",
            "_rev" : "rev",
            "password" : "pwd",
            "roles" : "roles"
        }
    },
    ...
}
   </programlisting>
   <variablelist>
    <varlistentry>
     <term><literal>"&lt;resource-uri&gt;"</literal> (string, mandatory)</term>
     <listitem>
      <para>
       Indicates the URI for the resources to which this mapping applies, for
       example, <literal>"internal/user"</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>"table"</literal> (string, mandatory)</term>
     <listitem>
      <para>
       The name of the database table in which the object (in this case internal
       users) is stored.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>"objectToColumn"</literal> (string, mandatory)</term>
     <listitem>
      <para>
       The way in which specific managed object properties are mapped to columns
       in the table.
      </para>
      <para>
       The mapping can be a simple one to one mapping, for example
       <literal>"userName": "userName",</literal> or a more complex JSON map or
       list. When a column is mapped to a JSON map or list, the syntax is as
       shown in the following examples:
      </para>
      <programlisting>
"messageDetail" : { "column" : "messagedetail", "type" : "JSON_MAP" }
      </programlisting>
      <para>
       or
      </para>
      <programlisting>
"roles": { "column" : "roles", "type" : "JSON_LIST" }
      </programlisting>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>

 </section>

</chapter>
