<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2015 ForgeRock AS
  !    
-->
<chapter xml:id='chap-sample'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>

<title>First OpenIDM Sample</title>
 <indexterm>
  <primary>Getting started</primary>
 </indexterm>
 <indexterm>
  <primary>Samples</primary>
  <secondary>Sample 1 - XML file</secondary>
 </indexterm>
 <indexterm>
  <primary>Repository database</primary>
  <secondary>Evaluation version</secondary>
 </indexterm>

 <para>This chapter provides an overview of the first sample and how it is
 configured. To see a listing and an overview of the rest of the samples
 provided, see the README found in <filename>openidm/samples</filename> and in
 the chapter <link xlink:href="install-guide#chap-samples"
 xlink:role="http://docbook.org/xlink/role/olink"><citetitle>More OpenIDM
 Samples</citetitle></link>.</para>

 <section xml:id="before-you-begin-sample">
  <title>Before You Begin</title>
  <para>Install OpenIDM as described in the chapter on <link
  xlink:href="install-guide#chap-install"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Installing
  OpenIDM Services</citetitle></link>.</para>

  <para>OpenIDM comes with an internal noSQL database, OrientDB, for use as
  the internal repository out of the box. This makes it easy to get started
  with OpenIDM. OrientDB is not yet supported for production use, however,
  so use a supported JDBC database when moving to production.</para>

  <para>If you want to query the internal noSQL database, you can download 
  OrientDB (version <?eval ${orientdbVersion}?>) from <link 
  xlink:href="http://www.orientechnologies.com/download/" />.
  You will find the shell console in the <filename>bin</filename> directory. 
  Start OrientDB console using either <command>console.sh</command> or 
  <command>console.bat</command>, and then connect to the running OpenIDM with 
  the <command>connect</command> command.</para>

  <screen>$ cd /path/to/orientdb-community-<?eval ${orientdbVersion}?>/bin
$ ./console.sh
OrientDB console v.<?eval ${orientdbVersion}?> (build @BUILD@) www.orientechnologies.com
Type 'help' to display all the commands supported.

Installing extensions for GREMLIN language v.2.5.0-SNAPSHOT

orientdb&gt; connect remote:localhost/openidm admin admin
Connecting to database [remote:localhost/openidm] with user 'admin'...OK

orientdb&gt; </screen>

  <variablelist>
   <para>When you have connected to the database, you might find the following
   commands useful.</para>
   <varlistentry>
    <term><command>info</command></term>
    <listitem><para>Shows classes and records</para></listitem>
   </varlistentry>
   <varlistentry>
    <term><command>select * from managed_user</command></term>
    <listitem><para>Shows all users in the OpenIDM repository</para></listitem>
   </varlistentry>
   <varlistentry>
    <term><command>select * from audit_activity</command></term>
    <listitem><para>Shows all activity audit records</para>
     <para>This table is created when there is some activity.</para></listitem>
   </varlistentry>
   <varlistentry>
    <term><command>select * from audit_recon</command></term>
    <listitem><para>Shows all reconciliation audit records</para>
    <para>This table is created when you run reconciliation.</para></listitem>
   </varlistentry>
  </variablelist>
  
  <para>
   You can also use OrientDB Studio to query the default OrientDB repository.
   After you have installed and started OpenIDM, point your browser to
   <link xlink:href="http://localhost:2480/" />. The default database is
   <literal>openidm</literal> and the default user and password are
   <literal>admin</literal> and <literal>admin</literal>. Click Connect to
   connect to the repository.
  </para>
  <para>
   To change the default password, use the following POST request on the
   <literal>repo</literal> endpoint:
  </para>
  <screen><userinput>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request POST \
 "https://localhost:8443/openidm/repo?_action=updateDbCredentials&amp;user=admin&amp;password=newPassword"
   </userinput></screen>
  <para>
   You must restart OpenIDM for the change to take effect.
  </para>
  <para>
   This command updates both the repository and the repository configuration file.
  </para>
 </section>

 <section xml:id="about-the-sample">
  <title>About the Sample</title>

  <para>OpenIDM connects data objects held in external resources
  by mapping one object to another. To connect to external resources,
  OpenIDM uses <link xlink:href="http://openicf.forgerock.org">OpenICF</link>
  connectors, configured for use with the external resources.</para>

  <para>
   When objects in one external resource change, OpenIDM determines how the
   changes affect other objects, and can make the changes as necessary. This
   sample demonstrates how OpenIDM does this by using
   <firstterm>reconciliation</firstterm>. OpenIDM reconciliation compares the
   objects in one object set to mapped objects in another object set.
   For a complete explanation of reconciliation and synchronization, see the
   section on <link xlink:href="integrators-guide#sync-types"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Types of
   Synchronization</citetitle></link> in the <citetitle>Integrator's
   Guide</citetitle>.
  </para>

  <para>
   This sample connects to an XML file that holds sample user data. The
   XML file is configured as the authoritative source. In this sample, users are
   created in the local repository to show you how you can manage local users
   through the REST APIs as well as through the OpenIDM UI.
  </para>

  <para>
   You can also use OpenIDM without storing managed
   objects for users in the local repository, instead reconciling and
   synchronizing objects directly through connectors to external
   resources.
  </para>

  <para>Furthermore, this sample involves only one external resource. In
  practice, you can connect as many resources as needed for your
  deployment.</para>

  <variablelist xml:id="about-the-sample-configuration">
   <title>Sample Configuration Files</title>
   <para>You can find configuration files for the sample under the
   <filename>openidm/samples/sample1/conf</filename> directory. As you review
   the sample, keep the following in mind.</para>
   <orderedlist>
    <listitem>
      <para>
       Start OpenIDM with the configuration associated with Sample 1.
      </para>
      <screen>$ ./startup.sh -p samples/sample1</screen>
      <para>
       For more information, see <xref linkend="install-sample1" />.</para>
    </listitem>
    <listitem>
     <para>OpenIDM regularly scans for any scheduler configuration files in the
     <filename>conf</filename> directory.</para>
    </listitem>
    <listitem>
    <para>OpenIDM's reconciliation service reads the mappings and actions for
    the source and target users from
    <filename>conf/sync.json</filename>.</para>
    </listitem>
    <listitem>
    <para>When you initiate a reconciliation, OpenIDM queries all users in the
     source, and then creates, deletes, or modifies users in the local OpenIDM
     repository as mapped in <filename>conf/sync.json</filename>.
    </para>
    </listitem>
    <listitem>
    <para>OpenIDM writes all operations to the audit logs in both the internal
    database and also the flat files in the <filename>openidm/audit</filename>
    directory.</para>
    </listitem>
    <listitem>
     <para>
      The default Sample 1 version of the
      <filename>conf/authentication.json</filename> file includes three
      authentication modules: <literal>MANAGED_USER</literal>,
      <literal>INTERNAL_USER</literal>, and <literal>CLIENT_CERT</literal>. For
      more information, see the Integrator's Guide section on
      <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
      xlink:href="integrators-guide#passthrough-auth">
      <citetitle>Using Delegated Authentication</citetitle></link>.
     </para>
    </listitem>
   </orderedlist>

   <para>
    When you start OpenIDM with the <literal>-p</literal> project variable
    (<command>./startup.sh -p samples/sample1</command>), the
    <literal>&amp;{launcher.project.location}</literal> is set to a value of
    <literal>samples/sample1</literal>. The configuration files use this,
    as shown in the following sections.
   </para>

   <para>
    The following configuration files play important roles in this sample.
   </para>

   <varlistentry>
    <term><filename>samples/sample1/conf/provisioner.openicf-xml.json</filename></term>
    <listitem>
     <para>This connector configuration file serves as the XML file resource.
      It is a copy of the file of the same name found in the
      <filename>samples/provisioners</filename> directory.
     </para>
     <para>
      In this sample, the connector instance acts as the authoritative source
      for users. In the configuration file you can see that the
      <literal>xmlFilePath</literal> is set to
      <filename>&amp;{launcher.project.location}/data/xmlConnectorData.xml</filename>.
     </para>
     <para>
      The <literal>&amp;{launcher.project.location}</literal>, in this case, is
      <filename>sample/sample1</filename>.</para>
     <para>For details on the OpenICF connector configuration files see
     <link xlink:href="integrators-guide#chap-resource-conf"
     xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Connecting to External Resources</citetitle></link> in
     the <citetitle>Integrator's Guide</citetitle>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>samples/sample1/conf/schedule-reconcile_systemXmlAccounts_managedUser.json</filename></term>
    <listitem>
     <para>The sample schedule configuration file defines a reconciliation
     job that, if enabled by setting <literal>"enabled" : true</literal>,
     starts a reconciliation each minute for the mapping named
     <literal>systemXmlAccounts_managedUser</literal>. The mapping is defined
     in the configuration file, <filename>conf/sync.json</filename>.</para>
     <programlisting language="javascript">{
    "enabled" : false,
    "type": "cron",
    "schedule": "30 0/1 * * * ?",
    "persisted" : true,
    "misfirePolicy" : "fireAndProceed",
    "invokeService": "sync",
    "invokeContext": {
        "action": "reconcile",
        "mapping": "systemXmlfileAccounts_managedUser"
    }
}</programlisting>

     <para>For information about the schedule configuration see <link
     xlink:href="integrators-guide#chap-scheduler-conf"
     xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Scheduling Tasks and Events</citetitle></link> in the
     <citetitle>Integrator's Guide</citetitle>.</para>

     <para>
      Apart from the scheduled reconciliation run, you can also start
     the reconciliation run through the REST interface. The call to the REST 
     interface is an HTTP POST such as the following.
     </para>
     <screen>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request POST \
 "https://localhost:8443/openidm/recon?_action=recon&amp;mapping=systemXmlfileAccounts_managedUser&amp;waitForCompletion=true"</screen>
     <para>
      The <literal>waitForCompletion=true</literal> parameter specifies that the
      operation should return only when it has completed.
     </para>

     <note>
      <para>
       If you want to set up a self-signed certificate, refer to the following
       section of the Integrator's Guide:<link xlink:show="new"
      xlink:href="integrators-guide#rest-over-https"
      xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Restrict REST
       Access to the HTTPS Port</citetitle></link>.
      </para>
      <para>
       Alternatively, just substitute a <command>-k</command> or
       <command>--insecure</command> for
       <command>--cacert self-signed.crt</command> in the REST calls (the
       <command>curl</command> commands) described in the OpenIDM documentation.
      </para>
     </note>
     
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>samples/sample1/conf/sync.json</filename></term>
    <listitem>
     <para>This sample configuration file defines the configuration for
     reconciliation and synchronization. The
     <literal>systemXmlAccounts_managedUser</literal> is the mapping for the 
     reconciliation. This entry in <filename>conf/sync.json</filename> defines 
     the synchronization mappings between the XML file connector (source) and 
     the local repository (target).</para>
     <programlisting language="javascript">
{
    "mappings": [
        {
            "name": "systemXmlfileAccounts_managedUser",
            "source": "system/xmlfile/account",
            "target": "managed/user",
            "correlationQuery": {
                "type": "text/javascript",
                "source": "var query = {'_queryId' : 'for-userName',
                    'uid' :  source.name};query;"
            },
            "properties": [
                {
                    "source": "email",
                    "target": "mail"
                },
                {
                    "source": "firstname",
                    "target": "givenName"
                },
                {
                    "source": "lastname",
                    "target": "sn"
                },
                }
                    "source": "description",
                    "target": "description"
                },
                {
                    "source": "_id",
                    "target": "_id"
                },
                {
                    "source": "name",
                    "target": "userName"
                },
                {
                    "source": "password",
                    "target": "password"
                },
                {
                    "source" : "mobileTelephoneNumber",
                    "target" : "telephoneNumber"
                },
                {
                    "source" : "roles",
                    "transform" : {
                        "type" : "text/javascript",
                        "source" : "source.split(',')"
                    },
                    "target" : "roles"
                }           
            ],
            "policies": [
                {
                    "situation": "CONFIRMED",
                    "action": "UPDATE"
                },
                {
                    "situation": "FOUND",
                    "action": "IGNORE"
                },
                {
                    "situation": "ABSENT",
                    "action": "CREATE"
                },
                {
                    "situation": "AMBIGUOUS",
                    "action": "IGNORE"
                },
                {
                    "situation": "MISSING",
                    "action": "IGNORE"
                },
                {
                    "situation": "SOURCE_MISSING",
                    "action": "IGNORE"
                },
                {
                    "situation": "UNQUALIFIED",
                    "action": "IGNORE"
                },
                {
                    "situation": "UNASSIGNED",
                    "action": "IGNORE"
                }
            ]
        }
    ]
}</programlisting>
     <para>Source and target paths that start with <literal>managed</literal>,
     such as <literal>managed/user</literal>, always refer to objects in the
     local OpenIDM repository. Paths that start with <literal>system</literal>, 
     such as <literal>system/xmlfile/account</literal>, refer to connector 
     objects, in this case the XML file connector.</para>

     <para>For more information about synchronization, reconciliation, and
      <filename>sync.json</filename>, see <link
       xlink:href="integrators-guide#chap-synchronization"
       xlink:role="http://docbook.org/xlink/role/olink"
       ><citetitle>Configuring Synchronization</citetitle></link> in the
      <citetitle>Integrator's Guide</citetitle>.</para>
     <para>For additional examples related to scripting, see the <link
     xlink:href="integrators-guide#appendix-scripting"
     xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Scripting Reference</citetitle></link> appendix in the
     <citetitle>Integrator's Guide</citetitle>.</para>
     </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="install-sample1">
  <title>Install the Sample</title>

  <para>
   Now that OpenDJ is configured, prepare OpenIDM as described in
   <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
   xlink:href="install-guide#preparing-openidm" ><citetitle>Preparing
   OpenIDM</citetitle></link> You can then start OpenIDM with the configuration
   for sample 1.
  </para>

  <screen>$ cd /path/to/openidm
$ ./startup.sh -p samples/sample1</screen>
 </section>

 <section xml:id="sample1-adminui">
  <title>Review the Sample in the Administrative User Interface</title>

  <para>
   OpenIDM includes a web-based Administrative User Interface, known as the
   "Admin UI". For details, see
   <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
         xlink:href="integrators-guide#ui-admin"><citetitle>Administering
   OpenIDM from the UI</citetitle></link>.
  </para>

  <para>
   After starting OpenIDM, you can access the Admin UI by navigating to
   <literal>https://localhost:8443/admin</literal>. The first time you log in,
   use the default administrative credentials, (Login: openidm-admin, Password:
   openidm-admin). After logging in, OpenIDM asks you to change the credentials
   for the administrative account, which is a good idea. However, you can bypass
   this request by closing that window.
  </para>

  <para>
   You should now see the Resources screen, with the connectors and managed
   objects associated with that configuration.
  </para>

  <mediaobject>
   <alt>OpenIDM Admin UI with Sample 1</alt>
   <imageobject>
    <imagedata fileref="images/admin-ui-sample1.png" format="PNG" />
   </imageobject>
  </mediaobject>

 </section>

 <section xml:id="sample-running-reconciliation">
  <title>Running Reconciliation</title>
  
  <para>Start OpenIDM with the configuration for sample 1.</para>
  
  <screen>$ cd /path/to/openidm
$ ./startup.sh -p samples/sample1
  </screen>
  
  <para>
   Reconcile the objects in the resources, either by setting
   <literal>"enabled" : true</literal> in the schedule configuration file
   (<filename>conf/schedule-reconcile_systemXmlAccounts_managedUser.json</filename>)
   and then waiting until the scheduled reconciliation happens, or by using the
   REST interface, as shown in the following example.
  </para>

  <screen>$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request POST \
 "https://localhost:8443/openidm/recon?_action=recon&amp;mapping=systemXmlfileAccounts_managedUser&amp;waitForCompletion=true"</screen>
 
 <para>
  Successful reconciliation returns a reconciliation run ID, and the status of
  the reconciliation operation, as follows:
 </para>
 
 <screen>{
  "_id":"2d87c817-3d00-4776-a705-7de2c65937d8",
  "state":"SUCCESS"
}</screen>

  <para>
   Alternatively, you can run the same reconciliation in the Admin UI. To do so,
   select Mappings. For Sample 1, you should see one mapping,
   <literal>systemXmlfileAccounts_managedUser</literal>. Select Edit to access
   configuration options associated with reconciliation. To run the
   reconciliation, click Reconcile Now.
  </para>

  <mediaobject>
   <alt>OpenIDM Admin UI Mappings with Sample 1</alt>
   <imageobject>
    <imagedata fileref="images/admin-ui-mappings-sample1.png" format="PNG" />
   </imageobject>
  </mediaobject>
 </section>

 <section xml:id="sample-viewing-users-logs">
  <title>Viewing Users and Logs</title>

  <para>
   After reconciliation, you can use the Admin UI to display user records in
   both the source and target resources. Navigate to the URL where OpenIDM is
   installed. If it is local, navigate to
   <literal>https://localhost:8443/admin</literal>. Select mappings, select the
   one mapping (<literal>systemXmlfileAccounts_managedUser</literal>), and click
   the Association tab. You should see the result of the reconciliation, from
   source to target, at the bottom of the screen.
  </para>

  <mediaobject>
   <alt>List of users after first reconciliation for Sample 1</alt>
   <imageobject>
    <imagedata fileref="images/users-recon-sample1.png" format="PNG" />
   </imageobject>
  </mediaobject>

  <para>Alternatively, you can use the REST interface to display
  all users in the local repository. Use a REST client to perform an HTTP 
  GET on the following URL: <literal>
  https://localhost:8443/openidm/managed/user?_queryId=query-all-ids</literal>
  with the headers <literal>"X-OpenIDM-Username: openidm-admin"</literal> and 
  <literal>"X-OpenIDM-Password: openidm-admin"</literal>.
  </para>

  <para>OpenIDM returns JSON data. Depending on the browser, you can use a
   REST client to display the JSON or download it as a file. Alternatively,
   you can use the following
   <link xlink:href="http://curl.haxx.se/"><command>curl</command></link>
   command to get the JSON response.
  </para>

  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/managed/user?_queryId=query-all-ids"
   </userinput>
   <computeroutput>{
  "remainingPagedResults": -1,
  "pagedResultsCookie": null,
  "resultCount": 2,
  "result": [
    {
      "_rev": "0",
      "_id": "scarter"
    },
    {
      "_rev": "0",
      "_id": "bjensen"
    }
  ]
}  </computeroutput>
</screen>

  <para>
   You can set up arbitrary queries. For more information on the use of the
   various query expressions in a REST call, see the following
   section on <link xlink:role="http://docbook.org/xlink/role/olink"
   xlink:show="new" xlink:href="http://integrators-guide#queries">
   <citetitle>Defining and Calling Queries</citetitle></link>.
  </para>

  <para>
   If you created user <literal>joe</literal>, as described in the procedure
   entitled <link xlink:href="integrators-guide#first-steps-with-rest"
   xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"><citetitle>To
   Get Started With the OpenIDM REST Interface</citetitle></link>, you should
   see the ID for that user somewhere in this list. If you did not include
   <literal>"_id:joe"</literal> in the command to create user
   <literal>joe</literal>, you would see a system-generated UUID in the list
   instead of the specified ID.
  </para>

  <para>Now try a RESTful GET of user
  <literal>bjensen</literal> by appending the user ID to the managed user URL 
  (<literal>https://localhost:8443/openidm/managed/user/</literal>).</para>

  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/managed/user/bjensen"</userinput>
   <computeroutput>
{
    "mail" : "bjensen@example.com",
    "sn" : "Jensen",
    "passwordAttempts" : "0",
    "lastPasswordAttempt" : "Tue Apr 15 2014 20:58:46 GMT-0800 (GMT-08:00)",
    "address2" : "",
    "givenName" : "Barbara",
    "effectiveRoles" : [ "openidm-authorized" ],
    "country" : "",
    "city" : "",
    "lastPasswordSet" : "",
    "postalCode" : "",
    "_id" : "bjensen",
    "_rev" : "1",
    "description" : "Created By XML1",
    "accountStatus" : "active",
    "telephoneNumber" : "1234567",
    "roles" : [ "openidm-authorized" ],
    "postalAddress" : "",
    "stateProvince" : "",
    "userName" : "bjensen@example.com"
}</computeroutput>
</screen>

  <para>
   The complete user record is returned. If you need this level of information
   for all users, substitute <literal>query-all</literal> for
   <literal>query-all-ids</literal>.
  </para>

  <para>
   So with some of the query expressions described in the <link xlink:show="new"
   xlink:role="http://docbook.org/xlink/role/olink"
   xlink:href="integrators-guide#queries"><citetitle>Defining and Calling
  Queries</citetitle></link>, you can filter the output.
  </para>

  <para>
   As defined in the mapping file <filename>conf/sync.json</filename>, the
   <literal>sn</literal> and <literal>mail</literal> parameters correspond
   to surname (sn) and email address, respectively.
  </para>

  <para>
   For example, the following RESTful GET filters output by surname (sn):
  </para>

  <screen>$ <userinput>curl \
   --cacert self-signed.crt \
   --header "X-OpenIDM-Username: openidm-admin" \
   --header "X-OpenIDM-Password: openidm-admin" \
   --request GET \
   "https://localhost:8443/openidm/managed/user?_queryFilter=sn%20%pr&amp;_fields=sn"
  </userinput>
   <computeroutput>{
 "result" : [ {
    "sn" : "Carter",
 }, {
    "sn" : "Jensen"
 } ]
 "resultCount" : 2,
 "pagedResultsCookie" : null,
 "remainingPagedResults" : -1
}</computeroutput></screen>

  <para>
   Now that you have a listing of desired users, you can add more fields:
  </para>

  <screen>$ <userinput>curl \
   --cacert self-signed.crt \
   --header "X-OpenIDM-Username: openidm-admin" \
   --header "X-OpenIDM-Password: openidm-admin" \
   --request GET \
   "https://localhost:8443/openidm/managed/user?_queryFilter=sn%20%pr&amp;_fields=sn,mail,description"
  </userinput>
   <computeroutput>{
 "result" : [ {
    "sn" : "Carter",
    "mail" : "scarter@example.com",
    "description" : "Created by XML1",
 }, {
    "sn" : "Jensen"
    "mail" : "bjensen@example.com",
    "description" : "Created by XML1",
 } ]
 "resultCount" : 2,
 "pagedResultsCookie" : null,
 "remainingPagedResults" : -1
}</computeroutput></screen>

  <para>This information is also available in the CSV format audit logs located 
  in the <filename>openidm/audit</filename> directory.</para>

  <screen>$ <userinput>ls /path/to/openidm/audit/</userinput>
   <computeroutput>
access.csv activity.csv recon.csv
   </computeroutput></screen>

  <para>
   For more information on what you can find in each of these files, see the
   Integrator's Guide section on
   <link xlink:role="http://docbook.org/xlink/role/olink" xlink:show="new"
         xlink:href="integrators-guide#audit-log-types"><citetitle>Audit Log
   Types</citetitle></link>.
  </para>

  <para>
   You can get a similar level of information for each user. For example, after
   reconciliation, you can return to <xref linkend="sample-viewing-users-logs" />,
   select a user, and review information from the reconciled linked resource.
  </para>

  <mediaobject>
   <alt>User data after a reconciliation</alt>
   <imageobject>
    <imagedata fileref="images/linked-user.png" format="PNG" />
   </imageobject>
  </mediaobject>

 </section>

 <section xml:id="sample-adding-users-resource">
  <title>Adding Users in a Resource</title>

  <para>Add a user to the source connector XML data file to see reconciliation
  in action. During the next reconciliation, OpenIDM finds the new user in the
  source connector, and creates the user in the local repository. To add the
  user, copy the following XML into
  <filename>openidm/samples/sample1/data/xmlConnectorData.xml</filename>.</para>

   <programlisting language="xml">&lt;ri:__ACCOUNT__&gt;
    &lt;icf:__UID__&gt;tmorris&lt;/icf:__UID__&gt;
    &lt;icf:__NAME__&gt;tmorris@example.com&lt;/icf:__NAME__&gt;
    &lt;ri:firstname&gt;Toni&lt;/ri:firstname&gt;
    &lt;ri:lastname&gt;Morris&lt;/ri:lastname&gt;
    &lt;ri:email&gt;tmorris@example.com&lt;/ri:email&gt;
    &lt;ri:mobileTelephoneNumber&gt;1234567&lt;/ri:mobileTelephoneNumber&gt;
    &lt;ri:roles&gt;openidm-authorized&lt;/ri:roles&gt;
    &lt;icf:__DESCRIPTION__&gt;Created By XML1&lt;/icf:__DESCRIPTION__&gt;
 &lt;/ri:__ACCOUNT__&gt;</programlisting>

  <para>Run reconciliation again, as described in the section on <link
  linkend="sample-running-reconciliation"><citetitle>Running
  Reconciliation</citetitle></link>. After reconciliation has run, query the
  local repository to see the new user appear in the list of all users under
  <literal>https://localhost:8443/openidm/managed/user?_queryId=query-all-ids</literal>.</para>

  <screen><userinput>
$ curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/managed/user?_queryId=query-all-ids"</userinput>
<computeroutput>
{
   "result": [ {
      "_id": "bjensen",
      "_rev": "0"
   }, {
      "_id": "scarter",
      "_rev": "0"
   }, {
      "_id": "tmorris",
      "_rev": "0"
   } ],
   "resultCount": 3,
   "pagedResultsCookie": null,
   "remainingPagedResults": -1
}</computeroutput>
</screen>

  <para>
   Also look at the reconciliation audit log,
   <filename>openidm/audit/recon.csv</filename> to see what took place during
   reconciliation. This formatted excerpt from the log covers the two
   reconciliation runs done in this sample.
  </para>

  <programlisting language="csv" width="110"><?dbfo pgwide="1"?>
"_id",  "action",...,"reconId","situation","sourceObjectId",                "targetObjectId","timestamp";
"7e...","CREATE",...,"486...", "ABSENT",   "system/xmlfile/account/bjensen","managed/user/bjensen",...;
"1a...","CREATE",...,"486...", "ABSENT",   "system/xmlfile/account/scarter","managed/user/scarter",...;
"33...","UPDATE",...,"aa9...", "CONFIRMED","system/xmlfile/account/bjensen","managed/user/bjensen",...;
"1d...","UPDATE",...,"aa9...", "CONFIRMED","system/xmlfile/account/scarter","managed/user/scarter",...;
"0e...","CREATE",...,"aa9...", "ABSENT",   "system/xmlfile/account/tmorris","managed/user/tmorris",...;
</programlisting>

  <para>
   The relevant audit log fields in this example are: action, situation,
   <literal>sourceObjectId</literal>, and <literal>targetObjectId</literal>.
   For each object in the source, reconciliation leads to an action on the
   target.
  </para>

  <para>In the first reconciliation run (the abbreviated
  <literal>reconID</literal> is shown as <literal>486...</literal>), the source
  object does not exist in the target, resulting in an ABSENT situation and an
  action to CREATE the object in the target. The object created earlier in the
  target does not exist in the source, and so is IGNORED.</para>

  <para>In the second reconciliation run (the abbreviated
  <literal>reconID</literal> is shown as <literal>aa9...</literal>), after you
  added a user to the source XML, OpenIDM performs an UPDATE on the user objects
  <literal>bjensen</literal> and <literal>scarter</literal> that already exist 
  in the target, in this case changing the internal ID. OpenIDM performs a CREATE 
  on the target for the new user (<literal>tmorris</literal>).</para>

  <para>You configure the action that OpenIDM takes based on an object's
  situation in the configuration file, <filename>conf/sync.json</filename>.
  For the list of all possible situations and actions, see the <link
  xlink:href="integrators-guide#chap-synchronization"
  xlink:role="http://docbook.org/xlink/role/olink"
  ><citetitle>Configuring Synchronization</citetitle></link> chapter in the
  <citetitle>Integrator's Guide</citetitle>.</para>

  <para>For details on auditing, see the <link
  xlink:href="integrators-guide#chap-auditing"
  xlink:role="http://docbook.org/xlink/role/olink"
  ><citetitle>Using Audit Logs</citetitle></link> chapter in the
  <citetitle>Integrator's Guide</citetitle>.</para>
 </section>
 
 <section xml:id="sample-adding-users-rest">
  <title>Adding Users Over REST</title>

  <para>
   You can add users to the local repository over the REST interface. The
   following example adds a user named James Berg.
  </para>

  <para>Create <literal>james</literal> (UNIX).</para>
  <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request POST \
 --data '{
  "_id":"jberg",
  "userName":"jberg",
  "sn":"Berg",
  "givenName":"James",
  "mail":"jberg@example.com",
  "telephoneNumber":"5556787",
  "description":"Created by OpenIDM REST.",
  "password":"MyPassw0rd"
 }' \
 "https://localhost:8443/openidm/managed/user?_action=create"
   </userinput>
   <computeroutput>{
    "mail" : "jberg@example.com",
    "sn" : "Berg",
    "passwordAttempts" : "0",
    "lastPasswordAttempt" : "Tue Apr 15 2014 21:05:12 GMT-0800 (GMT-08:00)",
    "address2" : "",
    "givenName" : "James",
    "effectiveRoles" : [ "openidm-authorized" ],
    "password" : {
      "$crypto" : {
        "type" : "x-simple-encryption",
        "value" : {
          "data" : "QYRcIS9FbksBEwyd4dNEpg==",
          "cipher" : "AES/CBC/PKCS5Padding",
          "iv" : "R5Kjs6jZZtqCockFCS6BfA==",
          "key" : "openidm-sym-default"
        }
      }
    },
    "country" : "",
    "city" : "",
    "_rev" : "1",
    "lastPasswordSet" : "",
    "postalCode" : "",
    "_id" : "jberg",
    "description" : "Created by OpenIDM REST.",
    "accountStatus" : "active",
    "telephoneNumber" : "5556787",
    "roles" : [ "openidm-authorized" ],
    "effectiveAssignments" : { },
    "postalAddress" : "",
    "stateProvince" : "",
    "userName" : "jberg"
}</computeroutput>
   </screen>

  <para>Create <literal>james</literal> (Windows).</para>
  <screen>C:\&gt; <userinput>curl
 --cacert self-signed.crt
 --header "X-OpenIDM-Username: openidm-admin"
 --header "X-OpenIDM-Password: openidm-admin"
 --header "Content-Type: application/json"
 --request POST
 --data "{
 \"_id\":\"jberg\",
 \"userName\":\"jberg\",
 \"sn\":\"Berg\",
 \"givenName\":\"James\",
 \"email\":\"jberg@example.com\",
 \"telephoneNumber\":\"5556787\",
 \"description\":\"Created by OpenIDM REST.\",
 \"password\":\"MyPassw0rd\"
 }"
 "https://localhost:8443/openidm/managed/user?_action=create"</userinput>
</screen>

  <para>The output is essentially identical to that for UNIX.</para>

  <para>OpenIDM creates the new user in the repository. If you configure a
  mapping to apply changes from the local repository to the XML file connector
  as a target, OpenIDM then updates the XML file to add the new user.</para>

  <para>
   You can also add users through the UI, which uses the OpenIDM REST API.
   When you have logged into the UI as the OpenIDM administrator, the process is
   straightforward, as shown in the following figure.
  </para>

  <mediaobject>
   <alt>Examples of adding a new user</alt>
   <imageobject>
    <imagedata fileref="images/sample1-useradd.png" format="PNG" />
   </imageobject>
  </mediaobject>

 </section>
</chapter>
