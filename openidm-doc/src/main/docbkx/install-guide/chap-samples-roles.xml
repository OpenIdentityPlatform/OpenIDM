<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2015 ForgeRock AS
  !
-->
<chapter xml:id='chap-samples-roles'
         xmlns='http://docbook.org/ns/docbook'
         version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
 http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'>

 <title>Additional OpenIDM Samples: Roles</title>

 <para>
  OpenIDM includes two types of roles: default roles and custom managed roles,
  as defined in the
  <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
        xlink:href="install-guide#openidm-glossary"><citetitle>OpenIDM
  Glossary</citetitle></link>.
 </para>

 <para>
  For a discussion of how basic CRUD operations apply to roles, read the
  section on
  <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
        xlink:href="integrators-guide#configuring-custom-roles">
   <citetitle>Configuring Custom Roles</citetitle></link>.
 </para>

 <!-- include when I've included the second sample
 <para>
  OpenIDM includes two samples to help you learn how to work with custom
  managed roles: Roles and Provisioning; and Roles and Multi-account linking.
 </para>                                           -->

 <section xml:id="more-sample-roles-prov">
  <title>Configuring OpenIDM for Roles and Provisioning</title>

  <para>
   With OpenIDM roles, you can provision a set of attributes based on role
   membership.
  </para>

  <para>
   In this sample, you will configure roles named <literal>Employee</literal>
   and <literal>Contractor</literal>. You will then assign a user to each
   of these roles. You can then observe the results on both the internal OpenIDM
   managed user repository and an external OpenDJ system.
  </para>

  <para>
   In this sample, when you assign a user to the Employee role, she becomes a
   member of two groups: Employees and Chat Users. In contrast, when you assign
   a user to the Contractor role, he becomes is a member of only the Contractor
   group.
  </para>

  <section xml:id="external-ldap-config-roles-prov">
   <title>External LDAP Configuration</title>
   <para>
    Configure the LDAP server as for sample 2,
    <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
          xlink:href="install-guide#external-ldap-config-2" ><citetitle>LDAP
    Server Configuration</citetitle></link>. The LDAP user must have write
    access to create users from OpenIDM on the LDAP server. When you configure
    the LDAP server, import the appropriate LDIF file
    (<filename>openidm/samples/roles/provrole/data/Example.ldif).</filename>
   </para>
  </section>

  <section xml:id="install-sample-roles-prov">
   <title>Install the Sample</title>
   <para>
    Prepare OpenIDM as described in
    <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
          xlink:href="install-guide#preparing-openidm"><citetitle>Preparing
    OpenIDM</citetitle></link>, then start OpenIDM with the following
    configuration for the Roles and Provisioning sample.
   </para>

   <screen>$ <userinput>cd /path/to/openidm</userinput></screen>
   <screen>$ <userinput>nohup ./startup.sh -p samples/roles/provrole > logs/console.out 2>&amp;1&amp;</userinput></screen>
  </section>

  <section xml:id="run-sample-roles-prov">
   <title>Run the Sample</title>
   <para>
    The <filename>sync.json</filename> configuration file for this sample
    includes two mappings: <literal>systemLdapAccounts_managedUser</literal>,
    which synchronizes users from the source LDAP server with the target
    OpenIDM repository; and <literal>managedUser_systemLdapAccounts</literal>,
    which synchronizes changes from the OpenIDM repository to the LDAP server.
   </para>
   <para>
    You can run this part of the sample by using the <literal>curl</literal>
    command-line utility, or by using the OpenIDM Administration UI. This
    section provides instructions for both methods, in the following procedures:
   </para>

   <itemizedlist>
    <listitem>
     <para><xref linkend="sample-roles-cli" /></para>
    </listitem>
    <listitem>
     <para><xref linkend="sample-roles-adminui" /></para>
    </listitem>
   </itemizedlist>

   <procedure xml:id="sample-roles-cli">
    <title>Run the Sample Using the Command Line</title>
    <step>
     <para>
      Reconcile the repository over the REST interface by running the following
      command:
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request POST \
 "https://localhost:8443/openidm/recon?_action=recon&amp;mapping=systemLdapAccounts_managedUser"</userinput>
<computeroutput>{
    "_id" : "6402b04f-55ae-49a8-aa85-87d41607d256",
    "state": "ACTIVE"
 }</computeroutput></screen>
     <para>
      The reconciliation operation returns a reconciliation run ID and the
      status of the operation. Reconciliation creates user objects from LDAP in
      the OpenIDM repository, assigning the new objects random unique IDs.
     </para>
    </step>
    <step>
     <para>
      The following steps include query filter syntax described in
      <link xlink:show="new" xlink:href="integrators-guide#constructing-queries"
            xlink:role="http://docbook.org/xlink/role/olink">
       <citetitle>Constructing Queries</citetitle></link> section as well as the
      <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
            xlink:href="integrators-guide#rest-supported-operations">
       <citetitle>Supported Operations</citetitle></link> Appendix of the
      <emphasis>Integrator's Guide</emphasis>.
     </para>

     <para>
      To retrieve the users and associated IDs from the repository, the following
      command queries their IDs, with output limited by <literal>_fields</literal>
      to <literal>userName</literal> and <literal>_id</literal>.
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/managed/user?_queryId=query-all&amp;_fields=userName,_id"</userinput>
<computeroutput>{
    "result" : [ {
       "userName" : "jdoe",
       "_id" : "0918e1ca-7d5e-473d-8b64-97f47cb606f6"
    }, {
       "userName" : "bjensen",
       "_id" : "86fa4740-b250-47ff-af46-515f544b468c"
    } ],
    "resultCount" : 2,
    "pagedResultsCookie" : null,
    "remainingPagedResults" : -1
}</computeroutput></screen>
    </step>
    <step>
     <para>
      To retrieve an individual account object with specific data, include the
      ID in the URL, along with desired <literal>_field</literal> data. For
      example, the following command outputs three attributes associated with
      the noted UUID:
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/managed/user/86fa4740-b250-47ff-af46-515f544b468c?_fields=userName,roles,effectiveRoles"</userinput>
<computeroutput>{
    "userName": "bjensen",
    "roles": [ "openidm-authorized" ],
    "effectiveRoles": [ "openidm-authorized" ]
 }</computeroutput></screen>
    </step>
    <step>
     <para>
      Create an Employee and a Contractor role with the following commands:
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "If-None-Match: *" \
 --request PUT \
 --data '{
 "properties" : {
      "name" : "Employee",
      "description": "Role assigned to workers on the payroll."
      }
 }' \
 https://localhost:8443/openidm/managed/role/Employee</userinput>
 </screen>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "If-None-Match: *" \
 --request PUT \
 --data '{
 "properties" : {
      "name" : "Contractor",
      "description": "Role assigned to contract workers."
      }
 }' \
 https://localhost:8443/openidm/managed/role/Contractor</userinput></screen>
     <para>
      If you prefer a server-generated UUID for this role, you could create it
      with a POST request. For an example, see the following section:
      <link xlink:show="new" xlink:role="http://docbook/xlink/role/olink"
            xlink:href="integrators-guide#create-role-cli"><citetitle>Creating
      A New Role with a REST Call</citetitle></link>.
     </para>
    </step>
    <step>
     <para>
      Confirm that the roles now exist with the following command:
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/managed/role?_queryFilter=true"</userinput>
<computeroutput>{
   "result" : [ {
      "properties" : {
         "name" : "Employee",
         "description" : "Role assigned to workers on the payroll."
      },
      "_id" : "Employee",
      "_rev" : "1"
   }, {
      "properties" : {
         "name" : "Contractor",
         "description" : "Role assigned to contract workers."
      },
      "_id" : "Contractor",
      "_rev" : "1"
   } ],
   "resultCount" : 2,
   "pagedResultsCookie" : null,
   "remainingPagedResults" : -1
}</computeroutput></screen>
    </step>
    <step>
     <para>
      At this point, the <literal>"Employee"</literal> and
      <literal>"Contractor"</literal> roles are just labels. With the
      following command, you can add an <literal>assignments</literal>
      property to the <literal>"Employee"</literal>role:
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "If-Match: *" \
 --request PATCH \
 --data '[
      {
           "operation" : "add",
           "field" : "/assignments",
           "value" : {
                "ldap": {
                     "attributes": [
                          {
                               "name": "employeeType",
                               "value": "Employee",
                               "assignmentOperation" : "mergeWithTarget",
                               "unassignmentOperation" : "removeFromTarget"
                          }
                     ]
                }
           }
      }
 ]' \
 "https://localhost:8443/openidm/managed/role/Employee"</userinput></screen>
     <para>
      When you assign the Employee role, you will see these attributes in the
      <literal>effectiveAssignments</literal> for the target user.
     </para>
    </step>
    <step>
     <para>
      Before you can assign the Employee role to a user, you need to find the
      <literal>_id</literal> for that user. The following command finds the
      <literal>_id</literal> for user <literal>bjensen</literal>.
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/managed/user?_queryFilter=/userName+eq+"bjensen"&amp;_fields=_id'
     </userinput>
<computeroutput>{
   "result" : [ {
      "_id" : "86fa4740-b250-47ff-af46-515f544b468c"
   } ],
   "resultCount" : 1,
   "pagedResultsCookie" : null,
   "remainingPagedResults" : -1
}</computeroutput></screen>
      <para>
       For more information on the <literal>_queryFilter</literal>, see the
       following section:
       <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
             xlink:href="integrators-guide#constructing-queries">
        <citetitle>Constructing Queries</citetitle></link>. Note the use of
       single quotes around the URL to avoid conflicts with the double quotes
       around user <literal>bjensen</literal>.
      </para>
    </step>
    <step>
     <para>
      You can then use the <literal>_id</literal> to assign the Employee role to
      user <literal>bjensen</literal>:
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "If-Match: *" \
 --request PATCH \
 --data '[
      {
           "operation" : "add",
           "field" : "/roles/-",
           "value" : "managed/role/Employee"
      }
 ]' \
 "https://localhost:8443/openidm/managed/user/86fa4740-b250-47ff-af46-515f544b468c"</userinput></screen>
    </step>
    <step>
     <para>
      Review the results for user <literal>bjensen</literal>. Note how the
      following command limits the search to that user with
      <literal>?_queryFilter=/username+eq+"bjensen"</literal>. Also note how
      the command limits the output to relevant fields with
      <literal>_fields=_id,userName,roles,effectiveRoles,effectiveAssignments</literal>:
     </para>
     <screen width="100">$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/managed/user?_queryFilter=/userName+eq+"bjensen"&amp;_fields=_id,userName,roles,effectiveRoles,effectiveAssignments'
     </userinput>
 <computeroutput>{
   "result" : [ {
      "_id" : "86fa4740-b250-47ff-af46-515f544b468c",
      "userName" : "bjensen",
      "roles" : [ "openidm-authorized", "managed/role/Employee" ],
      "effectiveRoles" : [ "openidm-authorized", "managed/role/Employee" ],
      "effectiveAssignments" : {
         "ldap" : {
            "attributes" : [ {
               "name" : "employeeType",
               "value" : "Employee",
               "assignmentOperation" : "mergeWithTarget",
               "unassignmentOperation" : "removeFromTarget",
               "assignedThrough" : "managed/role/Employee"
            } ]
         }
      }
   } ],
   "resultCount" : 1,
   "pagedResultsCookie" : null,
   "remainingPagedResults" : -1
}</computeroutput></screen>
     <para>
      If you see <literal>"effectiveAssignments" : null</literal> in the output
      you might have forgotten to PATCH the <literal>assignments</literal>
      property to the Employee role, as described in an earlier step.
     </para>
     <para>
      You should also see that user <literal>bjensen</literal> has the elements
      of the <literal>assignments</literal> property in her
      <literal>"effectiveAssignments"</literal>.
     </para>
    </step>
    <step>
     <para>
      Examine the <filename>sync.json</filename> file in the
      <filename>samples/roles/provrole/conf</filename> directory. Note the
      following excerpt from the <literal>managedUser_systemLdapAccounts</literal>
      mapping:
     </para>
     <programlisting language="javascript">"name" : "managedUser_systemLdapAccounts",
"source" : "managed/user",
"target" : "system/ldap/account",
"links" : "systemLdapAccounts_managedUser",
"assignmentsToMap" : [
      "ldap"
],
...</programlisting>
     <para>
      That mapping should synchronize the <literal>employeeType</literal> attribute
      to the information for user <literal>bjensen</literal> in your instance of
      OpenDJ. To verify that analysis, run the following command:
     </para>
     <screen>$ <userinput>ldapsearch \
 --port 1389 \
 --hostname localhost \
 --baseDN "dc=example,dc=com" \
 --bindDN "cn=Directory Manager" \
 --bindPassword - \
 --searchScope sub uid=bjensen dn uid employeeType</userinput></screen>
     <para>
      You should be prompted for user <literal>'cn=Directory Manager'</literal>.
      After you enter the password (which is <literal>password</literal>, by
      default), you should see the following output:
     </para>
     <screen>dn: uid=bjensen,ou=People,dc=example,dc=com
uid: bjensen
employeeType: Employee</screen>
    </step>
    <step>
     <para>
      Now take the Employee role one step further. Add the groups that
      an Employee should be a member of in the remote data store, in this case,
      OpenDJ.
     </para>
     <para>
      User the command that follows to add the noted <literal>"value"</literal>
      of the attribute assignment for groups under the
      <literal>assignments/ldap/attributes</literal> field. The output should
      include both attributes associated with the Employee role, including the
      <literal>employeeType</literal> attribute added previously.
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "If-Match: *" \
 --request PATCH \
 --data '[
    {
       "operation" : "add",
           "field" : "/assignments/ldap/attributes/-",
           "value" : {
              "name": "ldapGroups",
              "value": [
                 "cn=Employees,ou=Groups,dc=example,dc=com",
                 "cn=Chat User,ou=Groups,dc=example,dc=com"
              ],
              "assignmentOperation" : "mergeWithTarget",
              "unassignmentOperation" : "removeFromTarget"
           }
       }
    ]' \
"https://localhost:8443/openidm/managed/role/Employee"</userinput>
<computeroutput>{
   "properties" : {
      "name" : "Employee",
      "description" : "Role assigned to workers on the payroll."
   },
   "_id" : "Employee",
   "_rev" : "3",
   "assignments" : {
      "ldap" : {
         "attributes" : [ {
            "name" : "employeeType",
            "value" : "Employee",
            "assignmentOperation" : "mergeWithTarget",
            "unassignmentOperation" : "removeFromTarget"
         }, {
            "name" : "ldapGroups",
            "value" : [ "cn=Employees,ou=Groups,dc=example,dc=com", "cn=Chat User,ou=Groups,dc=example,dc=com" ],
            "assignmentOperation" : "mergeWithTarget",
            "unassignmentOperation" : "removeFromTarget"
         } ]
      }
   }
}</computeroutput></screen>
    </step>
    <step>
     <para>
      Confirm that user <literal>bjensen</literal> is a member of the Chat User
      and Employee groups. Run the following command on the OpenDJ server:
     </para>
     <screen>$ <userinput>ldapsearch \
--port 1389 \
--hostname localhost \
--baseDN "dc=example,dc=com" \
--bindDN "cn=Directory Manager" \
--bindPassword - \
--searchScope sub uid=bjensen dn uid employeeType isMemberOf</userinput></screen>
     <para>
      After you confirm with the OpenDJ password, you should see the following
      output:
     </para>
     <screen><computeroutput>dn: uid=bjensen,ou=People,dc=example,dc=com
uid: bjensen
employeeType: Employee
isMemberOf: cn=openidm2,ou=Groups,dc=example,dc=com
isMemberOf: cn=Employees,ou=Groups,dc=example,dc=com</computeroutput></screen>
    </step>
    <step>
     <para>
      You can verify the output with the following REST call to the
      <literal>system/ldap/account</literal> endpoint:
     </para>
     <screen width="100">$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/system/ldap/account?_queryFilter=/uid+sw+"bjensen"&amp;_fields=dn,uid,employeeType,ldapGroups&amp;_prettyPrint=true'
     </userinput>
<computeroutput>{
   "result" : [ {
      "dn" : "uid=bjensen,ou=People,dc=example,dc=com",
      "uid" : "bjensen",
      "employeeType" : "Employee",
      "ldapGroups" : [ "cn=openidm2,ou=Groups,dc=example,dc=com", "cn=Employees,ou=Groups,dc=example,dc=com" ]
   } ],
   "resultCount" : 1,
   "pagedResultsCookie" : null,
   "remainingPagedResults" : -1
}</computeroutput></screen>
    </step>
    <step>
     <para>
      Now make similar changes to the Contractor role. The following command
      makes all associated changes in one <literal>PATCH</literal> add
      operation:
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "If-Match: *" \
 --request PATCH \
 --data '[
   {
      "operation" : "add",
      "field" : "/assignments/ldap/attributes",
      "value" : [{
         "name": "ldapGroups",
         "value": [
            "cn=Contractors,ou=Groups,dc=example,dc=com"
         ],
         "assignmentOperation" : "mergeWithTarget",
         "unassignmentOperation" : "removeFromTarget"
      },
      {
         "name": "employeeType",
         "value": "Contractor",
         "assignmentOperation": "mergeWithTarget",
         "unassignmentOperation": "removeFromTarget"
      }]
   }
 ]' \
 "https://localhost:8443/openidm/managed/role/Contractor"</userinput></screen>
    </step>
    <step>
     <para>
      To confirm the changes to the Contractor role, run the following command:
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 "https://localhost:8443/openidm/managed/role/Contractor"</userinput>
<computeroutput>{
   "properties" : {
      "name" : "Contractor",
      "description" : "Role assigned to contract workers."
   },
   "_id" : "Contractor",
   "_rev" : "2",
   "assignments" : {
      "ldap" : {
         "attributes" : [ {
            "name" : "ldapGroups",
            "value" : [ "cn=Contractors,ou=Groups,dc=example,dc=com" ],
            "assignmentOperation" : "mergeWithTarget",
            "unassignmentOperation" : "removeFromTarget"
         }, {
            "name" : "employeeType",
            "value" : "Contractor",
            "assignmentOperation" : "mergeWithTarget",
            "unassignmentOperation" : "removeFromTarget"
         } ]
      }
   }
}</computeroutput></screen>
    </step>
    <step>
     <para>
      In the step that follows, you will assign user <literal>jdoe</literal>
      to the Contractors role. But first, you need the <literal>_id</literal>
      for that user, and can retrieve it with the following command:
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/managed/user?_queryFilter=/userName+eq+"jdoe"&amp;_fields=_id'
     </userinput>
<computeroutput>{
   "result" : [ {
      "_id" : "0918e1ca-7d5e-473d-8b64-97f47cb606f6"
   } ],
   "resultCount" : 1,
   "pagedResultsCookie" : null,
   "remainingPagedResults" : -1
}</computeroutput></screen>
    </step>
    <step>
     <para>
      Now use that <literal>_id</literal> to assign user <literal>jdoe</literal>
      to the Contractors role:
     </para>
     <screen>$ <userinput>curl \
 --insecure \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "If-Match: *" \
 --request PATCH \
 --data '[
   {
      "operation" : "add",
      "field" : "/roles/-",
      "value" : "managed/role/Contractor"
   }
]' \
"https://localhost:8443/openidm/managed/user/0918e1ca-7d5e-473d-8b64-97f47cb606f6"</userinput></screen>
    </step>
    <step>
     <para>
      You can now review the entry for user <literal>jdoe</literal> on
      the OpenDJ server. Contrast this with the corresponding output shown
      earlier for user <literal>bjensen</literal>
     </para>
     <screen>$ <userinput>ldapsearch \
 --port 1389 \
 --hostname localhost \
 --baseDN "dc=example,dc=com" \
 --bindDN "cn=Directory Manager" \
 --bindPassword - \
 --searchScope sub uid=jdoe dn uid employeeType isMemberOf</userinput>
<computeroutput>dn: uid=jdoe,ou=People,dc=example,dc=com
uid: jdoe
employeeType: Contractor
isMemberOf: cn=Contractors,ou=Groups,dc=example,dc=com
isMemberOf: cn=openidm,ou=Groups,dc=example,dc=com</computeroutput>
     </screen>
    </step>
    <step>
     <para>
      You can also review other role-related elements for user
      <literal>jdoe</literal>, as specified by the entries after the
      <literal>_fields</literal> parameter.
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username:openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/managed/user?_queryFilter=/userName+eq+"jdoe"&amp;_fields=userName,roles,effectiveRoles,effectiveAssignments'
     </userinput>
<computeroutput>{
   "result" : [ {
      "_id" : "0e6bd1b6-2fa6-4029-a752-8264f1a09f72",
      "userName" : "jdoe",
      "roles" : [ "openidm-authorized", "managed/role/Contractor" ],
      "effectiveRoles" : [ "openidm-authorized", "managed/role/Contractor" ],
      "effectiveAssignments" : {
         "ldap" : {
            "attributes" : [ {
               "name" : "ldapGroups",
               "value" : [ "cn=Contractors,ou=Groups,dc=example,dc=com" ],
               "assignmentOperation" : "mergeWithTarget",
               "unassignmentOperation" : "removeFromTarget",
               "assignedThrough" : "managed/role/Contractor"
            }, {
               "name" : "employeeType",
               "value" : "Contractor",
               "assignmentOperation" : "mergeWithTarget",
               "unassignmentOperation" : "removeFromTarget",
               "assignedThrough" : "managed/role/Contractor"
            } ]
         }
      }
   } ],
 "resultCount" : 1,
 "pagedResultsCookie" : null,
 "remainingPagedResults" : -1
}</computeroutput></screen>
    </step>
    <step>
     <para>
      By definition, a contractor is usually not a permanent employee. So you
      should know how to remove the Contractor role from users. In the output
      to the previous command, roles was shown as:
     </para>
     <programlisting>"roles" : [ "openidm-authorized", "managed/role/Contractor" ]</programlisting>
     <para>
      This is an array has two roles. Using "zero-based numbering,"
      <literal>"openidm-authorized"</literal> is role <literal>0</literal> and
      <literal>managed/role/Contractor</literal> is role <literal>1</literal>.
     </para>
     <para>
      To remove the Contractor role, use the following command to
      point to and delete <literal>"field" : "/roles/1"</literal> from user
      <literal>jdoe</literal>. Note the <literal>_fields</literal> option at the
      end of the URL, which limits the output to the new value of
      <literal>roles</literal>.
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "If-Match: *" \
 --request PATCH \
 --data '[
      {
           "operation" : "remove",
           "field" : "/roles/1"
      }
   ]' \
 'https://localhost:8443/openidm/managed/user/0e6bd1b6-2fa6-4029-a752-8264f1a09f72?_fields=userName,roles'
     </userinput>
<computeroutput>{
      "userName" : "jdoe",
      "roles" : [ "openidm-authorized" ]
}</computeroutput></screen>
     <para>
      As you can see in the output, the only role now assigned to user
      <literal>jdoe</literal> is <literal>openidm-authorized</literal>.
     </para>
    </step>
    <step>
     <para>
      You can confirm the change with the following command:
     </para>
     <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "Content-Type: application/json" \
 --header "X-OpenIDM-Username:openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --request GET \
 'https://localhost:8443/openidm/managed/user?_queryFilter=/userName+eq+"jdoe"&amp;_fields=userName,roles,effectiveRoles,effectiveAssignments'
     </userinput>
<computeroutput>{
   "result" : [ {
      "userName" : "jdoe",
      "roles" : [ "openidm-authorized" ],
      "effectiveRoles" : [ "openidm-authorized" ],
      "effectiveAssignments" : null
   } ],
   "resultCount" : 1,
   "pagedResultsCookie" : null,
   "remainingPagedResults" : -1
}</computeroutput></screen>
     <para>
      Note how user <literal>jdoe</literal> is now assigned to only the
      <literal>openidm-authorized</literal> role, and has no
      <literal>effectiveAssignments</literal>.
    </para>
   </step>
   </procedure>

   <para>
    As an additional exercise, you can include more information about a
    role, including LDAP data such as <literal>cn=managers,o=corp</literal>
    and custom assignment and unassignment scripts, as shown in the following
    command:
   </para>

   <screen>$ <userinput>curl \
 --cacert self-signed.crt \
 --header "X-OpenIDM-Username: openidm-admin" \
 --header "X-OpenIDM-Password: openidm-admin" \
 --header "Content-Type: application/json" \
 --request POST \
 --data '{
    "properties": {
    "name": "newrole",
       "description": "an example role"
    },
    "assignments": {
       "ldap": {
          "attributes": [
             {
                "name": "ldapGroups",
                "assignmentOperation": "mergeWithTarget",
                "unassignmentOperation": "removeFromTarget",
                "value": [
                   "CN=managers,O=corp"
                ]
             }
          ],
          "onAssignment": {
             "file": "roles\/onAssignment_ldap.js",
             "type": "text\/javascript"
          },
          "onUnassignment": {
             "file": "roles\/onUnassignment_ldap.js",
             "type": "text\/javascript"
          }
       }
    }
 }' \
"https://localhost:8443/openidm/managed/role?_action=create"</userinput></screen>

   <para>
    When you create the role with a <literal>POST</literal>, note the contrast
    with the roles created with a <literal>PUT</literal>. For more information
    on the differences, see the following Appendix:
    <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
          xlink:href="integrators-guide#rest-supported-methods">
     <citetitle>Supported Methods</citetitle></link>.
   </para>

   <procedure xml:id="sample-roles-adminui">
    <title>Run the Sample Using the Admin UI</title>
    <step>
     <para>
      Log in to the Admin UI. If OpenIDM is running on the local system, the
      URL is <literal>https://localhost:8443/admin</literal>. The default
      administrative account is <literal>openidm-admin</literal> with password
      <literal>openidm-admin</literal>.
     </para>
     <para>
      The first time you log into the Admin UI, you are prompted to change your
      password. If you do not want to change your password,
      click X to close this window, and continue with the sample.
     </para>
    </step>
    <step>
     <para>
      Select the Mappings tab.
     </para>
     <para>
      This tab shows two configured mappings, one from the
      <literal>ldap</literal> server to the OpenIDM repository
      (<literal>managed/user</literal>) and one from the OpenIDM repository to
      the <literal>ldap</literal> server.
     </para>
     <mediaobject>
      <alt>Mappings tab for the Roles Provisioning Sample</alt>
      <imageobject>
       <imagedata fileref="images/sample2b-mappings.png" format="PNG"/>
      </imageobject>
     </mediaobject>
    </step>
    <step>
     <para>
      Click anywhere on the first mapping and click Reconcile Now.
     </para>
     <para>
      The reconciliation operation creates the two users from the LDAP server in
      the OpenIDM repository.
     </para>
    </step>
    <step>
     <para>
      Select Roles in the top navigation bar. This should open the Role List
      window.
     </para>
    </step>
    <step>
     <para>
      Select Add Role. A New Role window should appear. Enter information as
      shown for the Employee Role.
     </para>
     <mediaobject>
      <alt>New Role for Employees</alt>
      <imageobject>
       <imagedata fileref="images/employee-role.png" format="PNG" />
      </imageobject>
     </mediaobject>
    </step>
    <step>
     <para>
      Select Create. The Admin UI changes the name of the window
      to the Role Name, in this case, Employee. It also reveals three additional
      tabs: Events, Mappings, and Condition.
     </para>
     <para>
      Select the Entitlements tab, and then Add An Entitlement.
     </para>
     <para>
      The following image illustrates the attributes that you need to add to the
      attribute assignment named <literal>ldap</literal>. It is shown as an
      <literal>assignments</literal> in the output to the associated REST call:
     </para>

     <mediaobject>
      <alt>Assignment and Unassignment Operations</alt>
      <imageobject>
       <imagedata fileref="images/add-attribute.png" format="PNG" />
      </imageobject>
     </mediaobject>

     <screen>...
   "assignments": {
      "ldap": {
         "attributes": [
            {
               "name": "ldapGroups",
               "value": [
                  "cn=Employees,ou=Groups,dc=example,dc=com",
                  "cn=Chat Users,ou=Groups,dc=example,dc=com"
               ],
               "assignmentOperation" : "mergeWithTarget",
               "unassignmentOperation" : "removeFromTarget"
...     </screen>
     <para>
      To review the UI options for <literal>assignmentOperation</literal> and
      <literal>unassignmentOperation</literal>, select the Operations
      drop-down box, make any desired changes, and select Okay.
     </para>
     <mediaobject>
      <alt>Assignment and Unassignment Operations</alt>
      <imageobject>
       <imagedata fileref="images/assign-operation.png" format="PNG" />
      </imageobject>
     </mediaobject>
    </step>
    <step>
     <para>
      Select the Events tab. If desired, you can add custom Javascript or
      Groovy scripts. Since this sample works with default
      <literal>onAssignment</literal> and <literal>onUnassignment</literal>
      scripts, no changes are required here.
     </para>
     <mediaobject>
      <alt>Assignment and Unassignment Scripts</alt>
      <imageobject>
       <imagedata fileref="images/script-events.png" format="PNG" />
      </imageobject>
     </mediaobject>
    </step>
    <step>
     <para>
      Select the Mappings tab. To synchronize the roles that you are creating,
      add the associated attribute assignment to the mapping(s) of your choice.
      Since this sample creates mappings in the OpenIDM Managed User
      repository, the mapping that you should add is
      <literal>managedUser_systemLdapAccounts</literal>.
     </para>
     <mediaobject>
      <alt>Attribute Assignment Mapping</alt>
      <imageobject>
       <imagedata fileref="images/attribute-mapping.png" format="PNG" />
      </imageobject>
     </mediaobject>
    </step>
    <step>
     <para>
      Select the Condition tab. If you have a configuration where users have
      multiple accounts <emphasis>and</emphasis> you want to assign different
      roles to each account, you can specify Link Qualifiers as described in
      the following section:
      <link xlink:show="new" xlink:role="http://docbook.org/xlink/role/olink"
            xlink:href="integrators-guide#mapping-link-qualifiers">
       <citetitle>Using Link Qualifiers in a Mapping</citetitle></link>. As that
      does not apply to this sample, leave it blank and select Save.
     </para>
    </step>
    <step>
     <para>
      Select the Users tab. You should see reconciled users; if not, be sure to
      run the reconciliation operation described near the beginning of this
      procedure. For this sample, assign the Employee role to user
      <literal>bjensen</literal>.
     </para>
    </step>
    <step>
     <para>
      Now create a Contractor role using the previous steps. You should be able
      to set it up based on the following REST output for the Contractor role.
     </para>
     <screen>...
   "assignments": {
      "ldap": {
         "attributes": [
            {
               "name": "ldapGroups",
               "value": [
                  "cn=Contractors,ou=Groups,dc=example,dc=com"
               ],
               "assignmentOperation" : "mergeWithTarget",
               "unassignmentOperation" : "removeFromTarget"
            },
            {
               "name": "employeeType",
               "value": "Contractor",
               "assignmentOperation" : "mergeWithTarget",
               "unassignmentOperation" : "removeFromTarget"</screen>
    </step>
    <step>
     <para>
      If successful, you should see assigned roles and <literal>ldapGroups</literal>
      entries for both users <literal>bjensen</literal> and <literal>jdoe</literal>.
     </para>
     <para>
      To review these entries, navigate to the Data Management UI. From the Admin
      UI, select the <literal>openidm-admin</literal> link in the upper-right
      corner of the page, and select Data Management View. When you see the
      Dashboard window, select Users in the top navigation bar, and select one
      of the two users (<literal>bjensen</literal> or <literal>jdoe</literal>).
      The following two screens illustrate the profile for user
      <literal>bjensen</literal>. Observe how that user has the Employee role and
      is shown as a member of <literal>cn=Employees</literal> in the linked
      LDAP account resource.
     </para>

     <mediaobject>
      <alt>Barbara Jensen is an Employee</alt>
      <imageobject>
       <imagedata fileref="images/user-employee-role.png" format="PNG" />
      </imageobject>
     </mediaobject>
     <mediaobject>
      <alt>Attribute Assignment Mapping</alt>
      <imageobject>
       <imagedata fileref="images/user-employee-ldap.png" format="PNG" />
      </imageobject>
     </mediaobject>
    </step>
   </procedure>
  </section>

 </section>

 </chapter>